
smart_stove_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ca4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e2c  08000e34  00010e34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e2c  08000e2c  00010e34  2**0
                  CONTENTS
  4 .ARM          00000000  08000e2c  08000e2c  00010e34  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e2c  08000e34  00010e34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e2c  08000e2c  00010e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e30  08000e30  00010e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010e34  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010e34  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010e64  2**0
                  CONTENTS, READONLY
 14 .debug_info   000005b3  00000000  00000000  00010ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000001b2  00000000  00000000  0001145a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000090  00000000  00000000  00011610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000063  00000000  00000000  000116a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00009f99  00000000  00000000  00011703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000651  00000000  00000000  0001b69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00035ef8  00000000  00000000  0001bced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000002b0  00000000  00000000  00051be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00051e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000e14 	.word	0x08000e14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000e14 	.word	0x08000e14

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <main>:
void LCD_String(char*);
void Delay(uint32_t);
uint16_t ADC_Read(void);
float Read_Temperature(void);

int main(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
    //SystemInit();
    GPIO_Init();
 8000a0a:	f000 f85b 	bl	8000ac4 <GPIO_Init>
    ADC_Init();
 8000a0e:	f000 f88d 	bl	8000b2c <ADC_Init>
    LCD_Init();
 8000a12:	f000 f8f5 	bl	8000c00 <LCD_Init>

    float temperature = 0.0;
 8000a16:	f04f 0300 	mov.w	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
    uint32_t motion_timer = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
    uint8_t motion_detected = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	76fb      	strb	r3, [r7, #27]

    while (1) {
        temperature = Read_Temperature();
 8000a24:	f000 f8b8 	bl	8000b98 <Read_Temperature>
 8000a28:	ed87 0a05 	vstr	s0, [r7, #20]
        char temp_str[16];
        //sprintf(temp_str, "Temp: %.2fC", temperature);
        LCD_Command(0x80); // Move cursor to the beginning of the first line
 8000a2c:	2080      	movs	r0, #128	; 0x80
 8000a2e:	f000 f901 	bl	8000c34 <LCD_Command>
        LCD_String(temp_str);
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 f971 	bl	8000d1c <LCD_String>

        // Correct macro for reading GPIOA pin 0 input data
        if ((GPIOA->IDR & GPIO_IDR_IDR_0) == 0) {
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <main+0xb4>)
 8000a3c:	691b      	ldr	r3, [r3, #16]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d104      	bne.n	8000a50 <main+0x4c>
            motion_detected = 1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	76fb      	strb	r3, [r7, #27]
            motion_timer = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
 8000a4e:	e01c      	b.n	8000a8a <main+0x86>
        } else {
            if (motion_timer > 600000) { // 10 minutes
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	4a1a      	ldr	r2, [pc, #104]	; (8000abc <main+0xb8>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d915      	bls.n	8000a84 <main+0x80>
                if (temperature > 30.0) {
 8000a58:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a5c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a68:	dd0f      	ble.n	8000a8a <main+0x86>
                    GPIOB->ODR |= GPIO_ODR_ODR_8; // Turn on buzzer
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <main+0xbc>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <main+0xbc>)
 8000a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a74:	6153      	str	r3, [r2, #20]
                    GPIOB->ODR |= GPIO_ODR_ODR_9; // Turn on LED
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <main+0xbc>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <main+0xbc>)
 8000a7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a80:	6153      	str	r3, [r2, #20]
 8000a82:	e002      	b.n	8000a8a <main+0x86>
                }
            } else {
                motion_timer++;
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	3301      	adds	r3, #1
 8000a88:	61fb      	str	r3, [r7, #28]
            }
        }

        if (motion_detected) {
 8000a8a:	7efb      	ldrb	r3, [r7, #27]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00d      	beq.n	8000aac <main+0xa8>
            GPIOB->ODR &= ~GPIO_ODR_ODR_8; // Turn off buzzer
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <main+0xbc>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <main+0xbc>)
 8000a96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a9a:	6153      	str	r3, [r2, #20]
            GPIOB->ODR &= ~GPIO_ODR_ODR_9; // Turn off LED
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <main+0xbc>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <main+0xbc>)
 8000aa2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000aa6:	6153      	str	r3, [r2, #20]
            motion_detected = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	76fb      	strb	r3, [r7, #27]
        }

        Delay(1000);
 8000aac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab0:	f000 f949 	bl	8000d46 <Delay>
    while (1) {
 8000ab4:	e7b6      	b.n	8000a24 <main+0x20>
 8000ab6:	bf00      	nop
 8000ab8:	40020000 	.word	0x40020000
 8000abc:	000927c0 	.word	0x000927c0
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <GPIO_Init>:
// ...

// GPIO_Init
// Initializes the GPIO ports. Configures PA0 for the motion sensor, PA1 for the temperature sensor,
// PB0-PB7 for the LCD, PB8 for the buzzer, and PB9 for the LED.
void GPIO_Init(void) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN; // Enable GPIOA and GPIOB clocks
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <GPIO_Init+0x5c>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <GPIO_Init+0x5c>)
 8000ace:	f043 0303 	orr.w	r3, r3, #3
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure PA0 as input for motion sensor
    GPIOA->MODER &= ~GPIO_MODER_MODER0;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <GPIO_Init+0x60>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <GPIO_Init+0x60>)
 8000ada:	f023 0303 	bic.w	r3, r3, #3
 8000ade:	6013      	str	r3, [r2, #0]

    // Configure PA1 as input for DS18B20 temperature sensor
    GPIOA->MODER &= ~GPIO_MODER_MODER1;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <GPIO_Init+0x60>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <GPIO_Init+0x60>)
 8000ae6:	f023 030c 	bic.w	r3, r3, #12
 8000aea:	6013      	str	r3, [r2, #0]

    // Configure PB0 to PB7 as output for LCD
    GPIOB->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0 |
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <GPIO_Init+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <GPIO_Init+0x64>)
 8000af2:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000af6:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000afa:	6013      	str	r3, [r2, #0]
                    GPIO_MODER_MODER3_0 | GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0 |
                    GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0;

    // Configure PB8 as output for buzzer
    GPIOB->MODER |= GPIO_MODER_MODER8_0;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <GPIO_Init+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <GPIO_Init+0x64>)
 8000b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b06:	6013      	str	r3, [r2, #0]

    // Configure PB9 as output for LED
    GPIOB->MODER |= GPIO_MODER_MODER9_0;
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <GPIO_Init+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <GPIO_Init+0x64>)
 8000b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020400 	.word	0x40020400

08000b2c <ADC_Init>:

// ADC_Init
// Initializes the ADC. Configures ADC1 to read from channel 1 (PA1).
void ADC_Init(void) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; // Enable ADC1 clock
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <ADC_Init+0x2c>)
 8000b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b34:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <ADC_Init+0x2c>)
 8000b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3a:	6453      	str	r3, [r2, #68]	; 0x44

    ADC1->CR2 |= ADC_CR2_ADON; // Turn on ADC
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <ADC_Init+0x30>)
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <ADC_Init+0x30>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6093      	str	r3, [r2, #8]
    ADC1->SQR3 = 1;            // Set ADC channel 1 (PA1)
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <ADC_Init+0x30>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40012000 	.word	0x40012000

08000b60 <ADC_Read>:

// ADC_Read
// Starts an ADC conversion and waits for it to complete. Returns the ADC value.
uint16_t ADC_Read(void) {
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_SWSTART;  // Start ADC conversion
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <ADC_Read+0x30>)
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <ADC_Read+0x30>)
 8000b6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000b6e:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC)); // Wait until conversion is complete
 8000b70:	bf00      	nop
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <ADC_Read+0x30>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0f9      	beq.n	8000b72 <ADC_Read+0x12>
    return ADC1->DR; // Return ADC value
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <ADC_Read+0x30>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	b29b      	uxth	r3, r3
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40012000 	.word	0x40012000
 8000b94:	00000000 	.word	0x00000000

08000b98 <Read_Temperature>:

// Read_Temperature
// Reads the temperature from the DS18B20 sensor. Converts the ADC value to temperature in Celsius.
float Read_Temperature(void) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
    uint16_t adc_value = ADC_Read();
 8000b9e:	f7ff ffdf 	bl	8000b60 <ADC_Read>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
    // Convert ADC value to temperature (assuming 12-bit ADC resolution and 3.3V reference)
    float voltage = adc_value * 3.3 / 4096.0;
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fc5f 	bl	800046c <__aeabi_i2d>
 8000bae:	a312      	add	r3, pc, #72	; (adr r3, 8000bf8 <Read_Temperature+0x60>)
 8000bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb4:	f7ff fcc4 	bl	8000540 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4610      	mov	r0, r2
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <Read_Temperature+0x58>)
 8000bc6:	f7ff fde5 	bl	8000794 <__aeabi_ddiv>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f7ff fec7 	bl	8000964 <__aeabi_d2f>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	603b      	str	r3, [r7, #0]
    return voltage * 100.0; // Assuming LM35 sensor, scale to Celsius
 8000bda:	edd7 7a00 	vldr	s15, [r7]
 8000bde:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000bf4 <Read_Temperature+0x5c>
 8000be2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000be6:	eeb0 0a67 	vmov.f32	s0, s15
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40b00000 	.word	0x40b00000
 8000bf4:	42c80000 	.word	0x42c80000
 8000bf8:	66666666 	.word	0x66666666
 8000bfc:	400a6666 	.word	0x400a6666

08000c00 <LCD_Init>:

// LCD_Init
// Initializes the LCD in 4-bit mode.
void LCD_Init(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
    // Initialization sequence for 4-bit mode
    LCD_Command(0x33);
 8000c04:	2033      	movs	r0, #51	; 0x33
 8000c06:	f000 f815 	bl	8000c34 <LCD_Command>
    LCD_Command(0x32);
 8000c0a:	2032      	movs	r0, #50	; 0x32
 8000c0c:	f000 f812 	bl	8000c34 <LCD_Command>
    LCD_Command(0x28);
 8000c10:	2028      	movs	r0, #40	; 0x28
 8000c12:	f000 f80f 	bl	8000c34 <LCD_Command>
    LCD_Command(0x0C);
 8000c16:	200c      	movs	r0, #12
 8000c18:	f000 f80c 	bl	8000c34 <LCD_Command>
    LCD_Command(0x06);
 8000c1c:	2006      	movs	r0, #6
 8000c1e:	f000 f809 	bl	8000c34 <LCD_Command>
    LCD_Command(0x01);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f000 f806 	bl	8000c34 <LCD_Command>
    Delay(2000);
 8000c28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c2c:	f000 f88b 	bl	8000d46 <Delay>
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <LCD_Command>:

// LCD_Command
// Sends a command to the LCD.
void LCD_Command(uint8_t cmd) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR = (cmd & 0xF0);  // Send high nibble
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <LCD_Command+0x70>)
 8000c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c46:	6153      	str	r3, [r2, #20]
    GPIOB->ODR &= ~GPIO_ODR_ODR_6; // RS = 0
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <LCD_Command+0x70>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <LCD_Command+0x70>)
 8000c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c52:	6153      	str	r3, [r2, #20]
    GPIOB->ODR |= GPIO_ODR_ODR_7;  // E = 1
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <LCD_Command+0x70>)
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <LCD_Command+0x70>)
 8000c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5e:	6153      	str	r3, [r2, #20]
    Delay(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f000 f870 	bl	8000d46 <Delay>
    GPIOB->ODR &= ~GPIO_ODR_ODR_7; // E = 0
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <LCD_Command+0x70>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <LCD_Command+0x70>)
 8000c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c70:	6153      	str	r3, [r2, #20]

    GPIOB->ODR = ((cmd << 4) & 0xF0); // Send low nibble
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LCD_Command+0x70>)
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	6153      	str	r3, [r2, #20]
    GPIOB->ODR |= GPIO_ODR_ODR_7;       // E = 1
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <LCD_Command+0x70>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <LCD_Command+0x70>)
 8000c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c86:	6153      	str	r3, [r2, #20]
    Delay(1);
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f000 f85c 	bl	8000d46 <Delay>
    GPIOB->ODR &= ~GPIO_ODR_ODR_7;      // E = 0
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <LCD_Command+0x70>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <LCD_Command+0x70>)
 8000c94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c98:	6153      	str	r3, [r2, #20]
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <LCD_Char>:

// LCD_Char
// Sends a character to the LCD.
void LCD_Char(uint8_t data) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR = (data & 0xF0);  // Send high nibble
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <LCD_Char+0x70>)
 8000cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cba:	6153      	str	r3, [r2, #20]
    GPIOB->ODR |= GPIO_ODR_ODR_6;  // RS = 1
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <LCD_Char+0x70>)
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	4a15      	ldr	r2, [pc, #84]	; (8000d18 <LCD_Char+0x70>)
 8000cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc6:	6153      	str	r3, [r2, #20]
    GPIOB->ODR |= GPIO_ODR_ODR_7;  // E = 1
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <LCD_Char+0x70>)
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <LCD_Char+0x70>)
 8000cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd2:	6153      	str	r3, [r2, #20]
    Delay(1);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f000 f836 	bl	8000d46 <Delay>
    GPIOB->ODR &= ~GPIO_ODR_ODR_7; // E = 0
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <LCD_Char+0x70>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <LCD_Char+0x70>)
 8000ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ce4:	6153      	str	r3, [r2, #20]

    GPIOB->ODR = ((data << 4) & 0xF0); // Send low nibble
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	011b      	lsls	r3, r3, #4
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <LCD_Char+0x70>)
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	6153      	str	r3, [r2, #20]
    GPIOB->ODR |= GPIO_ODR_ODR_7;       // E = 1
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <LCD_Char+0x70>)
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <LCD_Char+0x70>)
 8000cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cfa:	6153      	str	r3, [r2, #20]
    Delay(1);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f000 f822 	bl	8000d46 <Delay>
    GPIOB->ODR &= ~GPIO_ODR_ODR_7;      // E = 0
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <LCD_Char+0x70>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <LCD_Char+0x70>)
 8000d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d0c:	6153      	str	r3, [r2, #20]
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40020400 	.word	0x40020400

08000d1c <LCD_String>:

// LCD_String
// Sends a string to the LCD.
void LCD_String(char *str) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000d24:	e006      	b.n	8000d34 <LCD_String+0x18>
        LCD_Char(*str++);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	1c5a      	adds	r2, r3, #1
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ffba 	bl	8000ca8 <LCD_Char>
    while (*str) {
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f4      	bne.n	8000d26 <LCD_String+0xa>
    }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <Delay>:

// Delay
// Provides a simple delay function.
void Delay(uint32_t ms) {
 8000d46:	b480      	push	{r7}
 8000d48:	b085      	sub	sp, #20
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms * 1000; i++);
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	e002      	b.n	8000d5a <Delay+0x14>
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	3301      	adds	r3, #1
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d60:	fb02 f303 	mul.w	r3, r2, r3
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d3f4      	bcc.n	8000d54 <Delay+0xe>
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d78:	480d      	ldr	r0, [pc, #52]	; (8000db0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d7a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d7c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	; (8000db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <LoopForever+0xe>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	; (8000dc4 <LoopForever+0x16>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000da6:	f000 f811 	bl	8000dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000daa:	f7ff fe2b 	bl	8000a04 <main>

08000dae <LoopForever>:

LoopForever:
  b LoopForever
 8000dae:	e7fe      	b.n	8000dae <LoopForever>
  ldr   r0, =_estack
 8000db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000dbc:	08000e34 	.word	0x08000e34
  ldr r2, =_sbss
 8000dc0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000dc4:	2000001c 	.word	0x2000001c

08000dc8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_IRQHandler>
	...

08000dcc <__libc_init_array>:
 8000dcc:	b570      	push	{r4, r5, r6, lr}
 8000dce:	4d0d      	ldr	r5, [pc, #52]	; (8000e04 <__libc_init_array+0x38>)
 8000dd0:	4c0d      	ldr	r4, [pc, #52]	; (8000e08 <__libc_init_array+0x3c>)
 8000dd2:	1b64      	subs	r4, r4, r5
 8000dd4:	10a4      	asrs	r4, r4, #2
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	42a6      	cmp	r6, r4
 8000dda:	d109      	bne.n	8000df0 <__libc_init_array+0x24>
 8000ddc:	4d0b      	ldr	r5, [pc, #44]	; (8000e0c <__libc_init_array+0x40>)
 8000dde:	4c0c      	ldr	r4, [pc, #48]	; (8000e10 <__libc_init_array+0x44>)
 8000de0:	f000 f818 	bl	8000e14 <_init>
 8000de4:	1b64      	subs	r4, r4, r5
 8000de6:	10a4      	asrs	r4, r4, #2
 8000de8:	2600      	movs	r6, #0
 8000dea:	42a6      	cmp	r6, r4
 8000dec:	d105      	bne.n	8000dfa <__libc_init_array+0x2e>
 8000dee:	bd70      	pop	{r4, r5, r6, pc}
 8000df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000df4:	4798      	blx	r3
 8000df6:	3601      	adds	r6, #1
 8000df8:	e7ee      	b.n	8000dd8 <__libc_init_array+0xc>
 8000dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dfe:	4798      	blx	r3
 8000e00:	3601      	adds	r6, #1
 8000e02:	e7f2      	b.n	8000dea <__libc_init_array+0x1e>
 8000e04:	08000e2c 	.word	0x08000e2c
 8000e08:	08000e2c 	.word	0x08000e2c
 8000e0c:	08000e2c 	.word	0x08000e2c
 8000e10:	08000e30 	.word	0x08000e30

08000e14 <_init>:
 8000e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e16:	bf00      	nop
 8000e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e1a:	bc08      	pop	{r3}
 8000e1c:	469e      	mov	lr, r3
 8000e1e:	4770      	bx	lr

08000e20 <_fini>:
 8000e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e22:	bf00      	nop
 8000e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e26:	bc08      	pop	{r3}
 8000e28:	469e      	mov	lr, r3
 8000e2a:	4770      	bx	lr
