
smart_stove_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  08004680  08004680  00014680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d6c  08004d6c  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  08004d6c  08004d6c  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d6c  08004d6c  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08004d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d0  2**0
                  CONTENTS
 10 .bss          0000017c  200001d0  200001d0  000201d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000034c  2000034c  000201d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 14 .debug_info   00003085  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000cd5  00000000  00000000  000232c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000290  00000000  00000000  00023fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001c0  00000000  00000000  00024230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000c5e4  00000000  00000000  000243f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000037f3  00000000  00000000  000309d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0003c7d9  00000000  00000000  000341c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000019f0  00000000  00000000  000709a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00072390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004664 	.word	0x08004664

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	08004664 	.word	0x08004664

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	f003 021f 	and.w	r2, r3, #31
 8000bb8:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <NVIC_EnableIRQ+0x30>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	095b      	lsrs	r3, r3, #5
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e100 	.word	0xe000e100

08000bdc <ADC_init>:
#include <stdint.h>
#include <stdio.h>


// ADC initialization
void ADC_init(void) {
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

    // Enable ADC1 clock
    RCC -> APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <ADC_init+0x44>)
 8000be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <ADC_init+0x44>)
 8000be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bea:	6453      	str	r3, [r2, #68]	; 0x44

    // Set regular channel sequence length to 1 conversion since we only have 1 sensor
    ADC1 -> SQR1 &= ~ADC_SQR1_L;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <ADC_init+0x48>)
 8000bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <ADC_init+0x48>)
 8000bf2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Set ADC1's 1st conversion in regular sequence to ch4 (mapped to PA4)
    ADC1 -> SQR3 = 4;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <ADC_init+0x48>)
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	635a      	str	r2, [r3, #52]	; 0x34

    // Set ch4 sample time to be 84 cycles
    ADC1 -> SMPR2 |= ADC_SMPR2_SMP4_2;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <ADC_init+0x48>)
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <ADC_init+0x48>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c08:	6113      	str	r3, [r2, #16]

    // Enable ADC1
    ADC1 -> CR2 |= ADC_CR2_ADON;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <ADC_init+0x48>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <ADC_init+0x48>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6093      	str	r3, [r2, #8]
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40012000 	.word	0x40012000

08000c28 <start_ADC_conversion>:

// Start ADC Conversion
void start_ADC_conversion(void) {
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

    // Continuous conversion mode
    ADC1 -> CR2 |= ADC_CR2_CONT;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <start_ADC_conversion+0x28>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <start_ADC_conversion+0x28>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	6093      	str	r3, [r2, #8]

    // Start conversion of regular channels
    ADC1 -> CR2 |=  ADC_CR2_SWSTART;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <start_ADC_conversion+0x28>)
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <start_ADC_conversion+0x28>)
 8000c3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000c42:	6093      	str	r3, [r2, #8]

}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40012000 	.word	0x40012000

08000c54 <ADC_watchdog_init>:

// ADC watchdog (AWD) initialization
void ADC_watchdog_init(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0

    // Set high threshold value corresponding to 30°C
    ADC1 -> HTR = 1109;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <ADC_watchdog_init+0x70>)
 8000c5a:	f240 4255 	movw	r2, #1109	; 0x455
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24

    // Low threshold value to be 0
    ADC1 -> LTR = 0;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <ADC_watchdog_init+0x70>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	629a      	str	r2, [r3, #40]	; 0x28

	// Select 12-bit resolution
	ADC1 -> CR1 &= ~ADC_CR1_RES;
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <ADC_watchdog_init+0x70>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	4a16      	ldr	r2, [pc, #88]	; (8000cc4 <ADC_watchdog_init+0x70>)
 8000c6c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000c70:	6053      	str	r3, [r2, #4]

	// AWD enabled on regular channels
	ADC1 -> CR1 |= ADC_CR1_AWDEN;
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <ADC_watchdog_init+0x70>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <ADC_watchdog_init+0x70>)
 8000c78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c7c:	6053      	str	r3, [r2, #4]

    // AWD enabled on a single channel
    ADC1 -> CR1 |= ADC_CR1_AWDSGL;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <ADC_watchdog_init+0x70>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <ADC_watchdog_init+0x70>)
 8000c84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c88:	6053      	str	r3, [r2, #4]

    // Enable AWD interrupt
    ADC1 -> CR1 |= ADC_CR1_AWDIE;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <ADC_watchdog_init+0x70>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <ADC_watchdog_init+0x70>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c94:	6053      	str	r3, [r2, #4]

    // Select ch4 for AWD
    ADC1 -> CR1 &= ~(ADC_CR1_AWDCH);
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <ADC_watchdog_init+0x70>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <ADC_watchdog_init+0x70>)
 8000c9c:	f023 031f 	bic.w	r3, r3, #31
 8000ca0:	6053      	str	r3, [r2, #4]
    ADC1 -> CR1 |= ADC_CR1_AWDCH_2;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <ADC_watchdog_init+0x70>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <ADC_watchdog_init+0x70>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6053      	str	r3, [r2, #4]

    // Interrupt enable for End of Conversion
    ADC1 -> CR1 |=ADC_CR1_EOCIE;
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <ADC_watchdog_init+0x70>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <ADC_watchdog_init+0x70>)
 8000cb4:	f043 0320 	orr.w	r3, r3, #32
 8000cb8:	6053      	str	r3, [r2, #4]

    // Enable ADC interrupt in NVIC
    NVIC_EnableIRQ(ADC_IRQn);
 8000cba:	2012      	movs	r0, #18
 8000cbc:	f7ff ff74 	bl	8000ba8 <NVIC_EnableIRQ>
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40012000 	.word	0x40012000

08000cc8 <ADC_IRQHandler>:
}
*/

volatile uint8_t adc_threshold_flag = 0;
// Optimized ADC interrupt handler
void ADC_IRQHandler(void) {
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

    // Check if AWD flag is set
    if (ADC1 -> SR & ADC_SR_AWD) {
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <ADC_IRQHandler+0x44>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d008      	beq.n	8000cea <ADC_IRQHandler+0x22>

        // Clear the flag before handling the event
        ADC1 -> SR &= ~ADC_SR_AWD;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <ADC_IRQHandler+0x44>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <ADC_IRQHandler+0x44>)
 8000cde:	f023 0301 	bic.w	r3, r3, #1
 8000ce2:	6013      	str	r3, [r2, #0]

        // Set flag to indicate that the ADC value is outside the threshold
        adc_threshold_flag = 1;
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <ADC_IRQHandler+0x48>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
    }

    // Check if the EOC interrupt flag is set
    if (ADC1->SR & ADC_SR_EOC) {
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <ADC_IRQHandler+0x44>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d005      	beq.n	8000d02 <ADC_IRQHandler+0x3a>

        // Clear the EOC interrupt flag
        ADC1->SR &= ~ADC_SR_EOC;
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <ADC_IRQHandler+0x44>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <ADC_IRQHandler+0x44>)
 8000cfc:	f023 0302 	bic.w	r3, r3, #2
 8000d00:	6013      	str	r3, [r2, #0]
    }
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	40012000 	.word	0x40012000
 8000d10:	200001ec 	.word	0x200001ec

08000d14 <read_ADC>:


// Read ADC value
uint16_t read_ADC(void) {
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

    // Keep looping till conversion completes on regular channel
    while (!(ADC1->SR & ADC_SR_EOC));
 8000d18:	bf00      	nop
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <read_ADC+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f9      	beq.n	8000d1a <read_ADC+0x6>

    // Return ADC value
    return ADC1->DR;
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <read_ADC+0x24>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	b29b      	uxth	r3, r3

}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40012000 	.word	0x40012000

08000d3c <read_temp>:



// Read temperature
int read_temp(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
    uint16_t adc_value = read_ADC();
 8000d42:	f7ff ffe7 	bl	8000d14 <read_ADC>
 8000d46:	4603      	mov	r3, r0
 8000d48:	81fb      	strh	r3, [r7, #14]
    int voltage_mv = adc_value * 3000 / 4095;
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000d50:	fb02 f303 	mul.w	r3, r2, r3
 8000d54:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <read_temp+0x48>)
 8000d56:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5a:	441a      	add	r2, r3
 8000d5c:	12d2      	asrs	r2, r2, #11
 8000d5e:	17db      	asrs	r3, r3, #31
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	60bb      	str	r3, [r7, #8]
    int temp_celsius = (voltage_mv - 500) / 10;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000d6a:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <read_temp+0x4c>)
 8000d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d70:	1092      	asrs	r2, r2, #2
 8000d72:	17db      	asrs	r3, r3, #31
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	607b      	str	r3, [r7, #4]
    return temp_celsius;
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	80080081 	.word	0x80080081
 8000d88:	66666667 	.word	0x66666667

08000d8c <GPIO_init>:


#include "gpio.h"

// GPIO initialization
void GPIO_init(void) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

    // Enable clock for GPIOA
    RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000d90:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <GPIO_init+0x118>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a43      	ldr	r2, [pc, #268]	; (8000ea4 <GPIO_init+0x118>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30

    // Set PA0 as input for motion sensor: bits 1:0 of MODER set to 00
    GPIOA -> MODER &= ~(GPIO_MODER_MODER0);
 8000d9c:	4b42      	ldr	r3, [pc, #264]	; (8000ea8 <GPIO_init+0x11c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a41      	ldr	r2, [pc, #260]	; (8000ea8 <GPIO_init+0x11c>)
 8000da2:	f023 0303 	bic.w	r3, r3, #3
 8000da6:	6013      	str	r3, [r2, #0]

    // Set PA1 as output for alert LED: bits 3:2 set to 01
    GPIOA -> MODER |= GPIO_MODER_MODER1_0;
 8000da8:	4b3f      	ldr	r3, [pc, #252]	; (8000ea8 <GPIO_init+0x11c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a3e      	ldr	r2, [pc, #248]	; (8000ea8 <GPIO_init+0x11c>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6013      	str	r3, [r2, #0]
    GPIOA -> MODER &= ~(GPIO_MODER_MODER1_1);
 8000db4:	4b3c      	ldr	r3, [pc, #240]	; (8000ea8 <GPIO_init+0x11c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a3b      	ldr	r2, [pc, #236]	; (8000ea8 <GPIO_init+0x11c>)
 8000dba:	f023 0308 	bic.w	r3, r3, #8
 8000dbe:	6013      	str	r3, [r2, #0]

    // Set PA4 as analog input for temp sensor: bits 9:8 set to 11
    GPIOA -> MODER |= GPIO_MODER_MODER4;
 8000dc0:	4b39      	ldr	r3, [pc, #228]	; (8000ea8 <GPIO_init+0x11c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a38      	ldr	r2, [pc, #224]	; (8000ea8 <GPIO_init+0x11c>)
 8000dc6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000dca:	6013      	str	r3, [r2, #0]

    // Set PA5 as output for buzzer: bits 11:10 set to 01
    GPIOA -> MODER |= GPIO_MODER_MODER5_0;
 8000dcc:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <GPIO_init+0x11c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a35      	ldr	r2, [pc, #212]	; (8000ea8 <GPIO_init+0x11c>)
 8000dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd6:	6013      	str	r3, [r2, #0]
    GPIOA -> MODER &= ~(GPIO_MODER_MODER5_1);
 8000dd8:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <GPIO_init+0x11c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a32      	ldr	r2, [pc, #200]	; (8000ea8 <GPIO_init+0x11c>)
 8000dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000de2:	6013      	str	r3, [r2, #0]

    // Set PA6 as output for debug LED: bits 13:12 set to 01
    GPIOA -> MODER |= GPIO_MODER_MODER6_0;
 8000de4:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <GPIO_init+0x11c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a2f      	ldr	r2, [pc, #188]	; (8000ea8 <GPIO_init+0x11c>)
 8000dea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dee:	6013      	str	r3, [r2, #0]
    GPIOA -> MODER &= ~(GPIO_MODER_MODER6_1);
 8000df0:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <GPIO_init+0x11c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a2c      	ldr	r2, [pc, #176]	; (8000ea8 <GPIO_init+0x11c>)
 8000df6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000dfa:	6013      	str	r3, [r2, #0]

    // Set PA1 as output for status LED
    GPIOA->MODER |= GPIO_MODER_MODER1_0;
 8000dfc:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <GPIO_init+0x11c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a29      	ldr	r2, [pc, #164]	; (8000ea8 <GPIO_init+0x11c>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6013      	str	r3, [r2, #0]

    // Set PA2 as input for tactile switch
    GPIOA->MODER &= ~GPIO_MODER_MODER2;
 8000e08:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <GPIO_init+0x11c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a26      	ldr	r2, [pc, #152]	; (8000ea8 <GPIO_init+0x11c>)
 8000e0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e12:	6013      	str	r3, [r2, #0]

    // Enable pull-up resistor on PA2 to ensure initial high state
    GPIOA->PUPDR |= GPIO_PUPDR_PUPDR2_0;
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <GPIO_init+0x11c>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	4a23      	ldr	r2, [pc, #140]	; (8000ea8 <GPIO_init+0x11c>)
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	60d3      	str	r3, [r2, #12]

    //-----------------------------I2C CONFIG--------------------------------

    // Enable clock for I2C1
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000e20:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <GPIO_init+0x118>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <GPIO_init+0x118>)
 8000e26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40

    // Enable clock for GPIOB
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <GPIO_init+0x118>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	4a1c      	ldr	r2, [pc, #112]	; (8000ea4 <GPIO_init+0x118>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	6313      	str	r3, [r2, #48]	; 0x30

    // Set PB6 & PB7 to alternate function (AF) Mode
    GPIOB -> MODER &= ~(GPIO_MODER_MODER6);
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <GPIO_init+0x120>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <GPIO_init+0x120>)
 8000e3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e42:	6013      	str	r3, [r2, #0]
    GPIOB -> MODER |= GPIO_MODER_MODER6_1;
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <GPIO_init+0x120>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a18      	ldr	r2, [pc, #96]	; (8000eac <GPIO_init+0x120>)
 8000e4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e4e:	6013      	str	r3, [r2, #0]
    GPIOB -> MODER &= ~(GPIO_MODER_MODER7);
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <GPIO_init+0x120>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a15      	ldr	r2, [pc, #84]	; (8000eac <GPIO_init+0x120>)
 8000e56:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e5a:	6013      	str	r3, [r2, #0]
    GPIOB -> MODER |= GPIO_MODER_MODER7_1;
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <GPIO_init+0x120>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a12      	ldr	r2, [pc, #72]	; (8000eac <GPIO_init+0x120>)
 8000e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e66:	6013      	str	r3, [r2, #0]

    // Set PB6 to AF4 (SCL) and PB7 to AF4 (SDA)
    GPIOB -> AFR[0] |= (4 << 24)| (4 << 28);
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <GPIO_init+0x120>)
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <GPIO_init+0x120>)
 8000e6e:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8000e72:	6213      	str	r3, [r2, #32]

    // Set PB6 & PB7 output type to be open-drain
    GPIOB->OTYPER |= (GPIO_OTYPER_OT_6 | GPIO_OTYPER_OT_7);
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <GPIO_init+0x120>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <GPIO_init+0x120>)
 8000e7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e7e:	6053      	str	r3, [r2, #4]

    // Enable pull-up resistors for SCL & SDA lines
    GPIOB -> PUPDR &= ~(GPIO_PUPDR_PUPDR6 | GPIO_PUPDR_PUPDR7);
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <GPIO_init+0x120>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	4a09      	ldr	r2, [pc, #36]	; (8000eac <GPIO_init+0x120>)
 8000e86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000e8a:	60d3      	str	r3, [r2, #12]
    GPIOB -> PUPDR |= GPIO_PUPDR_PUPDR6_0 | GPIO_PUPDR_PUPDR7_0;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <GPIO_init+0x120>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <GPIO_init+0x120>)
 8000e92:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000e96:	60d3      	str	r3, [r2, #12]


}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	40020400 	.word	0x40020400

08000eb0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	da0b      	bge.n	8000edc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <NVIC_SetPriority+0x4c>)
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 030f 	and.w	r3, r3, #15
 8000ed0:	3b04      	subs	r3, #4
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eda:	e009      	b.n	8000ef0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4907      	ldr	r1, [pc, #28]	; (8000f00 <NVIC_SetPriority+0x50>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f14:	d301      	bcc.n	8000f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00f      	b.n	8000f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <SysTick_Config+0x40>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f22:	210f      	movs	r1, #15
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f28:	f7ff ffc2 	bl	8000eb0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SysTick_Config+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SysTick_Config+0x40>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f54:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d014      	beq.n	8000f8a <ITM_SendChar+0x42>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f64:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f68:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00c      	beq.n	8000f8a <ITM_SendChar+0x42>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f70:	e001      	b.n	8000f76 <ITM_SendChar+0x2e>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000f72:	bf00      	nop
}
 8000f74:	bf00      	nop
 8000f76:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f8      	beq.n	8000f72 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f8a:	687b      	ldr	r3, [r7, #4]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Init>:
//For test purpose: Auto-rearm timer for 20s (20000 ms)
//#define REARM_THRESHOLD_MS 20000


// Configure SysTick timer to generate an interrupt every 1ms
void SysTick_Init(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
    // Configure SysTick timer to generate an interrupt every 1ms
    SysTick_Config(SystemCoreClock / 1000);
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <SysTick_Init+0x1c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <SysTick_Init+0x20>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	099b      	lsrs	r3, r3, #6
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ffab 	bl	8000f04 <SysTick_Config>
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	10624dd3 	.word	0x10624dd3

08000fbc <SysTick_Handler>:

// SysTick ISR: executes each time SysTick timer expires (interrupt triggered)
void SysTick_Handler(void) {
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
    if (motion_timer > 0) {
 8000fc0:	4b28      	ldr	r3, [pc, #160]	; (8001064 <SysTick_Handler+0xa8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d004      	beq.n	8000fd2 <SysTick_Handler+0x16>
        motion_timer--;
 8000fc8:	4b26      	ldr	r3, [pc, #152]	; (8001064 <SysTick_Handler+0xa8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	4a25      	ldr	r2, [pc, #148]	; (8001064 <SysTick_Handler+0xa8>)
 8000fd0:	6013      	str	r3, [r2, #0]
    }

    // Check if the button connected to PA2 is pressed
    if (!(GPIOA->IDR & GPIO_IDR_IDR_2)) {
 8000fd2:	4b25      	ldr	r3, [pc, #148]	; (8001068 <SysTick_Handler+0xac>)
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d125      	bne.n	800102a <SysTick_Handler+0x6e>
        sw_press_duration++;
 8000fde:	4b23      	ldr	r3, [pc, #140]	; (800106c <SysTick_Handler+0xb0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a21      	ldr	r2, [pc, #132]	; (800106c <SysTick_Handler+0xb0>)
 8000fe6:	6013      	str	r3, [r2, #0]
        // 3s-press to toggle system state
        if (sw_press_duration >= 3000) {
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <SysTick_Handler+0xb0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d91d      	bls.n	8001030 <SysTick_Handler+0x74>
            system_armed = !system_armed;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <SysTick_Handler+0xb4>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	bf0c      	ite	eq
 8000ffe:	2301      	moveq	r3, #1
 8001000:	2300      	movne	r3, #0
 8001002:	b2db      	uxtb	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <SysTick_Handler+0xb4>)
 8001008:	701a      	strb	r2, [r3, #0]
            // Reset sw_press_duration after each 3s-press
            sw_press_duration = 0;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <SysTick_Handler+0xb0>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
            // Start system re-arm timer if the system is disarmed
            if (!system_armed) {
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <SysTick_Handler+0xb4>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d103      	bne.n	8001022 <SysTick_Handler+0x66>
                sys_rearm_timer = REARM_THRESHOLD_MS;
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <SysTick_Handler+0xb8>)
 800101c:	4a16      	ldr	r2, [pc, #88]	; (8001078 <SysTick_Handler+0xbc>)
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	e006      	b.n	8001030 <SysTick_Handler+0x74>
            } else {
                sys_rearm_timer = 0;
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <SysTick_Handler+0xb8>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e002      	b.n	8001030 <SysTick_Handler+0x74>
            }
        }
    } else {
        sw_press_duration = 0;
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <SysTick_Handler+0xb0>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
    }

    // Count down REARM_THRESHOLD_MS till 0 to re-arm the system
    if (sys_rearm_timer > 0) {
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <SysTick_Handler+0xb8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d010      	beq.n	800105a <SysTick_Handler+0x9e>
        sys_rearm_timer--;
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <SysTick_Handler+0xb8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3b01      	subs	r3, #1
 800103e:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <SysTick_Handler+0xb8>)
 8001040:	6013      	str	r3, [r2, #0]
        if (sys_rearm_timer == 0 && !system_armed) {
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <SysTick_Handler+0xb8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d107      	bne.n	800105a <SysTick_Handler+0x9e>
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <SysTick_Handler+0xb4>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <SysTick_Handler+0x9e>
            system_armed = 1;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <SysTick_Handler+0xb4>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
        }
    }
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	200001f0 	.word	0x200001f0
 8001068:	40020000 	.word	0x40020000
 800106c:	200001f4 	.word	0x200001f4
 8001070:	20000000 	.word	0x20000000
 8001074:	200001f8 	.word	0x200001f8
 8001078:	0036ee80 	.word	0x0036ee80

0800107c <timer_delay_ms>:



// ms delay using timer
void timer_delay_ms(uint32_t delay_ms) {
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    // Enable TIM2 clock
    RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <timer_delay_ms+0x74>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a19      	ldr	r2, [pc, #100]	; (80010f0 <timer_delay_ms+0x74>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6413      	str	r3, [r2, #64]	; 0x40

    // Set 1kHz (from 16MHz source) to achieve 1ms for each count
    TIM2 -> PSC = (16000000 / 1000) - 1;
 8001090:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001094:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001098:	851a      	strh	r2, [r3, #40]	; 0x28

    // Load the desired delay
    TIM2 -> ARR = delay_ms;
 800109a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Start counting from 0
    TIM2 -> CNT = 0;
 80010a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24

    // Enable the counter: bit 0 of CR1 is set
    TIM2 -> CR1 |= TIM_CR1_CEN;
 80010aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	8013      	strh	r3, [r2, #0]

    // Keep looping while Update Interrupt Flag (UIF) is not set in Status Register (SR)
    while (!(TIM2 -> SR & TIM_SR_UIF)) {}
 80010be:	bf00      	nop
 80010c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c4:	8a1b      	ldrh	r3, [r3, #16]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f7      	beq.n	80010c0 <timer_delay_ms+0x44>

    // Clear UIF after it is set
    TIM2 -> SR &= ~(TIM_SR_UIF);
 80010d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010d4:	8a1b      	ldrh	r3, [r3, #16]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	8213      	strh	r3, [r2, #16]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	40023800 	.word	0x40023800

080010f4 <_write>:




// Redirect printf to ITM
int _write(int file, char *ptr, int len) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]

    for (int i = 0; i < len; i++) {
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	e009      	b.n	800111a <_write+0x26>

        ITM_SendChar(*ptr++);
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	60ba      	str	r2, [r7, #8]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff1a 	bl	8000f48 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3301      	adds	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	dbf1      	blt.n	8001106 <_write+0x12>
    }

    return len;
 8001122:	687b      	ldr	r3, [r7, #4]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <format_temp_str>:


void format_temp_str(int temp, char *str) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
    sprintf(str, " %d C", temp);
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	4903      	ldr	r1, [pc, #12]	; (8001148 <format_temp_str+0x1c>)
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	f001 f806 	bl	800214c <siprintf>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	08004680 	.word	0x08004680

0800114c <I2C_init>:
#include <stdint.h>
#include <stdio.h>
#define TIMEOUT 100000


void I2C_init(void) {
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

    // Reset I2C1
    RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <I2C_init+0x58>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <I2C_init+0x58>)
 8001156:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800115a:	6213      	str	r3, [r2, #32]
    RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <I2C_init+0x58>)
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <I2C_init+0x58>)
 8001162:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001166:	6213      	str	r3, [r2, #32]

    // Set the peripheral clock frequency to be the default 16 MHz
    I2C1 -> CR2 = 16;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <I2C_init+0x5c>)
 800116a:	2210      	movs	r2, #16
 800116c:	809a      	strh	r2, [r3, #4]

    // Set SCL frequency to be 100 kHz (Sm mode)
    I2C1 -> CCR = 80;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <I2C_init+0x5c>)
 8001170:	2250      	movs	r2, #80	; 0x50
 8001172:	839a      	strh	r2, [r3, #28]

    // Set max rise time
    I2C1 -> TRISE = 17;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <I2C_init+0x5c>)
 8001176:	2211      	movs	r2, #17
 8001178:	841a      	strh	r2, [r3, #32]

    // Enable ACK
    I2C1->CR1 |= I2C_CR1_ACK;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <I2C_init+0x5c>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	4a09      	ldr	r2, [pc, #36]	; (80011a8 <I2C_init+0x5c>)
 8001182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001186:	b29b      	uxth	r3, r3
 8001188:	8013      	strh	r3, [r2, #0]

    // Enable I2C1
    I2C1->CR1 |= I2C_CR1_PE;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <I2C_init+0x5c>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <I2C_init+0x5c>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	b29b      	uxth	r3, r3
 8001198:	8013      	strh	r3, [r2, #0]

}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40005400 	.word	0x40005400

080011ac <I2C_start>:


// I2C start condition
void I2C_start(void){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

	// Generate a start condition
	I2C1 -> CR1 |= I2C_CR1_START;
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <I2C_start+0x50>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4a10      	ldr	r2, [pc, #64]	; (80011fc <I2C_start+0x50>)
 80011ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011be:	b29b      	uxth	r3, r3
 80011c0:	8013      	strh	r3, [r2, #0]

	// Keep looping till the SB flag is set (i.e. start condition generated)
	uint32_t SB_timeout = TIMEOUT;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <I2C_start+0x54>)
 80011c4:	607b      	str	r3, [r7, #4]
	while(!(I2C1 -> SR1 & I2C_SR1_SB)){
 80011c6:	e009      	b.n	80011dc <I2C_start+0x30>
		if(--SB_timeout == 0){
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d103      	bne.n	80011dc <I2C_start+0x30>
			printf("Timeout waiting for SB flag to be set in start condition. \n");
 80011d4:	480b      	ldr	r0, [pc, #44]	; (8001204 <I2C_start+0x58>)
 80011d6:	f001 f901 	bl	80023dc <puts>
			return;
 80011da:	e00b      	b.n	80011f4 <I2C_start+0x48>
	while(!(I2C1 -> SR1 & I2C_SR1_SB)){
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <I2C_start+0x50>)
 80011de:	8a9b      	ldrh	r3, [r3, #20]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0ee      	beq.n	80011c8 <I2C_start+0x1c>
		}
	}

	// Clear SB flag by reading SR1
	(void)I2C1->SR1;
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <I2C_start+0x50>)
 80011ec:	8a9b      	ldrh	r3, [r3, #20]
	printf("Start condition generated. \n");
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <I2C_start+0x5c>)
 80011f0:	f001 f8f4 	bl	80023dc <puts>

}
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40005400 	.word	0x40005400
 8001200:	000186a0 	.word	0x000186a0
 8001204:	08004688 	.word	0x08004688
 8001208:	080046c4 	.word	0x080046c4

0800120c <I2C_stop>:

// I2C stop condition
void I2C_stop(void){
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0

	// Generate a stop condition
	I2C1 -> CR1 |= I2C_CR1_STOP;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <I2C_stop+0x20>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <I2C_stop+0x20>)
 8001218:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121c:	b29b      	uxth	r3, r3
 800121e:	8013      	strh	r3, [r2, #0]
	printf("Stop condition generated. \n");
 8001220:	4803      	ldr	r0, [pc, #12]	; (8001230 <I2C_stop+0x24>)
 8001222:	f001 f8db 	bl	80023dc <puts>

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40005400 	.word	0x40005400
 8001230:	080046e0 	.word	0x080046e0

08001234 <I2C_write_address>:

// I2C 7-bit address transmission
void I2C_write_address(uint8_t address){
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]

	uint8_t slave_addr = address << 1;
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	72fb      	strb	r3, [r7, #11]
	slave_addr &= ~(1); // master write to slave: lsb = 0
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	72fb      	strb	r3, [r7, #11]

	// Write DR register with the slave address
	I2C1 -> DR = slave_addr;
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <I2C_write_address+0x5c>)
 800124e:	7afa      	ldrb	r2, [r7, #11]
 8001250:	b292      	uxth	r2, r2
 8001252:	821a      	strh	r2, [r3, #16]

	uint32_t ADDR_timeout = TIMEOUT;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <I2C_write_address+0x60>)
 8001256:	60fb      	str	r3, [r7, #12]

	// Keep looping till ADDR flag is set (i.e. address sent)
	while(!(I2C1 -> SR1 & I2C_SR1_ADDR)) {
 8001258:	e009      	b.n	800126e <I2C_write_address+0x3a>

		if (--ADDR_timeout == 0){
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3b01      	subs	r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d103      	bne.n	800126e <I2C_write_address+0x3a>
			printf("Timeout waiting for ADDR flag to be set in address transmission. \n");
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <I2C_write_address+0x64>)
 8001268:	f001 f8b8 	bl	80023dc <puts>
			return;
 800126c:	e00d      	b.n	800128a <I2C_write_address+0x56>
	while(!(I2C1 -> SR1 & I2C_SR1_ADDR)) {
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <I2C_write_address+0x5c>)
 8001270:	8a9b      	ldrh	r3, [r3, #20]
 8001272:	b29b      	uxth	r3, r3
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0ee      	beq.n	800125a <I2C_write_address+0x26>
			}
		}

	// Clear ADDR flag by reading SR1 and SR2
	(void)I2C1->SR1;
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <I2C_write_address+0x5c>)
 800127e:	8a9b      	ldrh	r3, [r3, #20]
	(void)I2C1->SR2;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <I2C_write_address+0x5c>)
 8001282:	8b1b      	ldrh	r3, [r3, #24]

	printf("I2C address sent\n");
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <I2C_write_address+0x68>)
 8001286:	f001 f8a9 	bl	80023dc <puts>

}
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40005400 	.word	0x40005400
 8001294:	000186a0 	.word	0x000186a0
 8001298:	080046fc 	.word	0x080046fc
 800129c:	08004740 	.word	0x08004740

080012a0 <I2C_write_data>:


// I2C data transmission
void I2C_write_data(uint8_t data){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]

	uint32_t TXE_timeout = TIMEOUT;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <I2C_write_data+0x74>)
 80012ac:	60fb      	str	r3, [r7, #12]
	// Keep looping till TXE flag is set (i.e. data register is empty)
	while(!(I2C1 -> SR1 & I2C_SR1_TXE)){
 80012ae:	e009      	b.n	80012c4 <I2C_write_data+0x24>

		if(--TXE_timeout == 0){
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d103      	bne.n	80012c4 <I2C_write_data+0x24>
			printf("Timeout waiting for TXE flag to be set in data transmission. \n");
 80012bc:	4816      	ldr	r0, [pc, #88]	; (8001318 <I2C_write_data+0x78>)
 80012be:	f001 f88d 	bl	80023dc <puts>
			return;
 80012c2:	e023      	b.n	800130c <I2C_write_data+0x6c>
	while(!(I2C1 -> SR1 & I2C_SR1_TXE)){
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <I2C_write_data+0x7c>)
 80012c6:	8a9b      	ldrh	r3, [r3, #20]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0ee      	beq.n	80012b0 <I2C_write_data+0x10>
		}
	}

	// Write data (TXE flag is cleared by writing DR register)
	I2C1 -> DR = data;
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <I2C_write_data+0x7c>)
 80012d4:	79fa      	ldrb	r2, [r7, #7]
 80012d6:	b292      	uxth	r2, r2
 80012d8:	821a      	strh	r2, [r3, #16]

	uint32_t BTF_timeout = TIMEOUT;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <I2C_write_data+0x74>)
 80012dc:	60bb      	str	r3, [r7, #8]
	// Keep looping till BTF flag is set (i.e. byte transfer is finished)
	while(!(I2C1 -> SR1 & I2C_SR1_BTF)){
 80012de:	e009      	b.n	80012f4 <I2C_write_data+0x54>

		if (--BTF_timeout == 0){
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d103      	bne.n	80012f4 <I2C_write_data+0x54>
			printf("Timeout waiting for BEF flag to be set in data transmission. \n");
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <I2C_write_data+0x80>)
 80012ee:	f001 f875 	bl	80023dc <puts>
			return;
 80012f2:	e00b      	b.n	800130c <I2C_write_data+0x6c>
	while(!(I2C1 -> SR1 & I2C_SR1_BTF)){
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <I2C_write_data+0x7c>)
 80012f6:	8a9b      	ldrh	r3, [r3, #20]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0ee      	beq.n	80012e0 <I2C_write_data+0x40>
		}
	}

	printf("I2C data sent: 0x%02X\n", data);
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	4619      	mov	r1, r3
 8001306:	4807      	ldr	r0, [pc, #28]	; (8001324 <I2C_write_data+0x84>)
 8001308:	f001 f802 	bl	8002310 <iprintf>

}
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	000186a0 	.word	0x000186a0
 8001318:	08004754 	.word	0x08004754
 800131c:	40005400 	.word	0x40005400
 8001320:	08004794 	.word	0x08004794
 8001324:	080047d4 	.word	0x080047d4

08001328 <main>:
#define NO_MOTION_THRESHOLD_MS 1800000;
// For test purpose: Reset motion timer to 10s (10000 ms)
//#define NO_MOTION_THRESHOLD_MS 10000;


int main(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0

    SystemInit();
 800132e:	f000 fa2b 	bl	8001788 <SystemInit>
    GPIO_init();
 8001332:	f7ff fd2b 	bl	8000d8c <GPIO_init>
    SysTick_Init();
 8001336:	f7ff fe2f 	bl	8000f98 <SysTick_Init>
    I2C_init();
 800133a:	f7ff ff07 	bl	800114c <I2C_init>
    ADC_init();
 800133e:	f7ff fc4d 	bl	8000bdc <ADC_init>
    ADC_watchdog_init();
 8001342:	f7ff fc87 	bl	8000c54 <ADC_watchdog_init>
    OLED_init();
 8001346:	f000 f8b5 	bl	80014b4 <OLED_init>
    OLED_clear();
 800134a:	f000 f8ff 	bl	800154c <OLED_clear>
    start_ADC_conversion();
 800134e:	f7ff fc6b 	bl	8000c28 <start_ADC_conversion>

    const char* msg = "Smart Stove Monitor:)";
 8001352:	4b3a      	ldr	r3, [pc, #232]	; (800143c <main+0x114>)
 8001354:	61fb      	str	r3, [r7, #28]
    const char* temp_msg = "Current Temperature:";
 8001356:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <main+0x118>)
 8001358:	61bb      	str	r3, [r7, #24]
    OLED_set_cursor(0, 0);
 800135a:	2100      	movs	r1, #0
 800135c:	2000      	movs	r0, #0
 800135e:	f000 f947 	bl	80015f0 <OLED_set_cursor>
    OLED_print_str(msg);
 8001362:	69f8      	ldr	r0, [r7, #28]
 8001364:	f000 f916 	bl	8001594 <OLED_print_str>
    OLED_set_cursor(0, 2);
 8001368:	2102      	movs	r1, #2
 800136a:	2000      	movs	r0, #0
 800136c:	f000 f940 	bl	80015f0 <OLED_set_cursor>
    OLED_print_str(temp_msg);
 8001370:	69b8      	ldr	r0, [r7, #24]
 8001372:	f000 f90f 	bl	8001594 <OLED_print_str>

    while (1) {
    	// Handle the event when ADC value is outside the threshold while the system is armed
        if (adc_threshold_flag && system_armed) {
 8001376:	4b33      	ldr	r3, [pc, #204]	; (8001444 <main+0x11c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d02d      	beq.n	80013dc <main+0xb4>
 8001380:	4b31      	ldr	r3, [pc, #196]	; (8001448 <main+0x120>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d028      	beq.n	80013dc <main+0xb4>
        	// Clear the flag after handling
        	adc_threshold_flag = 0;
 800138a:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <main+0x11c>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
            uint16_t adc_value = read_ADC();
 8001390:	f7ff fcc0 	bl	8000d14 <read_ADC>
 8001394:	4603      	mov	r3, r0
 8001396:	82fb      	strh	r3, [r7, #22]
            if ((adc_value > 1109 || adc_value < 0) && motion_timer == 0) {
 8001398:	8afb      	ldrh	r3, [r7, #22]
 800139a:	f240 4255 	movw	r2, #1109	; 0x455
 800139e:	4293      	cmp	r3, r2
 80013a0:	d910      	bls.n	80013c4 <main+0x9c>
 80013a2:	4b2a      	ldr	r3, [pc, #168]	; (800144c <main+0x124>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10c      	bne.n	80013c4 <main+0x9c>
                GPIOA -> ODR |= GPIO_ODR_ODR_5;  // Turn on the buzzer connected to PA5
 80013aa:	4b29      	ldr	r3, [pc, #164]	; (8001450 <main+0x128>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	4a28      	ldr	r2, [pc, #160]	; (8001450 <main+0x128>)
 80013b0:	f043 0320 	orr.w	r3, r3, #32
 80013b4:	6153      	str	r3, [r2, #20]
                GPIOA -> ODR |= GPIO_ODR_ODR_6;  // Turn the LED connected to PA6
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <main+0x128>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	4a25      	ldr	r2, [pc, #148]	; (8001450 <main+0x128>)
 80013bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c0:	6153      	str	r3, [r2, #20]
 80013c2:	e00b      	b.n	80013dc <main+0xb4>
            } else {
                GPIOA -> ODR &= ~GPIO_ODR_ODR_5; // Turn off the buzzer connected to PA5
 80013c4:	4b22      	ldr	r3, [pc, #136]	; (8001450 <main+0x128>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	4a21      	ldr	r2, [pc, #132]	; (8001450 <main+0x128>)
 80013ca:	f023 0320 	bic.w	r3, r3, #32
 80013ce:	6153      	str	r3, [r2, #20]
                GPIOA -> ODR &= ~GPIO_ODR_ODR_6; // Turn off the LED connected to PA6
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <main+0x128>)
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	4a1e      	ldr	r2, [pc, #120]	; (8001450 <main+0x128>)
 80013d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013da:	6153      	str	r3, [r2, #20]
            }
        }

        // Update the status LED based on system state
        if (system_armed) {
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <main+0x120>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d006      	beq.n	80013f4 <main+0xcc>
            GPIOA->ODR |= GPIO_ODR_ODR_1; // Turn on the status LED connected to PA1
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <main+0x128>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	4a19      	ldr	r2, [pc, #100]	; (8001450 <main+0x128>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6153      	str	r3, [r2, #20]
 80013f2:	e005      	b.n	8001400 <main+0xd8>
        } else {
            GPIOA->ODR &= ~GPIO_ODR_ODR_1; // Turn off the status LED connected to PA1
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <main+0x128>)
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	4a15      	ldr	r2, [pc, #84]	; (8001450 <main+0x128>)
 80013fa:	f023 0302 	bic.w	r3, r3, #2
 80013fe:	6153      	str	r3, [r2, #20]
        }

        // If no motion is detected, start counting down from the threshold value
        if (GPIOA->IDR & GPIO_IDR_IDR_0) {
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <main+0x128>)
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <main+0xea>
            motion_timer = NO_MOTION_THRESHOLD_MS;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <main+0x124>)
 800140e:	4a11      	ldr	r2, [pc, #68]	; (8001454 <main+0x12c>)
 8001410:	601a      	str	r2, [r3, #0]
        }


        int temp = read_temp();
 8001412:	f7ff fc93 	bl	8000d3c <read_temp>
 8001416:	6138      	str	r0, [r7, #16]
        char temp_str[16];
        format_temp_str(temp, temp_str);
 8001418:	463b      	mov	r3, r7
 800141a:	4619      	mov	r1, r3
 800141c:	6938      	ldr	r0, [r7, #16]
 800141e:	f7ff fe85 	bl	800112c <format_temp_str>
        OLED_set_cursor(45, 5);
 8001422:	2105      	movs	r1, #5
 8001424:	202d      	movs	r0, #45	; 0x2d
 8001426:	f000 f8e3 	bl	80015f0 <OLED_set_cursor>
        OLED_print_str(temp_str);
 800142a:	463b      	mov	r3, r7
 800142c:	4618      	mov	r0, r3
 800142e:	f000 f8b1 	bl	8001594 <OLED_print_str>
        timer_delay_ms(500);
 8001432:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001436:	f7ff fe21 	bl	800107c <timer_delay_ms>
    while (1) {
 800143a:	e79c      	b.n	8001376 <main+0x4e>
 800143c:	080047ec 	.word	0x080047ec
 8001440:	08004804 	.word	0x08004804
 8001444:	200001ec 	.word	0x200001ec
 8001448:	20000000 	.word	0x20000000
 800144c:	200001f0 	.word	0x200001f0
 8001450:	40020000 	.word	0x40020000
 8001454:	001b7740 	.word	0x001b7740

08001458 <OLED_send_cmd>:

#define OLED_WIDTH 128
#define OLED_HEIGHT 64


void OLED_send_cmd(uint8_t cmd) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
    I2C_start();
 8001462:	f7ff fea3 	bl	80011ac <I2C_start>
    I2C_write_address(OLED_ADDRESS);
 8001466:	203c      	movs	r0, #60	; 0x3c
 8001468:	f7ff fee4 	bl	8001234 <I2C_write_address>
    I2C_write_data(OLED_CMD_BYTE);
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff ff17 	bl	80012a0 <I2C_write_data>
    I2C_write_data(cmd);
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff13 	bl	80012a0 <I2C_write_data>
    I2C_stop();
 800147a:	f7ff fec7 	bl	800120c <I2C_stop>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <OLED_send_data>:

void OLED_send_data(uint8_t data) {
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
    I2C_start();
 8001490:	f7ff fe8c 	bl	80011ac <I2C_start>
    I2C_write_address(OLED_ADDRESS);
 8001494:	203c      	movs	r0, #60	; 0x3c
 8001496:	f7ff fecd 	bl	8001234 <I2C_write_address>
    I2C_write_data(OLED_DATA_BYTE);
 800149a:	2040      	movs	r0, #64	; 0x40
 800149c:	f7ff ff00 	bl	80012a0 <I2C_write_data>
    I2C_write_data(data);
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fefc 	bl	80012a0 <I2C_write_data>
    I2C_stop();
 80014a8:	f7ff feb0 	bl	800120c <I2C_stop>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <OLED_init>:

void OLED_init(void) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0

    timer_delay_ms(100); // Ensure pwr is stable
 80014b8:	2064      	movs	r0, #100	; 0x64
 80014ba:	f7ff fddf 	bl	800107c <timer_delay_ms>
    OLED_send_cmd(OLED_DISPLAY_OFF);
 80014be:	20ae      	movs	r0, #174	; 0xae
 80014c0:	f7ff ffca 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_MUX_RATIO);
 80014c4:	20a8      	movs	r0, #168	; 0xa8
 80014c6:	f7ff ffc7 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_MUX_RATIO_DEFAULT); // 1:64
 80014ca:	203f      	movs	r0, #63	; 0x3f
 80014cc:	f7ff ffc4 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_DISPLAY_OFFSET);
 80014d0:	20d3      	movs	r0, #211	; 0xd3
 80014d2:	f7ff ffc1 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_DISPLAY_OFFSET_DEFAULT); // No offset
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff ffbe 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_DISPLAY_START_LINE_DEFAULT); // Start line 0
 80014dc:	2040      	movs	r0, #64	; 0x40
 80014de:	f7ff ffbb 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_SEGMENT_REMAP_REMAPPED_MODE);
 80014e2:	20a1      	movs	r0, #161	; 0xa1
 80014e4:	f7ff ffb8 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_COM_OUTPUT_SCAN_DIRECTION_REMAPPED_MODE);
 80014e8:	20c8      	movs	r0, #200	; 0xc8
 80014ea:	f7ff ffb5 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_COM_PINS_HW_CONFIG);
 80014ee:	20da      	movs	r0, #218	; 0xda
 80014f0:	f7ff ffb2 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_COM_PINS_HW_CONFIG_SEQUENTIAL);
 80014f4:	2012      	movs	r0, #18
 80014f6:	f7ff ffaf 	bl	8001458 <OLED_send_cmd>

    OLED_send_cmd(OLED_SET_MEM_ADDR_MODE);
 80014fa:	2020      	movs	r0, #32
 80014fc:	f7ff ffac 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_MEM_ADDR_MODE_PAGE);
 8001500:	2002      	movs	r0, #2
 8001502:	f7ff ffa9 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_LOWER_COL_START_ADDR_DEFAULT);
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff ffa6 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_HIGHER_COL_START_ADDR_DEFAULT);
 800150c:	2010      	movs	r0, #16
 800150e:	f7ff ffa3 	bl	8001458 <OLED_send_cmd>

    OLED_send_cmd(OLED_SET_CONTRAST_CTRL);
 8001512:	2081      	movs	r0, #129	; 0x81
 8001514:	f7ff ffa0 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_CONTRAST_CTRL_DEFAULT);
 8001518:	207f      	movs	r0, #127	; 0x7f
 800151a:	f7ff ff9d 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_ENTIRE_DISPLAY_ON);
 800151e:	20a4      	movs	r0, #164	; 0xa4
 8001520:	f7ff ff9a 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_NORMAL_DISPLAY);
 8001524:	20a6      	movs	r0, #166	; 0xa6
 8001526:	f7ff ff97 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_OSC_FREQ);
 800152a:	20d5      	movs	r0, #213	; 0xd5
 800152c:	f7ff ff94 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_OSC_FREQ_DEFAULT);
 8001530:	2080      	movs	r0, #128	; 0x80
 8001532:	f7ff ff91 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_SET_CHARGE_PUMP);
 8001536:	208d      	movs	r0, #141	; 0x8d
 8001538:	f7ff ff8e 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_ENABLE_CHARGE_PUMP);
 800153c:	2014      	movs	r0, #20
 800153e:	f7ff ff8b 	bl	8001458 <OLED_send_cmd>
    OLED_send_cmd(OLED_DISPLAY_ON);
 8001542:	20af      	movs	r0, #175	; 0xaf
 8001544:	f7ff ff88 	bl	8001458 <OLED_send_cmd>

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}

0800154c <OLED_clear>:


// Clear entire display
void OLED_clear(void) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
    // Loop through each page of the OLED display
    for (uint8_t page = 0; page < 8; page++) {
 8001552:	2300      	movs	r3, #0
 8001554:	71fb      	strb	r3, [r7, #7]
 8001556:	e014      	b.n	8001582 <OLED_clear+0x36>
        // Set the cursor to column/segment 0 of the current page
        OLED_set_cursor(0, page);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	4619      	mov	r1, r3
 800155c:	2000      	movs	r0, #0
 800155e:	f000 f847 	bl	80015f0 <OLED_set_cursor>
        // Loop through each column of the current page
        for (uint8_t col = 0; col < 128; col++) {
 8001562:	2300      	movs	r3, #0
 8001564:	71bb      	strb	r3, [r7, #6]
 8001566:	e005      	b.n	8001574 <OLED_clear+0x28>
            // 0x00 to clear the current column (8 bits)
            OLED_send_data(0x00);
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff ff8c 	bl	8001486 <OLED_send_data>
        for (uint8_t col = 0; col < 128; col++) {
 800156e:	79bb      	ldrb	r3, [r7, #6]
 8001570:	3301      	adds	r3, #1
 8001572:	71bb      	strb	r3, [r7, #6]
 8001574:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001578:	2b00      	cmp	r3, #0
 800157a:	daf5      	bge.n	8001568 <OLED_clear+0x1c>
    for (uint8_t page = 0; page < 8; page++) {
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	3301      	adds	r3, #1
 8001580:	71fb      	strb	r3, [r7, #7]
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b07      	cmp	r3, #7
 8001586:	d9e7      	bls.n	8001558 <OLED_clear+0xc>
        }
    }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <OLED_print_str>:



void OLED_print_str(const char* str) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	// Loop through all the chars pointed by str till '\0' is reached
    while (*str) {
 800159c:	e01d      	b.n	80015da <OLED_print_str+0x46>
    	// Loop through 5 columns defined in font array
        for (uint8_t i = 0; i < 5; i++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
 80015a2:	e011      	b.n	80015c8 <OLED_print_str+0x34>

        	// row 0 of the font array is 'space', which has ASCII number of 32
            OLED_send_data(font[*str - 32][i]);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	f1a3 0220 	sub.w	r2, r3, #32
 80015ac:	7bf9      	ldrb	r1, [r7, #15]
 80015ae:	480f      	ldr	r0, [pc, #60]	; (80015ec <OLED_print_str+0x58>)
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	4403      	add	r3, r0
 80015b8:	440b      	add	r3, r1
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff62 	bl	8001486 <OLED_send_data>
        for (uint8_t i = 0; i < 5; i++) {
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	3301      	adds	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d9ea      	bls.n	80015a4 <OLED_print_str+0x10>
        }
        // Add space between each character
        OLED_send_data(0x00);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff ff59 	bl	8001486 <OLED_send_data>
        str++;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3301      	adds	r3, #1
 80015d8:	607b      	str	r3, [r7, #4]
    while (*str) {
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1dd      	bne.n	800159e <OLED_print_str+0xa>
    }
}
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	0800481c 	.word	0x0800481c

080015f0 <OLED_set_cursor>:


// Set cursor position for where the next data byte will be written
// Note: GDDRAM has a total of 7 pages with 8 rows & 128 columns per page
void OLED_set_cursor(uint8_t col, uint8_t page) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	460a      	mov	r2, r1
 80015fa:	71fb      	strb	r3, [r7, #7]
 80015fc:	4613      	mov	r3, r2
 80015fe:	71bb      	strb	r3, [r7, #6]
    OLED_send_cmd(OLED_SET_PAGE_START_ADDR_0 + page);
 8001600:	79bb      	ldrb	r3, [r7, #6]
 8001602:	3b50      	subs	r3, #80	; 0x50
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff26 	bl	8001458 <OLED_send_cmd>

    // Set higher col start address (higher nibble)
    OLED_send_cmd(((col & 0xF0) >> 4) | OLED_SET_HIGHER_COL_START_ADDR_DEFAULT);
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	091b      	lsrs	r3, r3, #4
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	b2db      	uxtb	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff1d 	bl	8001458 <OLED_send_cmd>

    // Set lower col start address (lower nibble)
    OLED_send_cmd((col & 0x0F) | OLED_SET_LOWER_COL_START_ADDR_DEFAULT);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	b2db      	uxtb	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff16 	bl	8001458 <OLED_send_cmd>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return 1;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <_kill>:

int _kill(int pid, int sig)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800164e:	f000 fed9 	bl	8002404 <__errno>
 8001652:	4603      	mov	r3, r0
 8001654:	2216      	movs	r2, #22
 8001656:	601a      	str	r2, [r3, #0]
  return -1;
 8001658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_exit>:

void _exit (int status)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800166c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ffe7 	bl	8001644 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001676:	e7fe      	b.n	8001676 <_exit+0x12>

08001678 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e00a      	b.n	80016a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168a:	f3af 8000 	nop.w
 800168e:	4601      	mov	r1, r0
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	60ba      	str	r2, [r7, #8]
 8001696:	b2ca      	uxtb	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbf0      	blt.n	800168a <_read+0x12>
  }

  return len;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016da:	605a      	str	r2, [r3, #4]
  return 0;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_isatty>:

int _isatty(int file)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001724:	4a14      	ldr	r2, [pc, #80]	; (8001778 <_sbrk+0x5c>)
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <_sbrk+0x60>)
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <_sbrk+0x64>)
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <_sbrk+0x68>)
 800173c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	429a      	cmp	r2, r3
 800174a:	d207      	bcs.n	800175c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800174c:	f000 fe5a 	bl	8002404 <__errno>
 8001750:	4603      	mov	r3, r0
 8001752:	220c      	movs	r2, #12
 8001754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800175a:	e009      	b.n	8001770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	4a05      	ldr	r2, [pc, #20]	; (8001780 <_sbrk+0x64>)
 800176c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20020000 	.word	0x20020000
 800177c:	00000400 	.word	0x00000400
 8001780:	200001fc 	.word	0x200001fc
 8001784:	20000350 	.word	0x20000350

08001788 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800178c:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <SystemInit+0x60>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001792:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <SystemInit+0x60>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <SystemInit+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a12      	ldr	r2, [pc, #72]	; (80017ec <SystemInit+0x64>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <SystemInit+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <SystemInit+0x64>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <SystemInit+0x64>)
 80017b4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80017b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <SystemInit+0x64>)
 80017c0:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <SystemInit+0x68>)
 80017c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <SystemInit+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a08      	ldr	r2, [pc, #32]	; (80017ec <SystemInit+0x64>)
 80017ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <SystemInit+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80017d6:	f000 f80d 	bl	80017f4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017da:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <SystemInit+0x60>)
 80017dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017e0:	609a      	str	r2, [r3, #8]
#endif
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00
 80017ec:	40023800 	.word	0x40023800
 80017f0:	24003010 	.word	0x24003010

080017f4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_0WS;
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <SetSysClock+0x30>)
 80017fa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80017fe:	601a      	str	r2, [r3, #0]
  
  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <SetSysClock+0x34>)
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <SetSysClock+0x34>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	6093      	str	r3, [r2, #8]
      
  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <SetSysClock+0x34>)
 800180a:	4a07      	ldr	r2, [pc, #28]	; (8001828 <SetSysClock+0x34>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <SetSysClock+0x34>)
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <SetSysClock+0x34>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	6093      	str	r3, [r2, #8]

}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023c00 	.word	0x40023c00
 8001828:	40023800 	.word	0x40023800

0800182c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800182c:	480d      	ldr	r0, [pc, #52]	; (8001864 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800182e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001830:	f7ff ffaa 	bl	8001788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001834:	480c      	ldr	r0, [pc, #48]	; (8001868 <LoopForever+0x6>)
  ldr r1, =_edata
 8001836:	490d      	ldr	r1, [pc, #52]	; (800186c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <LoopForever+0xe>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <LoopForever+0x12>)
  ldr r4, =_ebss
 800184c:	4c0a      	ldr	r4, [pc, #40]	; (8001878 <LoopForever+0x16>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800185a:	f000 fdd9 	bl	8002410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800185e:	f7ff fd63 	bl	8001328 <main>

08001862 <LoopForever>:

LoopForever:
  b LoopForever
 8001862:	e7fe      	b.n	8001862 <LoopForever>
  ldr   r0, =_estack
 8001864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800186c:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001870:	08004d74 	.word	0x08004d74
  ldr r2, =_sbss
 8001874:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001878:	2000034c 	.word	0x2000034c

0800187c <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800187c:	e7fe      	b.n	800187c <BusFault_Handler>

0800187e <__cvt>:
 800187e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001882:	ec55 4b10 	vmov	r4, r5, d0
 8001886:	2d00      	cmp	r5, #0
 8001888:	460e      	mov	r6, r1
 800188a:	4619      	mov	r1, r3
 800188c:	462b      	mov	r3, r5
 800188e:	bfbb      	ittet	lt
 8001890:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8001894:	461d      	movlt	r5, r3
 8001896:	2300      	movge	r3, #0
 8001898:	232d      	movlt	r3, #45	; 0x2d
 800189a:	700b      	strb	r3, [r1, #0]
 800189c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800189e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80018a2:	4691      	mov	r9, r2
 80018a4:	f023 0820 	bic.w	r8, r3, #32
 80018a8:	bfbc      	itt	lt
 80018aa:	4622      	movlt	r2, r4
 80018ac:	4614      	movlt	r4, r2
 80018ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80018b2:	d005      	beq.n	80018c0 <__cvt+0x42>
 80018b4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80018b8:	d100      	bne.n	80018bc <__cvt+0x3e>
 80018ba:	3601      	adds	r6, #1
 80018bc:	2102      	movs	r1, #2
 80018be:	e000      	b.n	80018c2 <__cvt+0x44>
 80018c0:	2103      	movs	r1, #3
 80018c2:	ab03      	add	r3, sp, #12
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	ab02      	add	r3, sp, #8
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	ec45 4b10 	vmov	d0, r4, r5
 80018ce:	4653      	mov	r3, sl
 80018d0:	4632      	mov	r2, r6
 80018d2:	f000 fe4d 	bl	8002570 <_dtoa_r>
 80018d6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80018da:	4607      	mov	r7, r0
 80018dc:	d102      	bne.n	80018e4 <__cvt+0x66>
 80018de:	f019 0f01 	tst.w	r9, #1
 80018e2:	d022      	beq.n	800192a <__cvt+0xac>
 80018e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80018e8:	eb07 0906 	add.w	r9, r7, r6
 80018ec:	d110      	bne.n	8001910 <__cvt+0x92>
 80018ee:	783b      	ldrb	r3, [r7, #0]
 80018f0:	2b30      	cmp	r3, #48	; 0x30
 80018f2:	d10a      	bne.n	800190a <__cvt+0x8c>
 80018f4:	2200      	movs	r2, #0
 80018f6:	2300      	movs	r3, #0
 80018f8:	4620      	mov	r0, r4
 80018fa:	4629      	mov	r1, r5
 80018fc:	f7ff f8e4 	bl	8000ac8 <__aeabi_dcmpeq>
 8001900:	b918      	cbnz	r0, 800190a <__cvt+0x8c>
 8001902:	f1c6 0601 	rsb	r6, r6, #1
 8001906:	f8ca 6000 	str.w	r6, [sl]
 800190a:	f8da 3000 	ldr.w	r3, [sl]
 800190e:	4499      	add	r9, r3
 8001910:	2200      	movs	r2, #0
 8001912:	2300      	movs	r3, #0
 8001914:	4620      	mov	r0, r4
 8001916:	4629      	mov	r1, r5
 8001918:	f7ff f8d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800191c:	b108      	cbz	r0, 8001922 <__cvt+0xa4>
 800191e:	f8cd 900c 	str.w	r9, [sp, #12]
 8001922:	2230      	movs	r2, #48	; 0x30
 8001924:	9b03      	ldr	r3, [sp, #12]
 8001926:	454b      	cmp	r3, r9
 8001928:	d307      	bcc.n	800193a <__cvt+0xbc>
 800192a:	9b03      	ldr	r3, [sp, #12]
 800192c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	4638      	mov	r0, r7
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	b004      	add	sp, #16
 8001936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800193a:	1c59      	adds	r1, r3, #1
 800193c:	9103      	str	r1, [sp, #12]
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e7f0      	b.n	8001924 <__cvt+0xa6>

08001942 <__exponent>:
 8001942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001944:	4603      	mov	r3, r0
 8001946:	2900      	cmp	r1, #0
 8001948:	bfb8      	it	lt
 800194a:	4249      	neglt	r1, r1
 800194c:	f803 2b02 	strb.w	r2, [r3], #2
 8001950:	bfb4      	ite	lt
 8001952:	222d      	movlt	r2, #45	; 0x2d
 8001954:	222b      	movge	r2, #43	; 0x2b
 8001956:	2909      	cmp	r1, #9
 8001958:	7042      	strb	r2, [r0, #1]
 800195a:	dd2a      	ble.n	80019b2 <__exponent+0x70>
 800195c:	f10d 0207 	add.w	r2, sp, #7
 8001960:	4617      	mov	r7, r2
 8001962:	260a      	movs	r6, #10
 8001964:	4694      	mov	ip, r2
 8001966:	fb91 f5f6 	sdiv	r5, r1, r6
 800196a:	fb06 1415 	mls	r4, r6, r5, r1
 800196e:	3430      	adds	r4, #48	; 0x30
 8001970:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8001974:	460c      	mov	r4, r1
 8001976:	2c63      	cmp	r4, #99	; 0x63
 8001978:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800197c:	4629      	mov	r1, r5
 800197e:	dcf1      	bgt.n	8001964 <__exponent+0x22>
 8001980:	3130      	adds	r1, #48	; 0x30
 8001982:	f1ac 0402 	sub.w	r4, ip, #2
 8001986:	f802 1c01 	strb.w	r1, [r2, #-1]
 800198a:	1c41      	adds	r1, r0, #1
 800198c:	4622      	mov	r2, r4
 800198e:	42ba      	cmp	r2, r7
 8001990:	d30a      	bcc.n	80019a8 <__exponent+0x66>
 8001992:	f10d 0209 	add.w	r2, sp, #9
 8001996:	eba2 020c 	sub.w	r2, r2, ip
 800199a:	42bc      	cmp	r4, r7
 800199c:	bf88      	it	hi
 800199e:	2200      	movhi	r2, #0
 80019a0:	4413      	add	r3, r2
 80019a2:	1a18      	subs	r0, r3, r0
 80019a4:	b003      	add	sp, #12
 80019a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80019ac:	f801 5f01 	strb.w	r5, [r1, #1]!
 80019b0:	e7ed      	b.n	800198e <__exponent+0x4c>
 80019b2:	2330      	movs	r3, #48	; 0x30
 80019b4:	3130      	adds	r1, #48	; 0x30
 80019b6:	7083      	strb	r3, [r0, #2]
 80019b8:	70c1      	strb	r1, [r0, #3]
 80019ba:	1d03      	adds	r3, r0, #4
 80019bc:	e7f1      	b.n	80019a2 <__exponent+0x60>
	...

080019c0 <_printf_float>:
 80019c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019c4:	ed2d 8b02 	vpush	{d8}
 80019c8:	b08d      	sub	sp, #52	; 0x34
 80019ca:	460c      	mov	r4, r1
 80019cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80019d0:	4616      	mov	r6, r2
 80019d2:	461f      	mov	r7, r3
 80019d4:	4605      	mov	r5, r0
 80019d6:	f000 fd11 	bl	80023fc <_localeconv_r>
 80019da:	f8d0 a000 	ldr.w	sl, [r0]
 80019de:	4650      	mov	r0, sl
 80019e0:	f7fe fc46 	bl	8000270 <strlen>
 80019e4:	2300      	movs	r3, #0
 80019e6:	930a      	str	r3, [sp, #40]	; 0x28
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	9305      	str	r3, [sp, #20]
 80019ec:	f8d8 3000 	ldr.w	r3, [r8]
 80019f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80019f4:	3307      	adds	r3, #7
 80019f6:	f023 0307 	bic.w	r3, r3, #7
 80019fa:	f103 0208 	add.w	r2, r3, #8
 80019fe:	f8c8 2000 	str.w	r2, [r8]
 8001a02:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001a06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8001a0a:	9307      	str	r3, [sp, #28]
 8001a0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8001a10:	ee08 0a10 	vmov	s16, r0
 8001a14:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8001a18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001a1c:	4b9e      	ldr	r3, [pc, #632]	; (8001c98 <_printf_float+0x2d8>)
 8001a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a22:	f7ff f883 	bl	8000b2c <__aeabi_dcmpun>
 8001a26:	bb88      	cbnz	r0, 8001a8c <_printf_float+0xcc>
 8001a28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001a2c:	4b9a      	ldr	r3, [pc, #616]	; (8001c98 <_printf_float+0x2d8>)
 8001a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a32:	f7ff f85d 	bl	8000af0 <__aeabi_dcmple>
 8001a36:	bb48      	cbnz	r0, 8001a8c <_printf_float+0xcc>
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	4640      	mov	r0, r8
 8001a3e:	4649      	mov	r1, r9
 8001a40:	f7ff f84c 	bl	8000adc <__aeabi_dcmplt>
 8001a44:	b110      	cbz	r0, 8001a4c <_printf_float+0x8c>
 8001a46:	232d      	movs	r3, #45	; 0x2d
 8001a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a4c:	4a93      	ldr	r2, [pc, #588]	; (8001c9c <_printf_float+0x2dc>)
 8001a4e:	4b94      	ldr	r3, [pc, #592]	; (8001ca0 <_printf_float+0x2e0>)
 8001a50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8001a54:	bf94      	ite	ls
 8001a56:	4690      	movls	r8, r2
 8001a58:	4698      	movhi	r8, r3
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	6123      	str	r3, [r4, #16]
 8001a5e:	9b05      	ldr	r3, [sp, #20]
 8001a60:	f023 0304 	bic.w	r3, r3, #4
 8001a64:	6023      	str	r3, [r4, #0]
 8001a66:	f04f 0900 	mov.w	r9, #0
 8001a6a:	9700      	str	r7, [sp, #0]
 8001a6c:	4633      	mov	r3, r6
 8001a6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8001a70:	4621      	mov	r1, r4
 8001a72:	4628      	mov	r0, r5
 8001a74:	f000 f9da 	bl	8001e2c <_printf_common>
 8001a78:	3001      	adds	r0, #1
 8001a7a:	f040 8090 	bne.w	8001b9e <_printf_float+0x1de>
 8001a7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a82:	b00d      	add	sp, #52	; 0x34
 8001a84:	ecbd 8b02 	vpop	{d8}
 8001a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a8c:	4642      	mov	r2, r8
 8001a8e:	464b      	mov	r3, r9
 8001a90:	4640      	mov	r0, r8
 8001a92:	4649      	mov	r1, r9
 8001a94:	f7ff f84a 	bl	8000b2c <__aeabi_dcmpun>
 8001a98:	b140      	cbz	r0, 8001aac <_printf_float+0xec>
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bfbc      	itt	lt
 8001aa0:	232d      	movlt	r3, #45	; 0x2d
 8001aa2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8001aa6:	4a7f      	ldr	r2, [pc, #508]	; (8001ca4 <_printf_float+0x2e4>)
 8001aa8:	4b7f      	ldr	r3, [pc, #508]	; (8001ca8 <_printf_float+0x2e8>)
 8001aaa:	e7d1      	b.n	8001a50 <_printf_float+0x90>
 8001aac:	6863      	ldr	r3, [r4, #4]
 8001aae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8001ab2:	9206      	str	r2, [sp, #24]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	d13f      	bne.n	8001b38 <_printf_float+0x178>
 8001ab8:	2306      	movs	r3, #6
 8001aba:	6063      	str	r3, [r4, #4]
 8001abc:	9b05      	ldr	r3, [sp, #20]
 8001abe:	6861      	ldr	r1, [r4, #4]
 8001ac0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9303      	str	r3, [sp, #12]
 8001ac8:	ab0a      	add	r3, sp, #40	; 0x28
 8001aca:	e9cd b301 	strd	fp, r3, [sp, #4]
 8001ace:	ab09      	add	r3, sp, #36	; 0x24
 8001ad0:	ec49 8b10 	vmov	d0, r8, r9
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	6022      	str	r2, [r4, #0]
 8001ad8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8001adc:	4628      	mov	r0, r5
 8001ade:	f7ff fece 	bl	800187e <__cvt>
 8001ae2:	9b06      	ldr	r3, [sp, #24]
 8001ae4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001ae6:	2b47      	cmp	r3, #71	; 0x47
 8001ae8:	4680      	mov	r8, r0
 8001aea:	d108      	bne.n	8001afe <_printf_float+0x13e>
 8001aec:	1cc8      	adds	r0, r1, #3
 8001aee:	db02      	blt.n	8001af6 <_printf_float+0x136>
 8001af0:	6863      	ldr	r3, [r4, #4]
 8001af2:	4299      	cmp	r1, r3
 8001af4:	dd41      	ble.n	8001b7a <_printf_float+0x1ba>
 8001af6:	f1ab 0302 	sub.w	r3, fp, #2
 8001afa:	fa5f fb83 	uxtb.w	fp, r3
 8001afe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8001b02:	d820      	bhi.n	8001b46 <_printf_float+0x186>
 8001b04:	3901      	subs	r1, #1
 8001b06:	465a      	mov	r2, fp
 8001b08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001b0c:	9109      	str	r1, [sp, #36]	; 0x24
 8001b0e:	f7ff ff18 	bl	8001942 <__exponent>
 8001b12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b14:	1813      	adds	r3, r2, r0
 8001b16:	2a01      	cmp	r2, #1
 8001b18:	4681      	mov	r9, r0
 8001b1a:	6123      	str	r3, [r4, #16]
 8001b1c:	dc02      	bgt.n	8001b24 <_printf_float+0x164>
 8001b1e:	6822      	ldr	r2, [r4, #0]
 8001b20:	07d2      	lsls	r2, r2, #31
 8001b22:	d501      	bpl.n	8001b28 <_printf_float+0x168>
 8001b24:	3301      	adds	r3, #1
 8001b26:	6123      	str	r3, [r4, #16]
 8001b28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d09c      	beq.n	8001a6a <_printf_float+0xaa>
 8001b30:	232d      	movs	r3, #45	; 0x2d
 8001b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b36:	e798      	b.n	8001a6a <_printf_float+0xaa>
 8001b38:	9a06      	ldr	r2, [sp, #24]
 8001b3a:	2a47      	cmp	r2, #71	; 0x47
 8001b3c:	d1be      	bne.n	8001abc <_printf_float+0xfc>
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1bc      	bne.n	8001abc <_printf_float+0xfc>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e7b9      	b.n	8001aba <_printf_float+0xfa>
 8001b46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8001b4a:	d118      	bne.n	8001b7e <_printf_float+0x1be>
 8001b4c:	2900      	cmp	r1, #0
 8001b4e:	6863      	ldr	r3, [r4, #4]
 8001b50:	dd0b      	ble.n	8001b6a <_printf_float+0x1aa>
 8001b52:	6121      	str	r1, [r4, #16]
 8001b54:	b913      	cbnz	r3, 8001b5c <_printf_float+0x19c>
 8001b56:	6822      	ldr	r2, [r4, #0]
 8001b58:	07d0      	lsls	r0, r2, #31
 8001b5a:	d502      	bpl.n	8001b62 <_printf_float+0x1a2>
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	440b      	add	r3, r1
 8001b60:	6123      	str	r3, [r4, #16]
 8001b62:	65a1      	str	r1, [r4, #88]	; 0x58
 8001b64:	f04f 0900 	mov.w	r9, #0
 8001b68:	e7de      	b.n	8001b28 <_printf_float+0x168>
 8001b6a:	b913      	cbnz	r3, 8001b72 <_printf_float+0x1b2>
 8001b6c:	6822      	ldr	r2, [r4, #0]
 8001b6e:	07d2      	lsls	r2, r2, #31
 8001b70:	d501      	bpl.n	8001b76 <_printf_float+0x1b6>
 8001b72:	3302      	adds	r3, #2
 8001b74:	e7f4      	b.n	8001b60 <_printf_float+0x1a0>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e7f2      	b.n	8001b60 <_printf_float+0x1a0>
 8001b7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8001b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b80:	4299      	cmp	r1, r3
 8001b82:	db05      	blt.n	8001b90 <_printf_float+0x1d0>
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	6121      	str	r1, [r4, #16]
 8001b88:	07d8      	lsls	r0, r3, #31
 8001b8a:	d5ea      	bpl.n	8001b62 <_printf_float+0x1a2>
 8001b8c:	1c4b      	adds	r3, r1, #1
 8001b8e:	e7e7      	b.n	8001b60 <_printf_float+0x1a0>
 8001b90:	2900      	cmp	r1, #0
 8001b92:	bfd4      	ite	le
 8001b94:	f1c1 0202 	rsble	r2, r1, #2
 8001b98:	2201      	movgt	r2, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	e7e0      	b.n	8001b60 <_printf_float+0x1a0>
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	055a      	lsls	r2, r3, #21
 8001ba2:	d407      	bmi.n	8001bb4 <_printf_float+0x1f4>
 8001ba4:	6923      	ldr	r3, [r4, #16]
 8001ba6:	4642      	mov	r2, r8
 8001ba8:	4631      	mov	r1, r6
 8001baa:	4628      	mov	r0, r5
 8001bac:	47b8      	blx	r7
 8001bae:	3001      	adds	r0, #1
 8001bb0:	d12c      	bne.n	8001c0c <_printf_float+0x24c>
 8001bb2:	e764      	b.n	8001a7e <_printf_float+0xbe>
 8001bb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8001bb8:	f240 80e0 	bls.w	8001d7c <_printf_float+0x3bc>
 8001bbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f7fe ff80 	bl	8000ac8 <__aeabi_dcmpeq>
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	d034      	beq.n	8001c36 <_printf_float+0x276>
 8001bcc:	4a37      	ldr	r2, [pc, #220]	; (8001cac <_printf_float+0x2ec>)
 8001bce:	2301      	movs	r3, #1
 8001bd0:	4631      	mov	r1, r6
 8001bd2:	4628      	mov	r0, r5
 8001bd4:	47b8      	blx	r7
 8001bd6:	3001      	adds	r0, #1
 8001bd8:	f43f af51 	beq.w	8001a7e <_printf_float+0xbe>
 8001bdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001be0:	429a      	cmp	r2, r3
 8001be2:	db02      	blt.n	8001bea <_printf_float+0x22a>
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	07d8      	lsls	r0, r3, #31
 8001be8:	d510      	bpl.n	8001c0c <_printf_float+0x24c>
 8001bea:	ee18 3a10 	vmov	r3, s16
 8001bee:	4652      	mov	r2, sl
 8001bf0:	4631      	mov	r1, r6
 8001bf2:	4628      	mov	r0, r5
 8001bf4:	47b8      	blx	r7
 8001bf6:	3001      	adds	r0, #1
 8001bf8:	f43f af41 	beq.w	8001a7e <_printf_float+0xbe>
 8001bfc:	f04f 0800 	mov.w	r8, #0
 8001c00:	f104 091a 	add.w	r9, r4, #26
 8001c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c06:	3b01      	subs	r3, #1
 8001c08:	4543      	cmp	r3, r8
 8001c0a:	dc09      	bgt.n	8001c20 <_printf_float+0x260>
 8001c0c:	6823      	ldr	r3, [r4, #0]
 8001c0e:	079b      	lsls	r3, r3, #30
 8001c10:	f100 8107 	bmi.w	8001e22 <_printf_float+0x462>
 8001c14:	68e0      	ldr	r0, [r4, #12]
 8001c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001c18:	4298      	cmp	r0, r3
 8001c1a:	bfb8      	it	lt
 8001c1c:	4618      	movlt	r0, r3
 8001c1e:	e730      	b.n	8001a82 <_printf_float+0xc2>
 8001c20:	2301      	movs	r3, #1
 8001c22:	464a      	mov	r2, r9
 8001c24:	4631      	mov	r1, r6
 8001c26:	4628      	mov	r0, r5
 8001c28:	47b8      	blx	r7
 8001c2a:	3001      	adds	r0, #1
 8001c2c:	f43f af27 	beq.w	8001a7e <_printf_float+0xbe>
 8001c30:	f108 0801 	add.w	r8, r8, #1
 8001c34:	e7e6      	b.n	8001c04 <_printf_float+0x244>
 8001c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	dc39      	bgt.n	8001cb0 <_printf_float+0x2f0>
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <_printf_float+0x2ec>)
 8001c3e:	2301      	movs	r3, #1
 8001c40:	4631      	mov	r1, r6
 8001c42:	4628      	mov	r0, r5
 8001c44:	47b8      	blx	r7
 8001c46:	3001      	adds	r0, #1
 8001c48:	f43f af19 	beq.w	8001a7e <_printf_float+0xbe>
 8001c4c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8001c50:	4313      	orrs	r3, r2
 8001c52:	d102      	bne.n	8001c5a <_printf_float+0x29a>
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	07d9      	lsls	r1, r3, #31
 8001c58:	d5d8      	bpl.n	8001c0c <_printf_float+0x24c>
 8001c5a:	ee18 3a10 	vmov	r3, s16
 8001c5e:	4652      	mov	r2, sl
 8001c60:	4631      	mov	r1, r6
 8001c62:	4628      	mov	r0, r5
 8001c64:	47b8      	blx	r7
 8001c66:	3001      	adds	r0, #1
 8001c68:	f43f af09 	beq.w	8001a7e <_printf_float+0xbe>
 8001c6c:	f04f 0900 	mov.w	r9, #0
 8001c70:	f104 0a1a 	add.w	sl, r4, #26
 8001c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c76:	425b      	negs	r3, r3
 8001c78:	454b      	cmp	r3, r9
 8001c7a:	dc01      	bgt.n	8001c80 <_printf_float+0x2c0>
 8001c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c7e:	e792      	b.n	8001ba6 <_printf_float+0x1e6>
 8001c80:	2301      	movs	r3, #1
 8001c82:	4652      	mov	r2, sl
 8001c84:	4631      	mov	r1, r6
 8001c86:	4628      	mov	r0, r5
 8001c88:	47b8      	blx	r7
 8001c8a:	3001      	adds	r0, #1
 8001c8c:	f43f aef7 	beq.w	8001a7e <_printf_float+0xbe>
 8001c90:	f109 0901 	add.w	r9, r9, #1
 8001c94:	e7ee      	b.n	8001c74 <_printf_float+0x2b4>
 8001c96:	bf00      	nop
 8001c98:	7fefffff 	.word	0x7fefffff
 8001c9c:	080049fc 	.word	0x080049fc
 8001ca0:	08004a00 	.word	0x08004a00
 8001ca4:	08004a04 	.word	0x08004a04
 8001ca8:	08004a08 	.word	0x08004a08
 8001cac:	08004a0c 	.word	0x08004a0c
 8001cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001cb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	bfa8      	it	ge
 8001cb8:	461a      	movge	r2, r3
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	4691      	mov	r9, r2
 8001cbe:	dc37      	bgt.n	8001d30 <_printf_float+0x370>
 8001cc0:	f04f 0b00 	mov.w	fp, #0
 8001cc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001cc8:	f104 021a 	add.w	r2, r4, #26
 8001ccc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001cce:	9305      	str	r3, [sp, #20]
 8001cd0:	eba3 0309 	sub.w	r3, r3, r9
 8001cd4:	455b      	cmp	r3, fp
 8001cd6:	dc33      	bgt.n	8001d40 <_printf_float+0x380>
 8001cd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	db3b      	blt.n	8001d58 <_printf_float+0x398>
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	07da      	lsls	r2, r3, #31
 8001ce4:	d438      	bmi.n	8001d58 <_printf_float+0x398>
 8001ce6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8001cea:	eba2 0903 	sub.w	r9, r2, r3
 8001cee:	9b05      	ldr	r3, [sp, #20]
 8001cf0:	1ad2      	subs	r2, r2, r3
 8001cf2:	4591      	cmp	r9, r2
 8001cf4:	bfa8      	it	ge
 8001cf6:	4691      	movge	r9, r2
 8001cf8:	f1b9 0f00 	cmp.w	r9, #0
 8001cfc:	dc35      	bgt.n	8001d6a <_printf_float+0x3aa>
 8001cfe:	f04f 0800 	mov.w	r8, #0
 8001d02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001d06:	f104 0a1a 	add.w	sl, r4, #26
 8001d0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001d0e:	1a9b      	subs	r3, r3, r2
 8001d10:	eba3 0309 	sub.w	r3, r3, r9
 8001d14:	4543      	cmp	r3, r8
 8001d16:	f77f af79 	ble.w	8001c0c <_printf_float+0x24c>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	4652      	mov	r2, sl
 8001d1e:	4631      	mov	r1, r6
 8001d20:	4628      	mov	r0, r5
 8001d22:	47b8      	blx	r7
 8001d24:	3001      	adds	r0, #1
 8001d26:	f43f aeaa 	beq.w	8001a7e <_printf_float+0xbe>
 8001d2a:	f108 0801 	add.w	r8, r8, #1
 8001d2e:	e7ec      	b.n	8001d0a <_printf_float+0x34a>
 8001d30:	4613      	mov	r3, r2
 8001d32:	4631      	mov	r1, r6
 8001d34:	4642      	mov	r2, r8
 8001d36:	4628      	mov	r0, r5
 8001d38:	47b8      	blx	r7
 8001d3a:	3001      	adds	r0, #1
 8001d3c:	d1c0      	bne.n	8001cc0 <_printf_float+0x300>
 8001d3e:	e69e      	b.n	8001a7e <_printf_float+0xbe>
 8001d40:	2301      	movs	r3, #1
 8001d42:	4631      	mov	r1, r6
 8001d44:	4628      	mov	r0, r5
 8001d46:	9205      	str	r2, [sp, #20]
 8001d48:	47b8      	blx	r7
 8001d4a:	3001      	adds	r0, #1
 8001d4c:	f43f ae97 	beq.w	8001a7e <_printf_float+0xbe>
 8001d50:	9a05      	ldr	r2, [sp, #20]
 8001d52:	f10b 0b01 	add.w	fp, fp, #1
 8001d56:	e7b9      	b.n	8001ccc <_printf_float+0x30c>
 8001d58:	ee18 3a10 	vmov	r3, s16
 8001d5c:	4652      	mov	r2, sl
 8001d5e:	4631      	mov	r1, r6
 8001d60:	4628      	mov	r0, r5
 8001d62:	47b8      	blx	r7
 8001d64:	3001      	adds	r0, #1
 8001d66:	d1be      	bne.n	8001ce6 <_printf_float+0x326>
 8001d68:	e689      	b.n	8001a7e <_printf_float+0xbe>
 8001d6a:	9a05      	ldr	r2, [sp, #20]
 8001d6c:	464b      	mov	r3, r9
 8001d6e:	4442      	add	r2, r8
 8001d70:	4631      	mov	r1, r6
 8001d72:	4628      	mov	r0, r5
 8001d74:	47b8      	blx	r7
 8001d76:	3001      	adds	r0, #1
 8001d78:	d1c1      	bne.n	8001cfe <_printf_float+0x33e>
 8001d7a:	e680      	b.n	8001a7e <_printf_float+0xbe>
 8001d7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001d7e:	2a01      	cmp	r2, #1
 8001d80:	dc01      	bgt.n	8001d86 <_printf_float+0x3c6>
 8001d82:	07db      	lsls	r3, r3, #31
 8001d84:	d53a      	bpl.n	8001dfc <_printf_float+0x43c>
 8001d86:	2301      	movs	r3, #1
 8001d88:	4642      	mov	r2, r8
 8001d8a:	4631      	mov	r1, r6
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	47b8      	blx	r7
 8001d90:	3001      	adds	r0, #1
 8001d92:	f43f ae74 	beq.w	8001a7e <_printf_float+0xbe>
 8001d96:	ee18 3a10 	vmov	r3, s16
 8001d9a:	4652      	mov	r2, sl
 8001d9c:	4631      	mov	r1, r6
 8001d9e:	4628      	mov	r0, r5
 8001da0:	47b8      	blx	r7
 8001da2:	3001      	adds	r0, #1
 8001da4:	f43f ae6b 	beq.w	8001a7e <_printf_float+0xbe>
 8001da8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001dac:	2200      	movs	r2, #0
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8001db4:	f7fe fe88 	bl	8000ac8 <__aeabi_dcmpeq>
 8001db8:	b9d8      	cbnz	r0, 8001df2 <_printf_float+0x432>
 8001dba:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8001dbe:	f108 0201 	add.w	r2, r8, #1
 8001dc2:	4631      	mov	r1, r6
 8001dc4:	4628      	mov	r0, r5
 8001dc6:	47b8      	blx	r7
 8001dc8:	3001      	adds	r0, #1
 8001dca:	d10e      	bne.n	8001dea <_printf_float+0x42a>
 8001dcc:	e657      	b.n	8001a7e <_printf_float+0xbe>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	4652      	mov	r2, sl
 8001dd2:	4631      	mov	r1, r6
 8001dd4:	4628      	mov	r0, r5
 8001dd6:	47b8      	blx	r7
 8001dd8:	3001      	adds	r0, #1
 8001dda:	f43f ae50 	beq.w	8001a7e <_printf_float+0xbe>
 8001dde:	f108 0801 	add.w	r8, r8, #1
 8001de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001de4:	3b01      	subs	r3, #1
 8001de6:	4543      	cmp	r3, r8
 8001de8:	dcf1      	bgt.n	8001dce <_printf_float+0x40e>
 8001dea:	464b      	mov	r3, r9
 8001dec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8001df0:	e6da      	b.n	8001ba8 <_printf_float+0x1e8>
 8001df2:	f04f 0800 	mov.w	r8, #0
 8001df6:	f104 0a1a 	add.w	sl, r4, #26
 8001dfa:	e7f2      	b.n	8001de2 <_printf_float+0x422>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	4642      	mov	r2, r8
 8001e00:	e7df      	b.n	8001dc2 <_printf_float+0x402>
 8001e02:	2301      	movs	r3, #1
 8001e04:	464a      	mov	r2, r9
 8001e06:	4631      	mov	r1, r6
 8001e08:	4628      	mov	r0, r5
 8001e0a:	47b8      	blx	r7
 8001e0c:	3001      	adds	r0, #1
 8001e0e:	f43f ae36 	beq.w	8001a7e <_printf_float+0xbe>
 8001e12:	f108 0801 	add.w	r8, r8, #1
 8001e16:	68e3      	ldr	r3, [r4, #12]
 8001e18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001e1a:	1a5b      	subs	r3, r3, r1
 8001e1c:	4543      	cmp	r3, r8
 8001e1e:	dcf0      	bgt.n	8001e02 <_printf_float+0x442>
 8001e20:	e6f8      	b.n	8001c14 <_printf_float+0x254>
 8001e22:	f04f 0800 	mov.w	r8, #0
 8001e26:	f104 0919 	add.w	r9, r4, #25
 8001e2a:	e7f4      	b.n	8001e16 <_printf_float+0x456>

08001e2c <_printf_common>:
 8001e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e30:	4616      	mov	r6, r2
 8001e32:	4699      	mov	r9, r3
 8001e34:	688a      	ldr	r2, [r1, #8]
 8001e36:	690b      	ldr	r3, [r1, #16]
 8001e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	bfb8      	it	lt
 8001e40:	4613      	movlt	r3, r2
 8001e42:	6033      	str	r3, [r6, #0]
 8001e44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e48:	4607      	mov	r7, r0
 8001e4a:	460c      	mov	r4, r1
 8001e4c:	b10a      	cbz	r2, 8001e52 <_printf_common+0x26>
 8001e4e:	3301      	adds	r3, #1
 8001e50:	6033      	str	r3, [r6, #0]
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	0699      	lsls	r1, r3, #26
 8001e56:	bf42      	ittt	mi
 8001e58:	6833      	ldrmi	r3, [r6, #0]
 8001e5a:	3302      	addmi	r3, #2
 8001e5c:	6033      	strmi	r3, [r6, #0]
 8001e5e:	6825      	ldr	r5, [r4, #0]
 8001e60:	f015 0506 	ands.w	r5, r5, #6
 8001e64:	d106      	bne.n	8001e74 <_printf_common+0x48>
 8001e66:	f104 0a19 	add.w	sl, r4, #25
 8001e6a:	68e3      	ldr	r3, [r4, #12]
 8001e6c:	6832      	ldr	r2, [r6, #0]
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	42ab      	cmp	r3, r5
 8001e72:	dc26      	bgt.n	8001ec2 <_printf_common+0x96>
 8001e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e78:	1e13      	subs	r3, r2, #0
 8001e7a:	6822      	ldr	r2, [r4, #0]
 8001e7c:	bf18      	it	ne
 8001e7e:	2301      	movne	r3, #1
 8001e80:	0692      	lsls	r2, r2, #26
 8001e82:	d42b      	bmi.n	8001edc <_printf_common+0xb0>
 8001e84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e88:	4649      	mov	r1, r9
 8001e8a:	4638      	mov	r0, r7
 8001e8c:	47c0      	blx	r8
 8001e8e:	3001      	adds	r0, #1
 8001e90:	d01e      	beq.n	8001ed0 <_printf_common+0xa4>
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	6922      	ldr	r2, [r4, #16]
 8001e96:	f003 0306 	and.w	r3, r3, #6
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	bf02      	ittt	eq
 8001e9e:	68e5      	ldreq	r5, [r4, #12]
 8001ea0:	6833      	ldreq	r3, [r6, #0]
 8001ea2:	1aed      	subeq	r5, r5, r3
 8001ea4:	68a3      	ldr	r3, [r4, #8]
 8001ea6:	bf0c      	ite	eq
 8001ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001eac:	2500      	movne	r5, #0
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	bfc4      	itt	gt
 8001eb2:	1a9b      	subgt	r3, r3, r2
 8001eb4:	18ed      	addgt	r5, r5, r3
 8001eb6:	2600      	movs	r6, #0
 8001eb8:	341a      	adds	r4, #26
 8001eba:	42b5      	cmp	r5, r6
 8001ebc:	d11a      	bne.n	8001ef4 <_printf_common+0xc8>
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	e008      	b.n	8001ed4 <_printf_common+0xa8>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	4652      	mov	r2, sl
 8001ec6:	4649      	mov	r1, r9
 8001ec8:	4638      	mov	r0, r7
 8001eca:	47c0      	blx	r8
 8001ecc:	3001      	adds	r0, #1
 8001ece:	d103      	bne.n	8001ed8 <_printf_common+0xac>
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ed8:	3501      	adds	r5, #1
 8001eda:	e7c6      	b.n	8001e6a <_printf_common+0x3e>
 8001edc:	18e1      	adds	r1, r4, r3
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	2030      	movs	r0, #48	; 0x30
 8001ee2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ee6:	4422      	add	r2, r4
 8001ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001eec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	e7c7      	b.n	8001e84 <_printf_common+0x58>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	4622      	mov	r2, r4
 8001ef8:	4649      	mov	r1, r9
 8001efa:	4638      	mov	r0, r7
 8001efc:	47c0      	blx	r8
 8001efe:	3001      	adds	r0, #1
 8001f00:	d0e6      	beq.n	8001ed0 <_printf_common+0xa4>
 8001f02:	3601      	adds	r6, #1
 8001f04:	e7d9      	b.n	8001eba <_printf_common+0x8e>
	...

08001f08 <_printf_i>:
 8001f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f0c:	7e0f      	ldrb	r7, [r1, #24]
 8001f0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001f10:	2f78      	cmp	r7, #120	; 0x78
 8001f12:	4691      	mov	r9, r2
 8001f14:	4680      	mov	r8, r0
 8001f16:	460c      	mov	r4, r1
 8001f18:	469a      	mov	sl, r3
 8001f1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001f1e:	d807      	bhi.n	8001f30 <_printf_i+0x28>
 8001f20:	2f62      	cmp	r7, #98	; 0x62
 8001f22:	d80a      	bhi.n	8001f3a <_printf_i+0x32>
 8001f24:	2f00      	cmp	r7, #0
 8001f26:	f000 80d4 	beq.w	80020d2 <_printf_i+0x1ca>
 8001f2a:	2f58      	cmp	r7, #88	; 0x58
 8001f2c:	f000 80c0 	beq.w	80020b0 <_printf_i+0x1a8>
 8001f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f38:	e03a      	b.n	8001fb0 <_printf_i+0xa8>
 8001f3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f3e:	2b15      	cmp	r3, #21
 8001f40:	d8f6      	bhi.n	8001f30 <_printf_i+0x28>
 8001f42:	a101      	add	r1, pc, #4	; (adr r1, 8001f48 <_printf_i+0x40>)
 8001f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f48:	08001fa1 	.word	0x08001fa1
 8001f4c:	08001fb5 	.word	0x08001fb5
 8001f50:	08001f31 	.word	0x08001f31
 8001f54:	08001f31 	.word	0x08001f31
 8001f58:	08001f31 	.word	0x08001f31
 8001f5c:	08001f31 	.word	0x08001f31
 8001f60:	08001fb5 	.word	0x08001fb5
 8001f64:	08001f31 	.word	0x08001f31
 8001f68:	08001f31 	.word	0x08001f31
 8001f6c:	08001f31 	.word	0x08001f31
 8001f70:	08001f31 	.word	0x08001f31
 8001f74:	080020b9 	.word	0x080020b9
 8001f78:	08001fe1 	.word	0x08001fe1
 8001f7c:	08002073 	.word	0x08002073
 8001f80:	08001f31 	.word	0x08001f31
 8001f84:	08001f31 	.word	0x08001f31
 8001f88:	080020db 	.word	0x080020db
 8001f8c:	08001f31 	.word	0x08001f31
 8001f90:	08001fe1 	.word	0x08001fe1
 8001f94:	08001f31 	.word	0x08001f31
 8001f98:	08001f31 	.word	0x08001f31
 8001f9c:	0800207b 	.word	0x0800207b
 8001fa0:	682b      	ldr	r3, [r5, #0]
 8001fa2:	1d1a      	adds	r2, r3, #4
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	602a      	str	r2, [r5, #0]
 8001fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e09f      	b.n	80020f4 <_printf_i+0x1ec>
 8001fb4:	6820      	ldr	r0, [r4, #0]
 8001fb6:	682b      	ldr	r3, [r5, #0]
 8001fb8:	0607      	lsls	r7, r0, #24
 8001fba:	f103 0104 	add.w	r1, r3, #4
 8001fbe:	6029      	str	r1, [r5, #0]
 8001fc0:	d501      	bpl.n	8001fc6 <_printf_i+0xbe>
 8001fc2:	681e      	ldr	r6, [r3, #0]
 8001fc4:	e003      	b.n	8001fce <_printf_i+0xc6>
 8001fc6:	0646      	lsls	r6, r0, #25
 8001fc8:	d5fb      	bpl.n	8001fc2 <_printf_i+0xba>
 8001fca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001fce:	2e00      	cmp	r6, #0
 8001fd0:	da03      	bge.n	8001fda <_printf_i+0xd2>
 8001fd2:	232d      	movs	r3, #45	; 0x2d
 8001fd4:	4276      	negs	r6, r6
 8001fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fda:	485a      	ldr	r0, [pc, #360]	; (8002144 <_printf_i+0x23c>)
 8001fdc:	230a      	movs	r3, #10
 8001fde:	e012      	b.n	8002006 <_printf_i+0xfe>
 8001fe0:	682b      	ldr	r3, [r5, #0]
 8001fe2:	6820      	ldr	r0, [r4, #0]
 8001fe4:	1d19      	adds	r1, r3, #4
 8001fe6:	6029      	str	r1, [r5, #0]
 8001fe8:	0605      	lsls	r5, r0, #24
 8001fea:	d501      	bpl.n	8001ff0 <_printf_i+0xe8>
 8001fec:	681e      	ldr	r6, [r3, #0]
 8001fee:	e002      	b.n	8001ff6 <_printf_i+0xee>
 8001ff0:	0641      	lsls	r1, r0, #25
 8001ff2:	d5fb      	bpl.n	8001fec <_printf_i+0xe4>
 8001ff4:	881e      	ldrh	r6, [r3, #0]
 8001ff6:	4853      	ldr	r0, [pc, #332]	; (8002144 <_printf_i+0x23c>)
 8001ff8:	2f6f      	cmp	r7, #111	; 0x6f
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2308      	moveq	r3, #8
 8001ffe:	230a      	movne	r3, #10
 8002000:	2100      	movs	r1, #0
 8002002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002006:	6865      	ldr	r5, [r4, #4]
 8002008:	60a5      	str	r5, [r4, #8]
 800200a:	2d00      	cmp	r5, #0
 800200c:	bfa2      	ittt	ge
 800200e:	6821      	ldrge	r1, [r4, #0]
 8002010:	f021 0104 	bicge.w	r1, r1, #4
 8002014:	6021      	strge	r1, [r4, #0]
 8002016:	b90e      	cbnz	r6, 800201c <_printf_i+0x114>
 8002018:	2d00      	cmp	r5, #0
 800201a:	d04b      	beq.n	80020b4 <_printf_i+0x1ac>
 800201c:	4615      	mov	r5, r2
 800201e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002022:	fb03 6711 	mls	r7, r3, r1, r6
 8002026:	5dc7      	ldrb	r7, [r0, r7]
 8002028:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800202c:	4637      	mov	r7, r6
 800202e:	42bb      	cmp	r3, r7
 8002030:	460e      	mov	r6, r1
 8002032:	d9f4      	bls.n	800201e <_printf_i+0x116>
 8002034:	2b08      	cmp	r3, #8
 8002036:	d10b      	bne.n	8002050 <_printf_i+0x148>
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	07de      	lsls	r6, r3, #31
 800203c:	d508      	bpl.n	8002050 <_printf_i+0x148>
 800203e:	6923      	ldr	r3, [r4, #16]
 8002040:	6861      	ldr	r1, [r4, #4]
 8002042:	4299      	cmp	r1, r3
 8002044:	bfde      	ittt	le
 8002046:	2330      	movle	r3, #48	; 0x30
 8002048:	f805 3c01 	strble.w	r3, [r5, #-1]
 800204c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002050:	1b52      	subs	r2, r2, r5
 8002052:	6122      	str	r2, [r4, #16]
 8002054:	f8cd a000 	str.w	sl, [sp]
 8002058:	464b      	mov	r3, r9
 800205a:	aa03      	add	r2, sp, #12
 800205c:	4621      	mov	r1, r4
 800205e:	4640      	mov	r0, r8
 8002060:	f7ff fee4 	bl	8001e2c <_printf_common>
 8002064:	3001      	adds	r0, #1
 8002066:	d14a      	bne.n	80020fe <_printf_i+0x1f6>
 8002068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800206c:	b004      	add	sp, #16
 800206e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	f043 0320 	orr.w	r3, r3, #32
 8002078:	6023      	str	r3, [r4, #0]
 800207a:	4833      	ldr	r0, [pc, #204]	; (8002148 <_printf_i+0x240>)
 800207c:	2778      	movs	r7, #120	; 0x78
 800207e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	6829      	ldr	r1, [r5, #0]
 8002086:	061f      	lsls	r7, r3, #24
 8002088:	f851 6b04 	ldr.w	r6, [r1], #4
 800208c:	d402      	bmi.n	8002094 <_printf_i+0x18c>
 800208e:	065f      	lsls	r7, r3, #25
 8002090:	bf48      	it	mi
 8002092:	b2b6      	uxthmi	r6, r6
 8002094:	07df      	lsls	r7, r3, #31
 8002096:	bf48      	it	mi
 8002098:	f043 0320 	orrmi.w	r3, r3, #32
 800209c:	6029      	str	r1, [r5, #0]
 800209e:	bf48      	it	mi
 80020a0:	6023      	strmi	r3, [r4, #0]
 80020a2:	b91e      	cbnz	r6, 80020ac <_printf_i+0x1a4>
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	f023 0320 	bic.w	r3, r3, #32
 80020aa:	6023      	str	r3, [r4, #0]
 80020ac:	2310      	movs	r3, #16
 80020ae:	e7a7      	b.n	8002000 <_printf_i+0xf8>
 80020b0:	4824      	ldr	r0, [pc, #144]	; (8002144 <_printf_i+0x23c>)
 80020b2:	e7e4      	b.n	800207e <_printf_i+0x176>
 80020b4:	4615      	mov	r5, r2
 80020b6:	e7bd      	b.n	8002034 <_printf_i+0x12c>
 80020b8:	682b      	ldr	r3, [r5, #0]
 80020ba:	6826      	ldr	r6, [r4, #0]
 80020bc:	6961      	ldr	r1, [r4, #20]
 80020be:	1d18      	adds	r0, r3, #4
 80020c0:	6028      	str	r0, [r5, #0]
 80020c2:	0635      	lsls	r5, r6, #24
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	d501      	bpl.n	80020cc <_printf_i+0x1c4>
 80020c8:	6019      	str	r1, [r3, #0]
 80020ca:	e002      	b.n	80020d2 <_printf_i+0x1ca>
 80020cc:	0670      	lsls	r0, r6, #25
 80020ce:	d5fb      	bpl.n	80020c8 <_printf_i+0x1c0>
 80020d0:	8019      	strh	r1, [r3, #0]
 80020d2:	2300      	movs	r3, #0
 80020d4:	6123      	str	r3, [r4, #16]
 80020d6:	4615      	mov	r5, r2
 80020d8:	e7bc      	b.n	8002054 <_printf_i+0x14c>
 80020da:	682b      	ldr	r3, [r5, #0]
 80020dc:	1d1a      	adds	r2, r3, #4
 80020de:	602a      	str	r2, [r5, #0]
 80020e0:	681d      	ldr	r5, [r3, #0]
 80020e2:	6862      	ldr	r2, [r4, #4]
 80020e4:	2100      	movs	r1, #0
 80020e6:	4628      	mov	r0, r5
 80020e8:	f7fe f872 	bl	80001d0 <memchr>
 80020ec:	b108      	cbz	r0, 80020f2 <_printf_i+0x1ea>
 80020ee:	1b40      	subs	r0, r0, r5
 80020f0:	6060      	str	r0, [r4, #4]
 80020f2:	6863      	ldr	r3, [r4, #4]
 80020f4:	6123      	str	r3, [r4, #16]
 80020f6:	2300      	movs	r3, #0
 80020f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020fc:	e7aa      	b.n	8002054 <_printf_i+0x14c>
 80020fe:	6923      	ldr	r3, [r4, #16]
 8002100:	462a      	mov	r2, r5
 8002102:	4649      	mov	r1, r9
 8002104:	4640      	mov	r0, r8
 8002106:	47d0      	blx	sl
 8002108:	3001      	adds	r0, #1
 800210a:	d0ad      	beq.n	8002068 <_printf_i+0x160>
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	079b      	lsls	r3, r3, #30
 8002110:	d413      	bmi.n	800213a <_printf_i+0x232>
 8002112:	68e0      	ldr	r0, [r4, #12]
 8002114:	9b03      	ldr	r3, [sp, #12]
 8002116:	4298      	cmp	r0, r3
 8002118:	bfb8      	it	lt
 800211a:	4618      	movlt	r0, r3
 800211c:	e7a6      	b.n	800206c <_printf_i+0x164>
 800211e:	2301      	movs	r3, #1
 8002120:	4632      	mov	r2, r6
 8002122:	4649      	mov	r1, r9
 8002124:	4640      	mov	r0, r8
 8002126:	47d0      	blx	sl
 8002128:	3001      	adds	r0, #1
 800212a:	d09d      	beq.n	8002068 <_printf_i+0x160>
 800212c:	3501      	adds	r5, #1
 800212e:	68e3      	ldr	r3, [r4, #12]
 8002130:	9903      	ldr	r1, [sp, #12]
 8002132:	1a5b      	subs	r3, r3, r1
 8002134:	42ab      	cmp	r3, r5
 8002136:	dcf2      	bgt.n	800211e <_printf_i+0x216>
 8002138:	e7eb      	b.n	8002112 <_printf_i+0x20a>
 800213a:	2500      	movs	r5, #0
 800213c:	f104 0619 	add.w	r6, r4, #25
 8002140:	e7f5      	b.n	800212e <_printf_i+0x226>
 8002142:	bf00      	nop
 8002144:	08004a0e 	.word	0x08004a0e
 8002148:	08004a1f 	.word	0x08004a1f

0800214c <siprintf>:
 800214c:	b40e      	push	{r1, r2, r3}
 800214e:	b500      	push	{lr}
 8002150:	b09c      	sub	sp, #112	; 0x70
 8002152:	ab1d      	add	r3, sp, #116	; 0x74
 8002154:	9002      	str	r0, [sp, #8]
 8002156:	9006      	str	r0, [sp, #24]
 8002158:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800215c:	4809      	ldr	r0, [pc, #36]	; (8002184 <siprintf+0x38>)
 800215e:	9107      	str	r1, [sp, #28]
 8002160:	9104      	str	r1, [sp, #16]
 8002162:	4909      	ldr	r1, [pc, #36]	; (8002188 <siprintf+0x3c>)
 8002164:	f853 2b04 	ldr.w	r2, [r3], #4
 8002168:	9105      	str	r1, [sp, #20]
 800216a:	6800      	ldr	r0, [r0, #0]
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	a902      	add	r1, sp, #8
 8002170:	f001 f84a 	bl	8003208 <_svfiprintf_r>
 8002174:	9b02      	ldr	r3, [sp, #8]
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	b01c      	add	sp, #112	; 0x70
 800217c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002180:	b003      	add	sp, #12
 8002182:	4770      	bx	lr
 8002184:	20000060 	.word	0x20000060
 8002188:	ffff0208 	.word	0xffff0208

0800218c <std>:
 800218c:	2300      	movs	r3, #0
 800218e:	b510      	push	{r4, lr}
 8002190:	4604      	mov	r4, r0
 8002192:	e9c0 3300 	strd	r3, r3, [r0]
 8002196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800219a:	6083      	str	r3, [r0, #8]
 800219c:	8181      	strh	r1, [r0, #12]
 800219e:	6643      	str	r3, [r0, #100]	; 0x64
 80021a0:	81c2      	strh	r2, [r0, #14]
 80021a2:	6183      	str	r3, [r0, #24]
 80021a4:	4619      	mov	r1, r3
 80021a6:	2208      	movs	r2, #8
 80021a8:	305c      	adds	r0, #92	; 0x5c
 80021aa:	f000 f91f 	bl	80023ec <memset>
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <std+0x58>)
 80021b0:	6263      	str	r3, [r4, #36]	; 0x24
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <std+0x5c>)
 80021b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <std+0x60>)
 80021b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <std+0x64>)
 80021bc:	6323      	str	r3, [r4, #48]	; 0x30
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <std+0x68>)
 80021c0:	6224      	str	r4, [r4, #32]
 80021c2:	429c      	cmp	r4, r3
 80021c4:	d006      	beq.n	80021d4 <std+0x48>
 80021c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80021ca:	4294      	cmp	r4, r2
 80021cc:	d002      	beq.n	80021d4 <std+0x48>
 80021ce:	33d0      	adds	r3, #208	; 0xd0
 80021d0:	429c      	cmp	r4, r3
 80021d2:	d105      	bne.n	80021e0 <std+0x54>
 80021d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80021d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021dc:	f000 b93c 	b.w	8002458 <__retarget_lock_init_recursive>
 80021e0:	bd10      	pop	{r4, pc}
 80021e2:	bf00      	nop
 80021e4:	08004049 	.word	0x08004049
 80021e8:	0800406b 	.word	0x0800406b
 80021ec:	080040a3 	.word	0x080040a3
 80021f0:	080040c7 	.word	0x080040c7
 80021f4:	20000200 	.word	0x20000200

080021f8 <stdio_exit_handler>:
 80021f8:	4a02      	ldr	r2, [pc, #8]	; (8002204 <stdio_exit_handler+0xc>)
 80021fa:	4903      	ldr	r1, [pc, #12]	; (8002208 <stdio_exit_handler+0x10>)
 80021fc:	4803      	ldr	r0, [pc, #12]	; (800220c <stdio_exit_handler+0x14>)
 80021fe:	f000 b869 	b.w	80022d4 <_fwalk_sglue>
 8002202:	bf00      	nop
 8002204:	20000008 	.word	0x20000008
 8002208:	080038e9 	.word	0x080038e9
 800220c:	20000014 	.word	0x20000014

08002210 <cleanup_stdio>:
 8002210:	6841      	ldr	r1, [r0, #4]
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <cleanup_stdio+0x34>)
 8002214:	4299      	cmp	r1, r3
 8002216:	b510      	push	{r4, lr}
 8002218:	4604      	mov	r4, r0
 800221a:	d001      	beq.n	8002220 <cleanup_stdio+0x10>
 800221c:	f001 fb64 	bl	80038e8 <_fflush_r>
 8002220:	68a1      	ldr	r1, [r4, #8]
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <cleanup_stdio+0x38>)
 8002224:	4299      	cmp	r1, r3
 8002226:	d002      	beq.n	800222e <cleanup_stdio+0x1e>
 8002228:	4620      	mov	r0, r4
 800222a:	f001 fb5d 	bl	80038e8 <_fflush_r>
 800222e:	68e1      	ldr	r1, [r4, #12]
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <cleanup_stdio+0x3c>)
 8002232:	4299      	cmp	r1, r3
 8002234:	d004      	beq.n	8002240 <cleanup_stdio+0x30>
 8002236:	4620      	mov	r0, r4
 8002238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800223c:	f001 bb54 	b.w	80038e8 <_fflush_r>
 8002240:	bd10      	pop	{r4, pc}
 8002242:	bf00      	nop
 8002244:	20000200 	.word	0x20000200
 8002248:	20000268 	.word	0x20000268
 800224c:	200002d0 	.word	0x200002d0

08002250 <global_stdio_init.part.0>:
 8002250:	b510      	push	{r4, lr}
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <global_stdio_init.part.0+0x30>)
 8002254:	4c0b      	ldr	r4, [pc, #44]	; (8002284 <global_stdio_init.part.0+0x34>)
 8002256:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <global_stdio_init.part.0+0x38>)
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	4620      	mov	r0, r4
 800225c:	2200      	movs	r2, #0
 800225e:	2104      	movs	r1, #4
 8002260:	f7ff ff94 	bl	800218c <std>
 8002264:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002268:	2201      	movs	r2, #1
 800226a:	2109      	movs	r1, #9
 800226c:	f7ff ff8e 	bl	800218c <std>
 8002270:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002274:	2202      	movs	r2, #2
 8002276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800227a:	2112      	movs	r1, #18
 800227c:	f7ff bf86 	b.w	800218c <std>
 8002280:	20000338 	.word	0x20000338
 8002284:	20000200 	.word	0x20000200
 8002288:	080021f9 	.word	0x080021f9

0800228c <__sfp_lock_acquire>:
 800228c:	4801      	ldr	r0, [pc, #4]	; (8002294 <__sfp_lock_acquire+0x8>)
 800228e:	f000 b8e4 	b.w	800245a <__retarget_lock_acquire_recursive>
 8002292:	bf00      	nop
 8002294:	2000033d 	.word	0x2000033d

08002298 <__sfp_lock_release>:
 8002298:	4801      	ldr	r0, [pc, #4]	; (80022a0 <__sfp_lock_release+0x8>)
 800229a:	f000 b8df 	b.w	800245c <__retarget_lock_release_recursive>
 800229e:	bf00      	nop
 80022a0:	2000033d 	.word	0x2000033d

080022a4 <__sinit>:
 80022a4:	b510      	push	{r4, lr}
 80022a6:	4604      	mov	r4, r0
 80022a8:	f7ff fff0 	bl	800228c <__sfp_lock_acquire>
 80022ac:	6a23      	ldr	r3, [r4, #32]
 80022ae:	b11b      	cbz	r3, 80022b8 <__sinit+0x14>
 80022b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022b4:	f7ff bff0 	b.w	8002298 <__sfp_lock_release>
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <__sinit+0x28>)
 80022ba:	6223      	str	r3, [r4, #32]
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <__sinit+0x2c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f5      	bne.n	80022b0 <__sinit+0xc>
 80022c4:	f7ff ffc4 	bl	8002250 <global_stdio_init.part.0>
 80022c8:	e7f2      	b.n	80022b0 <__sinit+0xc>
 80022ca:	bf00      	nop
 80022cc:	08002211 	.word	0x08002211
 80022d0:	20000338 	.word	0x20000338

080022d4 <_fwalk_sglue>:
 80022d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022d8:	4607      	mov	r7, r0
 80022da:	4688      	mov	r8, r1
 80022dc:	4614      	mov	r4, r2
 80022de:	2600      	movs	r6, #0
 80022e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80022e4:	f1b9 0901 	subs.w	r9, r9, #1
 80022e8:	d505      	bpl.n	80022f6 <_fwalk_sglue+0x22>
 80022ea:	6824      	ldr	r4, [r4, #0]
 80022ec:	2c00      	cmp	r4, #0
 80022ee:	d1f7      	bne.n	80022e0 <_fwalk_sglue+0xc>
 80022f0:	4630      	mov	r0, r6
 80022f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022f6:	89ab      	ldrh	r3, [r5, #12]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d907      	bls.n	800230c <_fwalk_sglue+0x38>
 80022fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002300:	3301      	adds	r3, #1
 8002302:	d003      	beq.n	800230c <_fwalk_sglue+0x38>
 8002304:	4629      	mov	r1, r5
 8002306:	4638      	mov	r0, r7
 8002308:	47c0      	blx	r8
 800230a:	4306      	orrs	r6, r0
 800230c:	3568      	adds	r5, #104	; 0x68
 800230e:	e7e9      	b.n	80022e4 <_fwalk_sglue+0x10>

08002310 <iprintf>:
 8002310:	b40f      	push	{r0, r1, r2, r3}
 8002312:	b507      	push	{r0, r1, r2, lr}
 8002314:	4906      	ldr	r1, [pc, #24]	; (8002330 <iprintf+0x20>)
 8002316:	ab04      	add	r3, sp, #16
 8002318:	6808      	ldr	r0, [r1, #0]
 800231a:	f853 2b04 	ldr.w	r2, [r3], #4
 800231e:	6881      	ldr	r1, [r0, #8]
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	f001 f899 	bl	8003458 <_vfiprintf_r>
 8002326:	b003      	add	sp, #12
 8002328:	f85d eb04 	ldr.w	lr, [sp], #4
 800232c:	b004      	add	sp, #16
 800232e:	4770      	bx	lr
 8002330:	20000060 	.word	0x20000060

08002334 <_puts_r>:
 8002334:	6a03      	ldr	r3, [r0, #32]
 8002336:	b570      	push	{r4, r5, r6, lr}
 8002338:	6884      	ldr	r4, [r0, #8]
 800233a:	4605      	mov	r5, r0
 800233c:	460e      	mov	r6, r1
 800233e:	b90b      	cbnz	r3, 8002344 <_puts_r+0x10>
 8002340:	f7ff ffb0 	bl	80022a4 <__sinit>
 8002344:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002346:	07db      	lsls	r3, r3, #31
 8002348:	d405      	bmi.n	8002356 <_puts_r+0x22>
 800234a:	89a3      	ldrh	r3, [r4, #12]
 800234c:	0598      	lsls	r0, r3, #22
 800234e:	d402      	bmi.n	8002356 <_puts_r+0x22>
 8002350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002352:	f000 f882 	bl	800245a <__retarget_lock_acquire_recursive>
 8002356:	89a3      	ldrh	r3, [r4, #12]
 8002358:	0719      	lsls	r1, r3, #28
 800235a:	d513      	bpl.n	8002384 <_puts_r+0x50>
 800235c:	6923      	ldr	r3, [r4, #16]
 800235e:	b18b      	cbz	r3, 8002384 <_puts_r+0x50>
 8002360:	3e01      	subs	r6, #1
 8002362:	68a3      	ldr	r3, [r4, #8]
 8002364:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002368:	3b01      	subs	r3, #1
 800236a:	60a3      	str	r3, [r4, #8]
 800236c:	b9e9      	cbnz	r1, 80023aa <_puts_r+0x76>
 800236e:	2b00      	cmp	r3, #0
 8002370:	da2e      	bge.n	80023d0 <_puts_r+0x9c>
 8002372:	4622      	mov	r2, r4
 8002374:	210a      	movs	r1, #10
 8002376:	4628      	mov	r0, r5
 8002378:	f001 fed8 	bl	800412c <__swbuf_r>
 800237c:	3001      	adds	r0, #1
 800237e:	d007      	beq.n	8002390 <_puts_r+0x5c>
 8002380:	250a      	movs	r5, #10
 8002382:	e007      	b.n	8002394 <_puts_r+0x60>
 8002384:	4621      	mov	r1, r4
 8002386:	4628      	mov	r0, r5
 8002388:	f001 ff0e 	bl	80041a8 <__swsetup_r>
 800238c:	2800      	cmp	r0, #0
 800238e:	d0e7      	beq.n	8002360 <_puts_r+0x2c>
 8002390:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002394:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002396:	07da      	lsls	r2, r3, #31
 8002398:	d405      	bmi.n	80023a6 <_puts_r+0x72>
 800239a:	89a3      	ldrh	r3, [r4, #12]
 800239c:	059b      	lsls	r3, r3, #22
 800239e:	d402      	bmi.n	80023a6 <_puts_r+0x72>
 80023a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023a2:	f000 f85b 	bl	800245c <__retarget_lock_release_recursive>
 80023a6:	4628      	mov	r0, r5
 80023a8:	bd70      	pop	{r4, r5, r6, pc}
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	da04      	bge.n	80023b8 <_puts_r+0x84>
 80023ae:	69a2      	ldr	r2, [r4, #24]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dc06      	bgt.n	80023c2 <_puts_r+0x8e>
 80023b4:	290a      	cmp	r1, #10
 80023b6:	d004      	beq.n	80023c2 <_puts_r+0x8e>
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	6022      	str	r2, [r4, #0]
 80023be:	7019      	strb	r1, [r3, #0]
 80023c0:	e7cf      	b.n	8002362 <_puts_r+0x2e>
 80023c2:	4622      	mov	r2, r4
 80023c4:	4628      	mov	r0, r5
 80023c6:	f001 feb1 	bl	800412c <__swbuf_r>
 80023ca:	3001      	adds	r0, #1
 80023cc:	d1c9      	bne.n	8002362 <_puts_r+0x2e>
 80023ce:	e7df      	b.n	8002390 <_puts_r+0x5c>
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	250a      	movs	r5, #10
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	6022      	str	r2, [r4, #0]
 80023d8:	701d      	strb	r5, [r3, #0]
 80023da:	e7db      	b.n	8002394 <_puts_r+0x60>

080023dc <puts>:
 80023dc:	4b02      	ldr	r3, [pc, #8]	; (80023e8 <puts+0xc>)
 80023de:	4601      	mov	r1, r0
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	f7ff bfa7 	b.w	8002334 <_puts_r>
 80023e6:	bf00      	nop
 80023e8:	20000060 	.word	0x20000060

080023ec <memset>:
 80023ec:	4402      	add	r2, r0
 80023ee:	4603      	mov	r3, r0
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d100      	bne.n	80023f6 <memset+0xa>
 80023f4:	4770      	bx	lr
 80023f6:	f803 1b01 	strb.w	r1, [r3], #1
 80023fa:	e7f9      	b.n	80023f0 <memset+0x4>

080023fc <_localeconv_r>:
 80023fc:	4800      	ldr	r0, [pc, #0]	; (8002400 <_localeconv_r+0x4>)
 80023fe:	4770      	bx	lr
 8002400:	20000154 	.word	0x20000154

08002404 <__errno>:
 8002404:	4b01      	ldr	r3, [pc, #4]	; (800240c <__errno+0x8>)
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000060 	.word	0x20000060

08002410 <__libc_init_array>:
 8002410:	b570      	push	{r4, r5, r6, lr}
 8002412:	4d0d      	ldr	r5, [pc, #52]	; (8002448 <__libc_init_array+0x38>)
 8002414:	4c0d      	ldr	r4, [pc, #52]	; (800244c <__libc_init_array+0x3c>)
 8002416:	1b64      	subs	r4, r4, r5
 8002418:	10a4      	asrs	r4, r4, #2
 800241a:	2600      	movs	r6, #0
 800241c:	42a6      	cmp	r6, r4
 800241e:	d109      	bne.n	8002434 <__libc_init_array+0x24>
 8002420:	4d0b      	ldr	r5, [pc, #44]	; (8002450 <__libc_init_array+0x40>)
 8002422:	4c0c      	ldr	r4, [pc, #48]	; (8002454 <__libc_init_array+0x44>)
 8002424:	f002 f91e 	bl	8004664 <_init>
 8002428:	1b64      	subs	r4, r4, r5
 800242a:	10a4      	asrs	r4, r4, #2
 800242c:	2600      	movs	r6, #0
 800242e:	42a6      	cmp	r6, r4
 8002430:	d105      	bne.n	800243e <__libc_init_array+0x2e>
 8002432:	bd70      	pop	{r4, r5, r6, pc}
 8002434:	f855 3b04 	ldr.w	r3, [r5], #4
 8002438:	4798      	blx	r3
 800243a:	3601      	adds	r6, #1
 800243c:	e7ee      	b.n	800241c <__libc_init_array+0xc>
 800243e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002442:	4798      	blx	r3
 8002444:	3601      	adds	r6, #1
 8002446:	e7f2      	b.n	800242e <__libc_init_array+0x1e>
 8002448:	08004d6c 	.word	0x08004d6c
 800244c:	08004d6c 	.word	0x08004d6c
 8002450:	08004d6c 	.word	0x08004d6c
 8002454:	08004d70 	.word	0x08004d70

08002458 <__retarget_lock_init_recursive>:
 8002458:	4770      	bx	lr

0800245a <__retarget_lock_acquire_recursive>:
 800245a:	4770      	bx	lr

0800245c <__retarget_lock_release_recursive>:
 800245c:	4770      	bx	lr

0800245e <quorem>:
 800245e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002462:	6903      	ldr	r3, [r0, #16]
 8002464:	690c      	ldr	r4, [r1, #16]
 8002466:	42a3      	cmp	r3, r4
 8002468:	4607      	mov	r7, r0
 800246a:	db7e      	blt.n	800256a <quorem+0x10c>
 800246c:	3c01      	subs	r4, #1
 800246e:	f101 0814 	add.w	r8, r1, #20
 8002472:	f100 0514 	add.w	r5, r0, #20
 8002476:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002480:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002484:	3301      	adds	r3, #1
 8002486:	429a      	cmp	r2, r3
 8002488:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800248c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002490:	fbb2 f6f3 	udiv	r6, r2, r3
 8002494:	d331      	bcc.n	80024fa <quorem+0x9c>
 8002496:	f04f 0e00 	mov.w	lr, #0
 800249a:	4640      	mov	r0, r8
 800249c:	46ac      	mov	ip, r5
 800249e:	46f2      	mov	sl, lr
 80024a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80024a4:	b293      	uxth	r3, r2
 80024a6:	fb06 e303 	mla	r3, r6, r3, lr
 80024aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80024ae:	0c1a      	lsrs	r2, r3, #16
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	ebaa 0303 	sub.w	r3, sl, r3
 80024b6:	f8dc a000 	ldr.w	sl, [ip]
 80024ba:	fa13 f38a 	uxtah	r3, r3, sl
 80024be:	fb06 220e 	mla	r2, r6, lr, r2
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	9b00      	ldr	r3, [sp, #0]
 80024c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80024ca:	b292      	uxth	r2, r2
 80024cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80024d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80024d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80024d8:	4581      	cmp	r9, r0
 80024da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80024de:	f84c 3b04 	str.w	r3, [ip], #4
 80024e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80024e6:	d2db      	bcs.n	80024a0 <quorem+0x42>
 80024e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80024ec:	b92b      	cbnz	r3, 80024fa <quorem+0x9c>
 80024ee:	9b01      	ldr	r3, [sp, #4]
 80024f0:	3b04      	subs	r3, #4
 80024f2:	429d      	cmp	r5, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	d32c      	bcc.n	8002552 <quorem+0xf4>
 80024f8:	613c      	str	r4, [r7, #16]
 80024fa:	4638      	mov	r0, r7
 80024fc:	f001 fca4 	bl	8003e48 <__mcmp>
 8002500:	2800      	cmp	r0, #0
 8002502:	db22      	blt.n	800254a <quorem+0xec>
 8002504:	3601      	adds	r6, #1
 8002506:	4629      	mov	r1, r5
 8002508:	2000      	movs	r0, #0
 800250a:	f858 2b04 	ldr.w	r2, [r8], #4
 800250e:	f8d1 c000 	ldr.w	ip, [r1]
 8002512:	b293      	uxth	r3, r2
 8002514:	1ac3      	subs	r3, r0, r3
 8002516:	0c12      	lsrs	r2, r2, #16
 8002518:	fa13 f38c 	uxtah	r3, r3, ip
 800251c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8002520:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002524:	b29b      	uxth	r3, r3
 8002526:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800252a:	45c1      	cmp	r9, r8
 800252c:	f841 3b04 	str.w	r3, [r1], #4
 8002530:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002534:	d2e9      	bcs.n	800250a <quorem+0xac>
 8002536:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800253a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800253e:	b922      	cbnz	r2, 800254a <quorem+0xec>
 8002540:	3b04      	subs	r3, #4
 8002542:	429d      	cmp	r5, r3
 8002544:	461a      	mov	r2, r3
 8002546:	d30a      	bcc.n	800255e <quorem+0x100>
 8002548:	613c      	str	r4, [r7, #16]
 800254a:	4630      	mov	r0, r6
 800254c:	b003      	add	sp, #12
 800254e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	3b04      	subs	r3, #4
 8002556:	2a00      	cmp	r2, #0
 8002558:	d1ce      	bne.n	80024f8 <quorem+0x9a>
 800255a:	3c01      	subs	r4, #1
 800255c:	e7c9      	b.n	80024f2 <quorem+0x94>
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	3b04      	subs	r3, #4
 8002562:	2a00      	cmp	r2, #0
 8002564:	d1f0      	bne.n	8002548 <quorem+0xea>
 8002566:	3c01      	subs	r4, #1
 8002568:	e7eb      	b.n	8002542 <quorem+0xe4>
 800256a:	2000      	movs	r0, #0
 800256c:	e7ee      	b.n	800254c <quorem+0xee>
	...

08002570 <_dtoa_r>:
 8002570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002574:	ed2d 8b04 	vpush	{d8-d9}
 8002578:	69c5      	ldr	r5, [r0, #28]
 800257a:	b093      	sub	sp, #76	; 0x4c
 800257c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002580:	ec57 6b10 	vmov	r6, r7, d0
 8002584:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002588:	9107      	str	r1, [sp, #28]
 800258a:	4604      	mov	r4, r0
 800258c:	920a      	str	r2, [sp, #40]	; 0x28
 800258e:	930d      	str	r3, [sp, #52]	; 0x34
 8002590:	b975      	cbnz	r5, 80025b0 <_dtoa_r+0x40>
 8002592:	2010      	movs	r0, #16
 8002594:	f001 f87a 	bl	800368c <malloc>
 8002598:	4602      	mov	r2, r0
 800259a:	61e0      	str	r0, [r4, #28]
 800259c:	b920      	cbnz	r0, 80025a8 <_dtoa_r+0x38>
 800259e:	4bae      	ldr	r3, [pc, #696]	; (8002858 <_dtoa_r+0x2e8>)
 80025a0:	21ef      	movs	r1, #239	; 0xef
 80025a2:	48ae      	ldr	r0, [pc, #696]	; (800285c <_dtoa_r+0x2ec>)
 80025a4:	f001 ff5a 	bl	800445c <__assert_func>
 80025a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80025ac:	6005      	str	r5, [r0, #0]
 80025ae:	60c5      	str	r5, [r0, #12]
 80025b0:	69e3      	ldr	r3, [r4, #28]
 80025b2:	6819      	ldr	r1, [r3, #0]
 80025b4:	b151      	cbz	r1, 80025cc <_dtoa_r+0x5c>
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	604a      	str	r2, [r1, #4]
 80025ba:	2301      	movs	r3, #1
 80025bc:	4093      	lsls	r3, r2
 80025be:	608b      	str	r3, [r1, #8]
 80025c0:	4620      	mov	r0, r4
 80025c2:	f001 fa05 	bl	80039d0 <_Bfree>
 80025c6:	69e3      	ldr	r3, [r4, #28]
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	1e3b      	subs	r3, r7, #0
 80025ce:	bfbb      	ittet	lt
 80025d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80025d4:	9303      	strlt	r3, [sp, #12]
 80025d6:	2300      	movge	r3, #0
 80025d8:	2201      	movlt	r2, #1
 80025da:	bfac      	ite	ge
 80025dc:	f8c8 3000 	strge.w	r3, [r8]
 80025e0:	f8c8 2000 	strlt.w	r2, [r8]
 80025e4:	4b9e      	ldr	r3, [pc, #632]	; (8002860 <_dtoa_r+0x2f0>)
 80025e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80025ea:	ea33 0308 	bics.w	r3, r3, r8
 80025ee:	d11b      	bne.n	8002628 <_dtoa_r+0xb8>
 80025f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80025f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80025fc:	4333      	orrs	r3, r6
 80025fe:	f000 8593 	beq.w	8003128 <_dtoa_r+0xbb8>
 8002602:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002604:	b963      	cbnz	r3, 8002620 <_dtoa_r+0xb0>
 8002606:	4b97      	ldr	r3, [pc, #604]	; (8002864 <_dtoa_r+0x2f4>)
 8002608:	e027      	b.n	800265a <_dtoa_r+0xea>
 800260a:	4b97      	ldr	r3, [pc, #604]	; (8002868 <_dtoa_r+0x2f8>)
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	3308      	adds	r3, #8
 8002610:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	9800      	ldr	r0, [sp, #0]
 8002616:	b013      	add	sp, #76	; 0x4c
 8002618:	ecbd 8b04 	vpop	{d8-d9}
 800261c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002620:	4b90      	ldr	r3, [pc, #576]	; (8002864 <_dtoa_r+0x2f4>)
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	3303      	adds	r3, #3
 8002626:	e7f3      	b.n	8002610 <_dtoa_r+0xa0>
 8002628:	ed9d 7b02 	vldr	d7, [sp, #8]
 800262c:	2200      	movs	r2, #0
 800262e:	ec51 0b17 	vmov	r0, r1, d7
 8002632:	eeb0 8a47 	vmov.f32	s16, s14
 8002636:	eef0 8a67 	vmov.f32	s17, s15
 800263a:	2300      	movs	r3, #0
 800263c:	f7fe fa44 	bl	8000ac8 <__aeabi_dcmpeq>
 8002640:	4681      	mov	r9, r0
 8002642:	b160      	cbz	r0, 800265e <_dtoa_r+0xee>
 8002644:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002646:	2301      	movs	r3, #1
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8568 	beq.w	8003122 <_dtoa_r+0xbb2>
 8002652:	4b86      	ldr	r3, [pc, #536]	; (800286c <_dtoa_r+0x2fc>)
 8002654:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	3b01      	subs	r3, #1
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	e7da      	b.n	8002614 <_dtoa_r+0xa4>
 800265e:	aa10      	add	r2, sp, #64	; 0x40
 8002660:	a911      	add	r1, sp, #68	; 0x44
 8002662:	4620      	mov	r0, r4
 8002664:	eeb0 0a48 	vmov.f32	s0, s16
 8002668:	eef0 0a68 	vmov.f32	s1, s17
 800266c:	f001 fc92 	bl	8003f94 <__d2b>
 8002670:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8002674:	4682      	mov	sl, r0
 8002676:	2d00      	cmp	r5, #0
 8002678:	d07f      	beq.n	800277a <_dtoa_r+0x20a>
 800267a:	ee18 3a90 	vmov	r3, s17
 800267e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002682:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8002686:	ec51 0b18 	vmov	r0, r1, d8
 800268a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800268e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002692:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8002696:	4619      	mov	r1, r3
 8002698:	2200      	movs	r2, #0
 800269a:	4b75      	ldr	r3, [pc, #468]	; (8002870 <_dtoa_r+0x300>)
 800269c:	f7fd fdf4 	bl	8000288 <__aeabi_dsub>
 80026a0:	a367      	add	r3, pc, #412	; (adr r3, 8002840 <_dtoa_r+0x2d0>)
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	f7fd ffa7 	bl	80005f8 <__aeabi_dmul>
 80026aa:	a367      	add	r3, pc, #412	; (adr r3, 8002848 <_dtoa_r+0x2d8>)
 80026ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b0:	f7fd fdec 	bl	800028c <__adddf3>
 80026b4:	4606      	mov	r6, r0
 80026b6:	4628      	mov	r0, r5
 80026b8:	460f      	mov	r7, r1
 80026ba:	f7fd ff33 	bl	8000524 <__aeabi_i2d>
 80026be:	a364      	add	r3, pc, #400	; (adr r3, 8002850 <_dtoa_r+0x2e0>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f7fd ff98 	bl	80005f8 <__aeabi_dmul>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4630      	mov	r0, r6
 80026ce:	4639      	mov	r1, r7
 80026d0:	f7fd fddc 	bl	800028c <__adddf3>
 80026d4:	4606      	mov	r6, r0
 80026d6:	460f      	mov	r7, r1
 80026d8:	f7fe fa3e 	bl	8000b58 <__aeabi_d2iz>
 80026dc:	2200      	movs	r2, #0
 80026de:	4683      	mov	fp, r0
 80026e0:	2300      	movs	r3, #0
 80026e2:	4630      	mov	r0, r6
 80026e4:	4639      	mov	r1, r7
 80026e6:	f7fe f9f9 	bl	8000adc <__aeabi_dcmplt>
 80026ea:	b148      	cbz	r0, 8002700 <_dtoa_r+0x190>
 80026ec:	4658      	mov	r0, fp
 80026ee:	f7fd ff19 	bl	8000524 <__aeabi_i2d>
 80026f2:	4632      	mov	r2, r6
 80026f4:	463b      	mov	r3, r7
 80026f6:	f7fe f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80026fa:	b908      	cbnz	r0, 8002700 <_dtoa_r+0x190>
 80026fc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002700:	f1bb 0f16 	cmp.w	fp, #22
 8002704:	d857      	bhi.n	80027b6 <_dtoa_r+0x246>
 8002706:	4b5b      	ldr	r3, [pc, #364]	; (8002874 <_dtoa_r+0x304>)
 8002708:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	ec51 0b18 	vmov	r0, r1, d8
 8002714:	f7fe f9e2 	bl	8000adc <__aeabi_dcmplt>
 8002718:	2800      	cmp	r0, #0
 800271a:	d04e      	beq.n	80027ba <_dtoa_r+0x24a>
 800271c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002720:	2300      	movs	r3, #0
 8002722:	930c      	str	r3, [sp, #48]	; 0x30
 8002724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002726:	1b5b      	subs	r3, r3, r5
 8002728:	1e5a      	subs	r2, r3, #1
 800272a:	bf45      	ittet	mi
 800272c:	f1c3 0301 	rsbmi	r3, r3, #1
 8002730:	9305      	strmi	r3, [sp, #20]
 8002732:	2300      	movpl	r3, #0
 8002734:	2300      	movmi	r3, #0
 8002736:	9206      	str	r2, [sp, #24]
 8002738:	bf54      	ite	pl
 800273a:	9305      	strpl	r3, [sp, #20]
 800273c:	9306      	strmi	r3, [sp, #24]
 800273e:	f1bb 0f00 	cmp.w	fp, #0
 8002742:	db3c      	blt.n	80027be <_dtoa_r+0x24e>
 8002744:	9b06      	ldr	r3, [sp, #24]
 8002746:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800274a:	445b      	add	r3, fp
 800274c:	9306      	str	r3, [sp, #24]
 800274e:	2300      	movs	r3, #0
 8002750:	9308      	str	r3, [sp, #32]
 8002752:	9b07      	ldr	r3, [sp, #28]
 8002754:	2b09      	cmp	r3, #9
 8002756:	d868      	bhi.n	800282a <_dtoa_r+0x2ba>
 8002758:	2b05      	cmp	r3, #5
 800275a:	bfc4      	itt	gt
 800275c:	3b04      	subgt	r3, #4
 800275e:	9307      	strgt	r3, [sp, #28]
 8002760:	9b07      	ldr	r3, [sp, #28]
 8002762:	f1a3 0302 	sub.w	r3, r3, #2
 8002766:	bfcc      	ite	gt
 8002768:	2500      	movgt	r5, #0
 800276a:	2501      	movle	r5, #1
 800276c:	2b03      	cmp	r3, #3
 800276e:	f200 8085 	bhi.w	800287c <_dtoa_r+0x30c>
 8002772:	e8df f003 	tbb	[pc, r3]
 8002776:	3b2e      	.short	0x3b2e
 8002778:	5839      	.short	0x5839
 800277a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800277e:	441d      	add	r5, r3
 8002780:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002784:	2b20      	cmp	r3, #32
 8002786:	bfc1      	itttt	gt
 8002788:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800278c:	fa08 f803 	lslgt.w	r8, r8, r3
 8002790:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8002794:	fa26 f303 	lsrgt.w	r3, r6, r3
 8002798:	bfd6      	itet	le
 800279a:	f1c3 0320 	rsble	r3, r3, #32
 800279e:	ea48 0003 	orrgt.w	r0, r8, r3
 80027a2:	fa06 f003 	lslle.w	r0, r6, r3
 80027a6:	f7fd fead 	bl	8000504 <__aeabi_ui2d>
 80027aa:	2201      	movs	r2, #1
 80027ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80027b0:	3d01      	subs	r5, #1
 80027b2:	920e      	str	r2, [sp, #56]	; 0x38
 80027b4:	e76f      	b.n	8002696 <_dtoa_r+0x126>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e7b3      	b.n	8002722 <_dtoa_r+0x1b2>
 80027ba:	900c      	str	r0, [sp, #48]	; 0x30
 80027bc:	e7b2      	b.n	8002724 <_dtoa_r+0x1b4>
 80027be:	9b05      	ldr	r3, [sp, #20]
 80027c0:	eba3 030b 	sub.w	r3, r3, fp
 80027c4:	9305      	str	r3, [sp, #20]
 80027c6:	f1cb 0300 	rsb	r3, fp, #0
 80027ca:	9308      	str	r3, [sp, #32]
 80027cc:	2300      	movs	r3, #0
 80027ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80027d0:	e7bf      	b.n	8002752 <_dtoa_r+0x1e2>
 80027d2:	2300      	movs	r3, #0
 80027d4:	9309      	str	r3, [sp, #36]	; 0x24
 80027d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027d8:	2b00      	cmp	r3, #0
 80027da:	dc52      	bgt.n	8002882 <_dtoa_r+0x312>
 80027dc:	2301      	movs	r3, #1
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	9304      	str	r3, [sp, #16]
 80027e2:	461a      	mov	r2, r3
 80027e4:	920a      	str	r2, [sp, #40]	; 0x28
 80027e6:	e00b      	b.n	8002800 <_dtoa_r+0x290>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e7f3      	b.n	80027d4 <_dtoa_r+0x264>
 80027ec:	2300      	movs	r3, #0
 80027ee:	9309      	str	r3, [sp, #36]	; 0x24
 80027f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027f2:	445b      	add	r3, fp
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	3301      	adds	r3, #1
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	9304      	str	r3, [sp, #16]
 80027fc:	bfb8      	it	lt
 80027fe:	2301      	movlt	r3, #1
 8002800:	69e0      	ldr	r0, [r4, #28]
 8002802:	2100      	movs	r1, #0
 8002804:	2204      	movs	r2, #4
 8002806:	f102 0614 	add.w	r6, r2, #20
 800280a:	429e      	cmp	r6, r3
 800280c:	d93d      	bls.n	800288a <_dtoa_r+0x31a>
 800280e:	6041      	str	r1, [r0, #4]
 8002810:	4620      	mov	r0, r4
 8002812:	f001 f89d 	bl	8003950 <_Balloc>
 8002816:	9000      	str	r0, [sp, #0]
 8002818:	2800      	cmp	r0, #0
 800281a:	d139      	bne.n	8002890 <_dtoa_r+0x320>
 800281c:	4b16      	ldr	r3, [pc, #88]	; (8002878 <_dtoa_r+0x308>)
 800281e:	4602      	mov	r2, r0
 8002820:	f240 11af 	movw	r1, #431	; 0x1af
 8002824:	e6bd      	b.n	80025a2 <_dtoa_r+0x32>
 8002826:	2301      	movs	r3, #1
 8002828:	e7e1      	b.n	80027ee <_dtoa_r+0x27e>
 800282a:	2501      	movs	r5, #1
 800282c:	2300      	movs	r3, #0
 800282e:	9307      	str	r3, [sp, #28]
 8002830:	9509      	str	r5, [sp, #36]	; 0x24
 8002832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	9304      	str	r3, [sp, #16]
 800283a:	2200      	movs	r2, #0
 800283c:	2312      	movs	r3, #18
 800283e:	e7d1      	b.n	80027e4 <_dtoa_r+0x274>
 8002840:	636f4361 	.word	0x636f4361
 8002844:	3fd287a7 	.word	0x3fd287a7
 8002848:	8b60c8b3 	.word	0x8b60c8b3
 800284c:	3fc68a28 	.word	0x3fc68a28
 8002850:	509f79fb 	.word	0x509f79fb
 8002854:	3fd34413 	.word	0x3fd34413
 8002858:	08004a3d 	.word	0x08004a3d
 800285c:	08004a54 	.word	0x08004a54
 8002860:	7ff00000 	.word	0x7ff00000
 8002864:	08004a39 	.word	0x08004a39
 8002868:	08004a30 	.word	0x08004a30
 800286c:	08004a0d 	.word	0x08004a0d
 8002870:	3ff80000 	.word	0x3ff80000
 8002874:	08004b50 	.word	0x08004b50
 8002878:	08004aac 	.word	0x08004aac
 800287c:	2301      	movs	r3, #1
 800287e:	9309      	str	r3, [sp, #36]	; 0x24
 8002880:	e7d7      	b.n	8002832 <_dtoa_r+0x2c2>
 8002882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	9304      	str	r3, [sp, #16]
 8002888:	e7ba      	b.n	8002800 <_dtoa_r+0x290>
 800288a:	3101      	adds	r1, #1
 800288c:	0052      	lsls	r2, r2, #1
 800288e:	e7ba      	b.n	8002806 <_dtoa_r+0x296>
 8002890:	69e3      	ldr	r3, [r4, #28]
 8002892:	9a00      	ldr	r2, [sp, #0]
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	9b04      	ldr	r3, [sp, #16]
 8002898:	2b0e      	cmp	r3, #14
 800289a:	f200 80a8 	bhi.w	80029ee <_dtoa_r+0x47e>
 800289e:	2d00      	cmp	r5, #0
 80028a0:	f000 80a5 	beq.w	80029ee <_dtoa_r+0x47e>
 80028a4:	f1bb 0f00 	cmp.w	fp, #0
 80028a8:	dd38      	ble.n	800291c <_dtoa_r+0x3ac>
 80028aa:	4bc0      	ldr	r3, [pc, #768]	; (8002bac <_dtoa_r+0x63c>)
 80028ac:	f00b 020f 	and.w	r2, fp, #15
 80028b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80028b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80028b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80028bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80028c0:	d019      	beq.n	80028f6 <_dtoa_r+0x386>
 80028c2:	4bbb      	ldr	r3, [pc, #748]	; (8002bb0 <_dtoa_r+0x640>)
 80028c4:	ec51 0b18 	vmov	r0, r1, d8
 80028c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80028cc:	f7fd ffbe 	bl	800084c <__aeabi_ddiv>
 80028d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028d4:	f008 080f 	and.w	r8, r8, #15
 80028d8:	2503      	movs	r5, #3
 80028da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8002bb0 <_dtoa_r+0x640>
 80028de:	f1b8 0f00 	cmp.w	r8, #0
 80028e2:	d10a      	bne.n	80028fa <_dtoa_r+0x38a>
 80028e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80028e8:	4632      	mov	r2, r6
 80028ea:	463b      	mov	r3, r7
 80028ec:	f7fd ffae 	bl	800084c <__aeabi_ddiv>
 80028f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028f4:	e02b      	b.n	800294e <_dtoa_r+0x3de>
 80028f6:	2502      	movs	r5, #2
 80028f8:	e7ef      	b.n	80028da <_dtoa_r+0x36a>
 80028fa:	f018 0f01 	tst.w	r8, #1
 80028fe:	d008      	beq.n	8002912 <_dtoa_r+0x3a2>
 8002900:	4630      	mov	r0, r6
 8002902:	4639      	mov	r1, r7
 8002904:	e9d9 2300 	ldrd	r2, r3, [r9]
 8002908:	f7fd fe76 	bl	80005f8 <__aeabi_dmul>
 800290c:	3501      	adds	r5, #1
 800290e:	4606      	mov	r6, r0
 8002910:	460f      	mov	r7, r1
 8002912:	ea4f 0868 	mov.w	r8, r8, asr #1
 8002916:	f109 0908 	add.w	r9, r9, #8
 800291a:	e7e0      	b.n	80028de <_dtoa_r+0x36e>
 800291c:	f000 809f 	beq.w	8002a5e <_dtoa_r+0x4ee>
 8002920:	f1cb 0600 	rsb	r6, fp, #0
 8002924:	4ba1      	ldr	r3, [pc, #644]	; (8002bac <_dtoa_r+0x63c>)
 8002926:	4fa2      	ldr	r7, [pc, #648]	; (8002bb0 <_dtoa_r+0x640>)
 8002928:	f006 020f 	and.w	r2, r6, #15
 800292c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	ec51 0b18 	vmov	r0, r1, d8
 8002938:	f7fd fe5e 	bl	80005f8 <__aeabi_dmul>
 800293c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002940:	1136      	asrs	r6, r6, #4
 8002942:	2300      	movs	r3, #0
 8002944:	2502      	movs	r5, #2
 8002946:	2e00      	cmp	r6, #0
 8002948:	d17e      	bne.n	8002a48 <_dtoa_r+0x4d8>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1d0      	bne.n	80028f0 <_dtoa_r+0x380>
 800294e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002950:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8084 	beq.w	8002a62 <_dtoa_r+0x4f2>
 800295a:	4b96      	ldr	r3, [pc, #600]	; (8002bb4 <_dtoa_r+0x644>)
 800295c:	2200      	movs	r2, #0
 800295e:	4640      	mov	r0, r8
 8002960:	4649      	mov	r1, r9
 8002962:	f7fe f8bb 	bl	8000adc <__aeabi_dcmplt>
 8002966:	2800      	cmp	r0, #0
 8002968:	d07b      	beq.n	8002a62 <_dtoa_r+0x4f2>
 800296a:	9b04      	ldr	r3, [sp, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d078      	beq.n	8002a62 <_dtoa_r+0x4f2>
 8002970:	9b01      	ldr	r3, [sp, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	dd39      	ble.n	80029ea <_dtoa_r+0x47a>
 8002976:	4b90      	ldr	r3, [pc, #576]	; (8002bb8 <_dtoa_r+0x648>)
 8002978:	2200      	movs	r2, #0
 800297a:	4640      	mov	r0, r8
 800297c:	4649      	mov	r1, r9
 800297e:	f7fd fe3b 	bl	80005f8 <__aeabi_dmul>
 8002982:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002986:	9e01      	ldr	r6, [sp, #4]
 8002988:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800298c:	3501      	adds	r5, #1
 800298e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8002992:	4628      	mov	r0, r5
 8002994:	f7fd fdc6 	bl	8000524 <__aeabi_i2d>
 8002998:	4642      	mov	r2, r8
 800299a:	464b      	mov	r3, r9
 800299c:	f7fd fe2c 	bl	80005f8 <__aeabi_dmul>
 80029a0:	4b86      	ldr	r3, [pc, #536]	; (8002bbc <_dtoa_r+0x64c>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	f7fd fc72 	bl	800028c <__adddf3>
 80029a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80029ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029b0:	9303      	str	r3, [sp, #12]
 80029b2:	2e00      	cmp	r6, #0
 80029b4:	d158      	bne.n	8002a68 <_dtoa_r+0x4f8>
 80029b6:	4b82      	ldr	r3, [pc, #520]	; (8002bc0 <_dtoa_r+0x650>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	4640      	mov	r0, r8
 80029bc:	4649      	mov	r1, r9
 80029be:	f7fd fc63 	bl	8000288 <__aeabi_dsub>
 80029c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80029c6:	4680      	mov	r8, r0
 80029c8:	4689      	mov	r9, r1
 80029ca:	f7fe f8a5 	bl	8000b18 <__aeabi_dcmpgt>
 80029ce:	2800      	cmp	r0, #0
 80029d0:	f040 8296 	bne.w	8002f00 <_dtoa_r+0x990>
 80029d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80029d8:	4640      	mov	r0, r8
 80029da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80029de:	4649      	mov	r1, r9
 80029e0:	f7fe f87c 	bl	8000adc <__aeabi_dcmplt>
 80029e4:	2800      	cmp	r0, #0
 80029e6:	f040 8289 	bne.w	8002efc <_dtoa_r+0x98c>
 80029ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80029ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f2c0 814e 	blt.w	8002c92 <_dtoa_r+0x722>
 80029f6:	f1bb 0f0e 	cmp.w	fp, #14
 80029fa:	f300 814a 	bgt.w	8002c92 <_dtoa_r+0x722>
 80029fe:	4b6b      	ldr	r3, [pc, #428]	; (8002bac <_dtoa_r+0x63c>)
 8002a00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002a04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f280 80dc 	bge.w	8002bc8 <_dtoa_r+0x658>
 8002a10:	9b04      	ldr	r3, [sp, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f300 80d8 	bgt.w	8002bc8 <_dtoa_r+0x658>
 8002a18:	f040 826f 	bne.w	8002efa <_dtoa_r+0x98a>
 8002a1c:	4b68      	ldr	r3, [pc, #416]	; (8002bc0 <_dtoa_r+0x650>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	4640      	mov	r0, r8
 8002a22:	4649      	mov	r1, r9
 8002a24:	f7fd fde8 	bl	80005f8 <__aeabi_dmul>
 8002a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002a2c:	f7fe f86a 	bl	8000b04 <__aeabi_dcmpge>
 8002a30:	9e04      	ldr	r6, [sp, #16]
 8002a32:	4637      	mov	r7, r6
 8002a34:	2800      	cmp	r0, #0
 8002a36:	f040 8245 	bne.w	8002ec4 <_dtoa_r+0x954>
 8002a3a:	9d00      	ldr	r5, [sp, #0]
 8002a3c:	2331      	movs	r3, #49	; 0x31
 8002a3e:	f805 3b01 	strb.w	r3, [r5], #1
 8002a42:	f10b 0b01 	add.w	fp, fp, #1
 8002a46:	e241      	b.n	8002ecc <_dtoa_r+0x95c>
 8002a48:	07f2      	lsls	r2, r6, #31
 8002a4a:	d505      	bpl.n	8002a58 <_dtoa_r+0x4e8>
 8002a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a50:	f7fd fdd2 	bl	80005f8 <__aeabi_dmul>
 8002a54:	3501      	adds	r5, #1
 8002a56:	2301      	movs	r3, #1
 8002a58:	1076      	asrs	r6, r6, #1
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	e773      	b.n	8002946 <_dtoa_r+0x3d6>
 8002a5e:	2502      	movs	r5, #2
 8002a60:	e775      	b.n	800294e <_dtoa_r+0x3de>
 8002a62:	9e04      	ldr	r6, [sp, #16]
 8002a64:	465f      	mov	r7, fp
 8002a66:	e792      	b.n	800298e <_dtoa_r+0x41e>
 8002a68:	9900      	ldr	r1, [sp, #0]
 8002a6a:	4b50      	ldr	r3, [pc, #320]	; (8002bac <_dtoa_r+0x63c>)
 8002a6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002a70:	4431      	add	r1, r6
 8002a72:	9102      	str	r1, [sp, #8]
 8002a74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002a76:	eeb0 9a47 	vmov.f32	s18, s14
 8002a7a:	eef0 9a67 	vmov.f32	s19, s15
 8002a7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002a82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002a86:	2900      	cmp	r1, #0
 8002a88:	d044      	beq.n	8002b14 <_dtoa_r+0x5a4>
 8002a8a:	494e      	ldr	r1, [pc, #312]	; (8002bc4 <_dtoa_r+0x654>)
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f7fd fedd 	bl	800084c <__aeabi_ddiv>
 8002a92:	ec53 2b19 	vmov	r2, r3, d9
 8002a96:	f7fd fbf7 	bl	8000288 <__aeabi_dsub>
 8002a9a:	9d00      	ldr	r5, [sp, #0]
 8002a9c:	ec41 0b19 	vmov	d9, r0, r1
 8002aa0:	4649      	mov	r1, r9
 8002aa2:	4640      	mov	r0, r8
 8002aa4:	f7fe f858 	bl	8000b58 <__aeabi_d2iz>
 8002aa8:	4606      	mov	r6, r0
 8002aaa:	f7fd fd3b 	bl	8000524 <__aeabi_i2d>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4640      	mov	r0, r8
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	f7fd fbe7 	bl	8000288 <__aeabi_dsub>
 8002aba:	3630      	adds	r6, #48	; 0x30
 8002abc:	f805 6b01 	strb.w	r6, [r5], #1
 8002ac0:	ec53 2b19 	vmov	r2, r3, d9
 8002ac4:	4680      	mov	r8, r0
 8002ac6:	4689      	mov	r9, r1
 8002ac8:	f7fe f808 	bl	8000adc <__aeabi_dcmplt>
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d164      	bne.n	8002b9a <_dtoa_r+0x62a>
 8002ad0:	4642      	mov	r2, r8
 8002ad2:	464b      	mov	r3, r9
 8002ad4:	4937      	ldr	r1, [pc, #220]	; (8002bb4 <_dtoa_r+0x644>)
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7fd fbd6 	bl	8000288 <__aeabi_dsub>
 8002adc:	ec53 2b19 	vmov	r2, r3, d9
 8002ae0:	f7fd fffc 	bl	8000adc <__aeabi_dcmplt>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	f040 80b6 	bne.w	8002c56 <_dtoa_r+0x6e6>
 8002aea:	9b02      	ldr	r3, [sp, #8]
 8002aec:	429d      	cmp	r5, r3
 8002aee:	f43f af7c 	beq.w	80029ea <_dtoa_r+0x47a>
 8002af2:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <_dtoa_r+0x648>)
 8002af4:	ec51 0b19 	vmov	r0, r1, d9
 8002af8:	2200      	movs	r2, #0
 8002afa:	f7fd fd7d 	bl	80005f8 <__aeabi_dmul>
 8002afe:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <_dtoa_r+0x648>)
 8002b00:	ec41 0b19 	vmov	d9, r0, r1
 8002b04:	2200      	movs	r2, #0
 8002b06:	4640      	mov	r0, r8
 8002b08:	4649      	mov	r1, r9
 8002b0a:	f7fd fd75 	bl	80005f8 <__aeabi_dmul>
 8002b0e:	4680      	mov	r8, r0
 8002b10:	4689      	mov	r9, r1
 8002b12:	e7c5      	b.n	8002aa0 <_dtoa_r+0x530>
 8002b14:	ec51 0b17 	vmov	r0, r1, d7
 8002b18:	f7fd fd6e 	bl	80005f8 <__aeabi_dmul>
 8002b1c:	9b02      	ldr	r3, [sp, #8]
 8002b1e:	9d00      	ldr	r5, [sp, #0]
 8002b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b22:	ec41 0b19 	vmov	d9, r0, r1
 8002b26:	4649      	mov	r1, r9
 8002b28:	4640      	mov	r0, r8
 8002b2a:	f7fe f815 	bl	8000b58 <__aeabi_d2iz>
 8002b2e:	4606      	mov	r6, r0
 8002b30:	f7fd fcf8 	bl	8000524 <__aeabi_i2d>
 8002b34:	3630      	adds	r6, #48	; 0x30
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4640      	mov	r0, r8
 8002b3c:	4649      	mov	r1, r9
 8002b3e:	f7fd fba3 	bl	8000288 <__aeabi_dsub>
 8002b42:	f805 6b01 	strb.w	r6, [r5], #1
 8002b46:	9b02      	ldr	r3, [sp, #8]
 8002b48:	429d      	cmp	r5, r3
 8002b4a:	4680      	mov	r8, r0
 8002b4c:	4689      	mov	r9, r1
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	d124      	bne.n	8002b9e <_dtoa_r+0x62e>
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <_dtoa_r+0x654>)
 8002b56:	ec51 0b19 	vmov	r0, r1, d9
 8002b5a:	f7fd fb97 	bl	800028c <__adddf3>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4640      	mov	r0, r8
 8002b64:	4649      	mov	r1, r9
 8002b66:	f7fd ffd7 	bl	8000b18 <__aeabi_dcmpgt>
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	d173      	bne.n	8002c56 <_dtoa_r+0x6e6>
 8002b6e:	ec53 2b19 	vmov	r2, r3, d9
 8002b72:	4914      	ldr	r1, [pc, #80]	; (8002bc4 <_dtoa_r+0x654>)
 8002b74:	2000      	movs	r0, #0
 8002b76:	f7fd fb87 	bl	8000288 <__aeabi_dsub>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4640      	mov	r0, r8
 8002b80:	4649      	mov	r1, r9
 8002b82:	f7fd ffab 	bl	8000adc <__aeabi_dcmplt>
 8002b86:	2800      	cmp	r0, #0
 8002b88:	f43f af2f 	beq.w	80029ea <_dtoa_r+0x47a>
 8002b8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8002b8e:	1e6b      	subs	r3, r5, #1
 8002b90:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002b96:	2b30      	cmp	r3, #48	; 0x30
 8002b98:	d0f8      	beq.n	8002b8c <_dtoa_r+0x61c>
 8002b9a:	46bb      	mov	fp, r7
 8002b9c:	e04a      	b.n	8002c34 <_dtoa_r+0x6c4>
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <_dtoa_r+0x648>)
 8002ba0:	f7fd fd2a 	bl	80005f8 <__aeabi_dmul>
 8002ba4:	4680      	mov	r8, r0
 8002ba6:	4689      	mov	r9, r1
 8002ba8:	e7bd      	b.n	8002b26 <_dtoa_r+0x5b6>
 8002baa:	bf00      	nop
 8002bac:	08004b50 	.word	0x08004b50
 8002bb0:	08004b28 	.word	0x08004b28
 8002bb4:	3ff00000 	.word	0x3ff00000
 8002bb8:	40240000 	.word	0x40240000
 8002bbc:	401c0000 	.word	0x401c0000
 8002bc0:	40140000 	.word	0x40140000
 8002bc4:	3fe00000 	.word	0x3fe00000
 8002bc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002bcc:	9d00      	ldr	r5, [sp, #0]
 8002bce:	4642      	mov	r2, r8
 8002bd0:	464b      	mov	r3, r9
 8002bd2:	4630      	mov	r0, r6
 8002bd4:	4639      	mov	r1, r7
 8002bd6:	f7fd fe39 	bl	800084c <__aeabi_ddiv>
 8002bda:	f7fd ffbd 	bl	8000b58 <__aeabi_d2iz>
 8002bde:	9001      	str	r0, [sp, #4]
 8002be0:	f7fd fca0 	bl	8000524 <__aeabi_i2d>
 8002be4:	4642      	mov	r2, r8
 8002be6:	464b      	mov	r3, r9
 8002be8:	f7fd fd06 	bl	80005f8 <__aeabi_dmul>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4630      	mov	r0, r6
 8002bf2:	4639      	mov	r1, r7
 8002bf4:	f7fd fb48 	bl	8000288 <__aeabi_dsub>
 8002bf8:	9e01      	ldr	r6, [sp, #4]
 8002bfa:	9f04      	ldr	r7, [sp, #16]
 8002bfc:	3630      	adds	r6, #48	; 0x30
 8002bfe:	f805 6b01 	strb.w	r6, [r5], #1
 8002c02:	9e00      	ldr	r6, [sp, #0]
 8002c04:	1bae      	subs	r6, r5, r6
 8002c06:	42b7      	cmp	r7, r6
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	d134      	bne.n	8002c78 <_dtoa_r+0x708>
 8002c0e:	f7fd fb3d 	bl	800028c <__adddf3>
 8002c12:	4642      	mov	r2, r8
 8002c14:	464b      	mov	r3, r9
 8002c16:	4606      	mov	r6, r0
 8002c18:	460f      	mov	r7, r1
 8002c1a:	f7fd ff7d 	bl	8000b18 <__aeabi_dcmpgt>
 8002c1e:	b9c8      	cbnz	r0, 8002c54 <_dtoa_r+0x6e4>
 8002c20:	4642      	mov	r2, r8
 8002c22:	464b      	mov	r3, r9
 8002c24:	4630      	mov	r0, r6
 8002c26:	4639      	mov	r1, r7
 8002c28:	f7fd ff4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c2c:	b110      	cbz	r0, 8002c34 <_dtoa_r+0x6c4>
 8002c2e:	9b01      	ldr	r3, [sp, #4]
 8002c30:	07db      	lsls	r3, r3, #31
 8002c32:	d40f      	bmi.n	8002c54 <_dtoa_r+0x6e4>
 8002c34:	4651      	mov	r1, sl
 8002c36:	4620      	mov	r0, r4
 8002c38:	f000 feca 	bl	80039d0 <_Bfree>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002c40:	702b      	strb	r3, [r5, #0]
 8002c42:	f10b 0301 	add.w	r3, fp, #1
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f43f ace2 	beq.w	8002614 <_dtoa_r+0xa4>
 8002c50:	601d      	str	r5, [r3, #0]
 8002c52:	e4df      	b.n	8002614 <_dtoa_r+0xa4>
 8002c54:	465f      	mov	r7, fp
 8002c56:	462b      	mov	r3, r5
 8002c58:	461d      	mov	r5, r3
 8002c5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8002c5e:	2a39      	cmp	r2, #57	; 0x39
 8002c60:	d106      	bne.n	8002c70 <_dtoa_r+0x700>
 8002c62:	9a00      	ldr	r2, [sp, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1f7      	bne.n	8002c58 <_dtoa_r+0x6e8>
 8002c68:	9900      	ldr	r1, [sp, #0]
 8002c6a:	2230      	movs	r2, #48	; 0x30
 8002c6c:	3701      	adds	r7, #1
 8002c6e:	700a      	strb	r2, [r1, #0]
 8002c70:	781a      	ldrb	r2, [r3, #0]
 8002c72:	3201      	adds	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e790      	b.n	8002b9a <_dtoa_r+0x62a>
 8002c78:	4ba3      	ldr	r3, [pc, #652]	; (8002f08 <_dtoa_r+0x998>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f7fd fcbc 	bl	80005f8 <__aeabi_dmul>
 8002c80:	2200      	movs	r2, #0
 8002c82:	2300      	movs	r3, #0
 8002c84:	4606      	mov	r6, r0
 8002c86:	460f      	mov	r7, r1
 8002c88:	f7fd ff1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	d09e      	beq.n	8002bce <_dtoa_r+0x65e>
 8002c90:	e7d0      	b.n	8002c34 <_dtoa_r+0x6c4>
 8002c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c94:	2a00      	cmp	r2, #0
 8002c96:	f000 80ca 	beq.w	8002e2e <_dtoa_r+0x8be>
 8002c9a:	9a07      	ldr	r2, [sp, #28]
 8002c9c:	2a01      	cmp	r2, #1
 8002c9e:	f300 80ad 	bgt.w	8002dfc <_dtoa_r+0x88c>
 8002ca2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ca4:	2a00      	cmp	r2, #0
 8002ca6:	f000 80a5 	beq.w	8002df4 <_dtoa_r+0x884>
 8002caa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002cae:	9e08      	ldr	r6, [sp, #32]
 8002cb0:	9d05      	ldr	r5, [sp, #20]
 8002cb2:	9a05      	ldr	r2, [sp, #20]
 8002cb4:	441a      	add	r2, r3
 8002cb6:	9205      	str	r2, [sp, #20]
 8002cb8:	9a06      	ldr	r2, [sp, #24]
 8002cba:	2101      	movs	r1, #1
 8002cbc:	441a      	add	r2, r3
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	9206      	str	r2, [sp, #24]
 8002cc2:	f000 ff3b 	bl	8003b3c <__i2b>
 8002cc6:	4607      	mov	r7, r0
 8002cc8:	b165      	cbz	r5, 8002ce4 <_dtoa_r+0x774>
 8002cca:	9b06      	ldr	r3, [sp, #24]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	dd09      	ble.n	8002ce4 <_dtoa_r+0x774>
 8002cd0:	42ab      	cmp	r3, r5
 8002cd2:	9a05      	ldr	r2, [sp, #20]
 8002cd4:	bfa8      	it	ge
 8002cd6:	462b      	movge	r3, r5
 8002cd8:	1ad2      	subs	r2, r2, r3
 8002cda:	9205      	str	r2, [sp, #20]
 8002cdc:	9a06      	ldr	r2, [sp, #24]
 8002cde:	1aed      	subs	r5, r5, r3
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	9306      	str	r3, [sp, #24]
 8002ce4:	9b08      	ldr	r3, [sp, #32]
 8002ce6:	b1f3      	cbz	r3, 8002d26 <_dtoa_r+0x7b6>
 8002ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80a3 	beq.w	8002e36 <_dtoa_r+0x8c6>
 8002cf0:	2e00      	cmp	r6, #0
 8002cf2:	dd10      	ble.n	8002d16 <_dtoa_r+0x7a6>
 8002cf4:	4639      	mov	r1, r7
 8002cf6:	4632      	mov	r2, r6
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f000 ffdf 	bl	8003cbc <__pow5mult>
 8002cfe:	4652      	mov	r2, sl
 8002d00:	4601      	mov	r1, r0
 8002d02:	4607      	mov	r7, r0
 8002d04:	4620      	mov	r0, r4
 8002d06:	f000 ff2f 	bl	8003b68 <__multiply>
 8002d0a:	4651      	mov	r1, sl
 8002d0c:	4680      	mov	r8, r0
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f000 fe5e 	bl	80039d0 <_Bfree>
 8002d14:	46c2      	mov	sl, r8
 8002d16:	9b08      	ldr	r3, [sp, #32]
 8002d18:	1b9a      	subs	r2, r3, r6
 8002d1a:	d004      	beq.n	8002d26 <_dtoa_r+0x7b6>
 8002d1c:	4651      	mov	r1, sl
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f000 ffcc 	bl	8003cbc <__pow5mult>
 8002d24:	4682      	mov	sl, r0
 8002d26:	2101      	movs	r1, #1
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f000 ff07 	bl	8003b3c <__i2b>
 8002d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	4606      	mov	r6, r0
 8002d34:	f340 8081 	ble.w	8002e3a <_dtoa_r+0x8ca>
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4601      	mov	r1, r0
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f000 ffbd 	bl	8003cbc <__pow5mult>
 8002d42:	9b07      	ldr	r3, [sp, #28]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	4606      	mov	r6, r0
 8002d48:	dd7a      	ble.n	8002e40 <_dtoa_r+0x8d0>
 8002d4a:	f04f 0800 	mov.w	r8, #0
 8002d4e:	6933      	ldr	r3, [r6, #16]
 8002d50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002d54:	6918      	ldr	r0, [r3, #16]
 8002d56:	f000 fea3 	bl	8003aa0 <__hi0bits>
 8002d5a:	f1c0 0020 	rsb	r0, r0, #32
 8002d5e:	9b06      	ldr	r3, [sp, #24]
 8002d60:	4418      	add	r0, r3
 8002d62:	f010 001f 	ands.w	r0, r0, #31
 8002d66:	f000 8094 	beq.w	8002e92 <_dtoa_r+0x922>
 8002d6a:	f1c0 0320 	rsb	r3, r0, #32
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	f340 8085 	ble.w	8002e7e <_dtoa_r+0x90e>
 8002d74:	9b05      	ldr	r3, [sp, #20]
 8002d76:	f1c0 001c 	rsb	r0, r0, #28
 8002d7a:	4403      	add	r3, r0
 8002d7c:	9305      	str	r3, [sp, #20]
 8002d7e:	9b06      	ldr	r3, [sp, #24]
 8002d80:	4403      	add	r3, r0
 8002d82:	4405      	add	r5, r0
 8002d84:	9306      	str	r3, [sp, #24]
 8002d86:	9b05      	ldr	r3, [sp, #20]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	dd05      	ble.n	8002d98 <_dtoa_r+0x828>
 8002d8c:	4651      	mov	r1, sl
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4620      	mov	r0, r4
 8002d92:	f000 ffed 	bl	8003d70 <__lshift>
 8002d96:	4682      	mov	sl, r0
 8002d98:	9b06      	ldr	r3, [sp, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	dd05      	ble.n	8002daa <_dtoa_r+0x83a>
 8002d9e:	4631      	mov	r1, r6
 8002da0:	461a      	mov	r2, r3
 8002da2:	4620      	mov	r0, r4
 8002da4:	f000 ffe4 	bl	8003d70 <__lshift>
 8002da8:	4606      	mov	r6, r0
 8002daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d072      	beq.n	8002e96 <_dtoa_r+0x926>
 8002db0:	4631      	mov	r1, r6
 8002db2:	4650      	mov	r0, sl
 8002db4:	f001 f848 	bl	8003e48 <__mcmp>
 8002db8:	2800      	cmp	r0, #0
 8002dba:	da6c      	bge.n	8002e96 <_dtoa_r+0x926>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	4651      	mov	r1, sl
 8002dc0:	220a      	movs	r2, #10
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f000 fe26 	bl	8003a14 <__multadd>
 8002dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002dce:	4682      	mov	sl, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 81b0 	beq.w	8003136 <_dtoa_r+0xbc6>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	4639      	mov	r1, r7
 8002dda:	220a      	movs	r2, #10
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f000 fe19 	bl	8003a14 <__multadd>
 8002de2:	9b01      	ldr	r3, [sp, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	4607      	mov	r7, r0
 8002de8:	f300 8096 	bgt.w	8002f18 <_dtoa_r+0x9a8>
 8002dec:	9b07      	ldr	r3, [sp, #28]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	dc59      	bgt.n	8002ea6 <_dtoa_r+0x936>
 8002df2:	e091      	b.n	8002f18 <_dtoa_r+0x9a8>
 8002df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002df6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002dfa:	e758      	b.n	8002cae <_dtoa_r+0x73e>
 8002dfc:	9b04      	ldr	r3, [sp, #16]
 8002dfe:	1e5e      	subs	r6, r3, #1
 8002e00:	9b08      	ldr	r3, [sp, #32]
 8002e02:	42b3      	cmp	r3, r6
 8002e04:	bfbf      	itttt	lt
 8002e06:	9b08      	ldrlt	r3, [sp, #32]
 8002e08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8002e0a:	9608      	strlt	r6, [sp, #32]
 8002e0c:	1af3      	sublt	r3, r6, r3
 8002e0e:	bfb4      	ite	lt
 8002e10:	18d2      	addlt	r2, r2, r3
 8002e12:	1b9e      	subge	r6, r3, r6
 8002e14:	9b04      	ldr	r3, [sp, #16]
 8002e16:	bfbc      	itt	lt
 8002e18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8002e1a:	2600      	movlt	r6, #0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bfb7      	itett	lt
 8002e20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8002e24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8002e28:	1a9d      	sublt	r5, r3, r2
 8002e2a:	2300      	movlt	r3, #0
 8002e2c:	e741      	b.n	8002cb2 <_dtoa_r+0x742>
 8002e2e:	9e08      	ldr	r6, [sp, #32]
 8002e30:	9d05      	ldr	r5, [sp, #20]
 8002e32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002e34:	e748      	b.n	8002cc8 <_dtoa_r+0x758>
 8002e36:	9a08      	ldr	r2, [sp, #32]
 8002e38:	e770      	b.n	8002d1c <_dtoa_r+0x7ac>
 8002e3a:	9b07      	ldr	r3, [sp, #28]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	dc19      	bgt.n	8002e74 <_dtoa_r+0x904>
 8002e40:	9b02      	ldr	r3, [sp, #8]
 8002e42:	b9bb      	cbnz	r3, 8002e74 <_dtoa_r+0x904>
 8002e44:	9b03      	ldr	r3, [sp, #12]
 8002e46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e4a:	b99b      	cbnz	r3, 8002e74 <_dtoa_r+0x904>
 8002e4c:	9b03      	ldr	r3, [sp, #12]
 8002e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e52:	0d1b      	lsrs	r3, r3, #20
 8002e54:	051b      	lsls	r3, r3, #20
 8002e56:	b183      	cbz	r3, 8002e7a <_dtoa_r+0x90a>
 8002e58:	9b05      	ldr	r3, [sp, #20]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	9305      	str	r3, [sp, #20]
 8002e5e:	9b06      	ldr	r3, [sp, #24]
 8002e60:	3301      	adds	r3, #1
 8002e62:	9306      	str	r3, [sp, #24]
 8002e64:	f04f 0801 	mov.w	r8, #1
 8002e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f47f af6f 	bne.w	8002d4e <_dtoa_r+0x7de>
 8002e70:	2001      	movs	r0, #1
 8002e72:	e774      	b.n	8002d5e <_dtoa_r+0x7ee>
 8002e74:	f04f 0800 	mov.w	r8, #0
 8002e78:	e7f6      	b.n	8002e68 <_dtoa_r+0x8f8>
 8002e7a:	4698      	mov	r8, r3
 8002e7c:	e7f4      	b.n	8002e68 <_dtoa_r+0x8f8>
 8002e7e:	d082      	beq.n	8002d86 <_dtoa_r+0x816>
 8002e80:	9a05      	ldr	r2, [sp, #20]
 8002e82:	331c      	adds	r3, #28
 8002e84:	441a      	add	r2, r3
 8002e86:	9205      	str	r2, [sp, #20]
 8002e88:	9a06      	ldr	r2, [sp, #24]
 8002e8a:	441a      	add	r2, r3
 8002e8c:	441d      	add	r5, r3
 8002e8e:	9206      	str	r2, [sp, #24]
 8002e90:	e779      	b.n	8002d86 <_dtoa_r+0x816>
 8002e92:	4603      	mov	r3, r0
 8002e94:	e7f4      	b.n	8002e80 <_dtoa_r+0x910>
 8002e96:	9b04      	ldr	r3, [sp, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	dc37      	bgt.n	8002f0c <_dtoa_r+0x99c>
 8002e9c:	9b07      	ldr	r3, [sp, #28]
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	dd34      	ble.n	8002f0c <_dtoa_r+0x99c>
 8002ea2:	9b04      	ldr	r3, [sp, #16]
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	9b01      	ldr	r3, [sp, #4]
 8002ea8:	b963      	cbnz	r3, 8002ec4 <_dtoa_r+0x954>
 8002eaa:	4631      	mov	r1, r6
 8002eac:	2205      	movs	r2, #5
 8002eae:	4620      	mov	r0, r4
 8002eb0:	f000 fdb0 	bl	8003a14 <__multadd>
 8002eb4:	4601      	mov	r1, r0
 8002eb6:	4606      	mov	r6, r0
 8002eb8:	4650      	mov	r0, sl
 8002eba:	f000 ffc5 	bl	8003e48 <__mcmp>
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	f73f adbb 	bgt.w	8002a3a <_dtoa_r+0x4ca>
 8002ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ec6:	9d00      	ldr	r5, [sp, #0]
 8002ec8:	ea6f 0b03 	mvn.w	fp, r3
 8002ecc:	f04f 0800 	mov.w	r8, #0
 8002ed0:	4631      	mov	r1, r6
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	f000 fd7c 	bl	80039d0 <_Bfree>
 8002ed8:	2f00      	cmp	r7, #0
 8002eda:	f43f aeab 	beq.w	8002c34 <_dtoa_r+0x6c4>
 8002ede:	f1b8 0f00 	cmp.w	r8, #0
 8002ee2:	d005      	beq.n	8002ef0 <_dtoa_r+0x980>
 8002ee4:	45b8      	cmp	r8, r7
 8002ee6:	d003      	beq.n	8002ef0 <_dtoa_r+0x980>
 8002ee8:	4641      	mov	r1, r8
 8002eea:	4620      	mov	r0, r4
 8002eec:	f000 fd70 	bl	80039d0 <_Bfree>
 8002ef0:	4639      	mov	r1, r7
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	f000 fd6c 	bl	80039d0 <_Bfree>
 8002ef8:	e69c      	b.n	8002c34 <_dtoa_r+0x6c4>
 8002efa:	2600      	movs	r6, #0
 8002efc:	4637      	mov	r7, r6
 8002efe:	e7e1      	b.n	8002ec4 <_dtoa_r+0x954>
 8002f00:	46bb      	mov	fp, r7
 8002f02:	4637      	mov	r7, r6
 8002f04:	e599      	b.n	8002a3a <_dtoa_r+0x4ca>
 8002f06:	bf00      	nop
 8002f08:	40240000 	.word	0x40240000
 8002f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80c8 	beq.w	80030a4 <_dtoa_r+0xb34>
 8002f14:	9b04      	ldr	r3, [sp, #16]
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	2d00      	cmp	r5, #0
 8002f1a:	dd05      	ble.n	8002f28 <_dtoa_r+0x9b8>
 8002f1c:	4639      	mov	r1, r7
 8002f1e:	462a      	mov	r2, r5
 8002f20:	4620      	mov	r0, r4
 8002f22:	f000 ff25 	bl	8003d70 <__lshift>
 8002f26:	4607      	mov	r7, r0
 8002f28:	f1b8 0f00 	cmp.w	r8, #0
 8002f2c:	d05b      	beq.n	8002fe6 <_dtoa_r+0xa76>
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4620      	mov	r0, r4
 8002f32:	f000 fd0d 	bl	8003950 <_Balloc>
 8002f36:	4605      	mov	r5, r0
 8002f38:	b928      	cbnz	r0, 8002f46 <_dtoa_r+0x9d6>
 8002f3a:	4b83      	ldr	r3, [pc, #524]	; (8003148 <_dtoa_r+0xbd8>)
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8002f42:	f7ff bb2e 	b.w	80025a2 <_dtoa_r+0x32>
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	3202      	adds	r2, #2
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	f107 010c 	add.w	r1, r7, #12
 8002f50:	300c      	adds	r0, #12
 8002f52:	f001 fa75 	bl	8004440 <memcpy>
 8002f56:	2201      	movs	r2, #1
 8002f58:	4629      	mov	r1, r5
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f000 ff08 	bl	8003d70 <__lshift>
 8002f60:	9b00      	ldr	r3, [sp, #0]
 8002f62:	3301      	adds	r3, #1
 8002f64:	9304      	str	r3, [sp, #16]
 8002f66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	9308      	str	r3, [sp, #32]
 8002f6e:	9b02      	ldr	r3, [sp, #8]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	46b8      	mov	r8, r7
 8002f76:	9306      	str	r3, [sp, #24]
 8002f78:	4607      	mov	r7, r0
 8002f7a:	9b04      	ldr	r3, [sp, #16]
 8002f7c:	4631      	mov	r1, r6
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	4650      	mov	r0, sl
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	f7ff fa6b 	bl	800245e <quorem>
 8002f88:	4641      	mov	r1, r8
 8002f8a:	9002      	str	r0, [sp, #8]
 8002f8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8002f90:	4650      	mov	r0, sl
 8002f92:	f000 ff59 	bl	8003e48 <__mcmp>
 8002f96:	463a      	mov	r2, r7
 8002f98:	9005      	str	r0, [sp, #20]
 8002f9a:	4631      	mov	r1, r6
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f000 ff6f 	bl	8003e80 <__mdiff>
 8002fa2:	68c2      	ldr	r2, [r0, #12]
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	bb02      	cbnz	r2, 8002fea <_dtoa_r+0xa7a>
 8002fa8:	4601      	mov	r1, r0
 8002faa:	4650      	mov	r0, sl
 8002fac:	f000 ff4c 	bl	8003e48 <__mcmp>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	9209      	str	r2, [sp, #36]	; 0x24
 8002fb8:	f000 fd0a 	bl	80039d0 <_Bfree>
 8002fbc:	9b07      	ldr	r3, [sp, #28]
 8002fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fc0:	9d04      	ldr	r5, [sp, #16]
 8002fc2:	ea43 0102 	orr.w	r1, r3, r2
 8002fc6:	9b06      	ldr	r3, [sp, #24]
 8002fc8:	4319      	orrs	r1, r3
 8002fca:	d110      	bne.n	8002fee <_dtoa_r+0xa7e>
 8002fcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8002fd0:	d029      	beq.n	8003026 <_dtoa_r+0xab6>
 8002fd2:	9b05      	ldr	r3, [sp, #20]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	dd02      	ble.n	8002fde <_dtoa_r+0xa6e>
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8002fde:	9b01      	ldr	r3, [sp, #4]
 8002fe0:	f883 9000 	strb.w	r9, [r3]
 8002fe4:	e774      	b.n	8002ed0 <_dtoa_r+0x960>
 8002fe6:	4638      	mov	r0, r7
 8002fe8:	e7ba      	b.n	8002f60 <_dtoa_r+0x9f0>
 8002fea:	2201      	movs	r2, #1
 8002fec:	e7e1      	b.n	8002fb2 <_dtoa_r+0xa42>
 8002fee:	9b05      	ldr	r3, [sp, #20]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	db04      	blt.n	8002ffe <_dtoa_r+0xa8e>
 8002ff4:	9907      	ldr	r1, [sp, #28]
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	9906      	ldr	r1, [sp, #24]
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	d120      	bne.n	8003040 <_dtoa_r+0xad0>
 8002ffe:	2a00      	cmp	r2, #0
 8003000:	dded      	ble.n	8002fde <_dtoa_r+0xa6e>
 8003002:	4651      	mov	r1, sl
 8003004:	2201      	movs	r2, #1
 8003006:	4620      	mov	r0, r4
 8003008:	f000 feb2 	bl	8003d70 <__lshift>
 800300c:	4631      	mov	r1, r6
 800300e:	4682      	mov	sl, r0
 8003010:	f000 ff1a 	bl	8003e48 <__mcmp>
 8003014:	2800      	cmp	r0, #0
 8003016:	dc03      	bgt.n	8003020 <_dtoa_r+0xab0>
 8003018:	d1e1      	bne.n	8002fde <_dtoa_r+0xa6e>
 800301a:	f019 0f01 	tst.w	r9, #1
 800301e:	d0de      	beq.n	8002fde <_dtoa_r+0xa6e>
 8003020:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003024:	d1d8      	bne.n	8002fd8 <_dtoa_r+0xa68>
 8003026:	9a01      	ldr	r2, [sp, #4]
 8003028:	2339      	movs	r3, #57	; 0x39
 800302a:	7013      	strb	r3, [r2, #0]
 800302c:	462b      	mov	r3, r5
 800302e:	461d      	mov	r5, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003036:	2a39      	cmp	r2, #57	; 0x39
 8003038:	d06c      	beq.n	8003114 <_dtoa_r+0xba4>
 800303a:	3201      	adds	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	e747      	b.n	8002ed0 <_dtoa_r+0x960>
 8003040:	2a00      	cmp	r2, #0
 8003042:	dd07      	ble.n	8003054 <_dtoa_r+0xae4>
 8003044:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003048:	d0ed      	beq.n	8003026 <_dtoa_r+0xab6>
 800304a:	9a01      	ldr	r2, [sp, #4]
 800304c:	f109 0301 	add.w	r3, r9, #1
 8003050:	7013      	strb	r3, [r2, #0]
 8003052:	e73d      	b.n	8002ed0 <_dtoa_r+0x960>
 8003054:	9b04      	ldr	r3, [sp, #16]
 8003056:	9a08      	ldr	r2, [sp, #32]
 8003058:	f803 9c01 	strb.w	r9, [r3, #-1]
 800305c:	4293      	cmp	r3, r2
 800305e:	d043      	beq.n	80030e8 <_dtoa_r+0xb78>
 8003060:	4651      	mov	r1, sl
 8003062:	2300      	movs	r3, #0
 8003064:	220a      	movs	r2, #10
 8003066:	4620      	mov	r0, r4
 8003068:	f000 fcd4 	bl	8003a14 <__multadd>
 800306c:	45b8      	cmp	r8, r7
 800306e:	4682      	mov	sl, r0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	f04f 020a 	mov.w	r2, #10
 8003078:	4641      	mov	r1, r8
 800307a:	4620      	mov	r0, r4
 800307c:	d107      	bne.n	800308e <_dtoa_r+0xb1e>
 800307e:	f000 fcc9 	bl	8003a14 <__multadd>
 8003082:	4680      	mov	r8, r0
 8003084:	4607      	mov	r7, r0
 8003086:	9b04      	ldr	r3, [sp, #16]
 8003088:	3301      	adds	r3, #1
 800308a:	9304      	str	r3, [sp, #16]
 800308c:	e775      	b.n	8002f7a <_dtoa_r+0xa0a>
 800308e:	f000 fcc1 	bl	8003a14 <__multadd>
 8003092:	4639      	mov	r1, r7
 8003094:	4680      	mov	r8, r0
 8003096:	2300      	movs	r3, #0
 8003098:	220a      	movs	r2, #10
 800309a:	4620      	mov	r0, r4
 800309c:	f000 fcba 	bl	8003a14 <__multadd>
 80030a0:	4607      	mov	r7, r0
 80030a2:	e7f0      	b.n	8003086 <_dtoa_r+0xb16>
 80030a4:	9b04      	ldr	r3, [sp, #16]
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	9d00      	ldr	r5, [sp, #0]
 80030aa:	4631      	mov	r1, r6
 80030ac:	4650      	mov	r0, sl
 80030ae:	f7ff f9d6 	bl	800245e <quorem>
 80030b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80030b6:	9b00      	ldr	r3, [sp, #0]
 80030b8:	f805 9b01 	strb.w	r9, [r5], #1
 80030bc:	1aea      	subs	r2, r5, r3
 80030be:	9b01      	ldr	r3, [sp, #4]
 80030c0:	4293      	cmp	r3, r2
 80030c2:	dd07      	ble.n	80030d4 <_dtoa_r+0xb64>
 80030c4:	4651      	mov	r1, sl
 80030c6:	2300      	movs	r3, #0
 80030c8:	220a      	movs	r2, #10
 80030ca:	4620      	mov	r0, r4
 80030cc:	f000 fca2 	bl	8003a14 <__multadd>
 80030d0:	4682      	mov	sl, r0
 80030d2:	e7ea      	b.n	80030aa <_dtoa_r+0xb3a>
 80030d4:	9b01      	ldr	r3, [sp, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bfc8      	it	gt
 80030da:	461d      	movgt	r5, r3
 80030dc:	9b00      	ldr	r3, [sp, #0]
 80030de:	bfd8      	it	le
 80030e0:	2501      	movle	r5, #1
 80030e2:	441d      	add	r5, r3
 80030e4:	f04f 0800 	mov.w	r8, #0
 80030e8:	4651      	mov	r1, sl
 80030ea:	2201      	movs	r2, #1
 80030ec:	4620      	mov	r0, r4
 80030ee:	f000 fe3f 	bl	8003d70 <__lshift>
 80030f2:	4631      	mov	r1, r6
 80030f4:	4682      	mov	sl, r0
 80030f6:	f000 fea7 	bl	8003e48 <__mcmp>
 80030fa:	2800      	cmp	r0, #0
 80030fc:	dc96      	bgt.n	800302c <_dtoa_r+0xabc>
 80030fe:	d102      	bne.n	8003106 <_dtoa_r+0xb96>
 8003100:	f019 0f01 	tst.w	r9, #1
 8003104:	d192      	bne.n	800302c <_dtoa_r+0xabc>
 8003106:	462b      	mov	r3, r5
 8003108:	461d      	mov	r5, r3
 800310a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800310e:	2a30      	cmp	r2, #48	; 0x30
 8003110:	d0fa      	beq.n	8003108 <_dtoa_r+0xb98>
 8003112:	e6dd      	b.n	8002ed0 <_dtoa_r+0x960>
 8003114:	9a00      	ldr	r2, [sp, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d189      	bne.n	800302e <_dtoa_r+0xabe>
 800311a:	f10b 0b01 	add.w	fp, fp, #1
 800311e:	2331      	movs	r3, #49	; 0x31
 8003120:	e796      	b.n	8003050 <_dtoa_r+0xae0>
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <_dtoa_r+0xbdc>)
 8003124:	f7ff ba99 	b.w	800265a <_dtoa_r+0xea>
 8003128:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800312a:	2b00      	cmp	r3, #0
 800312c:	f47f aa6d 	bne.w	800260a <_dtoa_r+0x9a>
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <_dtoa_r+0xbe0>)
 8003132:	f7ff ba92 	b.w	800265a <_dtoa_r+0xea>
 8003136:	9b01      	ldr	r3, [sp, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	dcb5      	bgt.n	80030a8 <_dtoa_r+0xb38>
 800313c:	9b07      	ldr	r3, [sp, #28]
 800313e:	2b02      	cmp	r3, #2
 8003140:	f73f aeb1 	bgt.w	8002ea6 <_dtoa_r+0x936>
 8003144:	e7b0      	b.n	80030a8 <_dtoa_r+0xb38>
 8003146:	bf00      	nop
 8003148:	08004aac 	.word	0x08004aac
 800314c:	08004a0c 	.word	0x08004a0c
 8003150:	08004a30 	.word	0x08004a30

08003154 <__ssputs_r>:
 8003154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003158:	688e      	ldr	r6, [r1, #8]
 800315a:	461f      	mov	r7, r3
 800315c:	42be      	cmp	r6, r7
 800315e:	680b      	ldr	r3, [r1, #0]
 8003160:	4682      	mov	sl, r0
 8003162:	460c      	mov	r4, r1
 8003164:	4690      	mov	r8, r2
 8003166:	d82c      	bhi.n	80031c2 <__ssputs_r+0x6e>
 8003168:	898a      	ldrh	r2, [r1, #12]
 800316a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800316e:	d026      	beq.n	80031be <__ssputs_r+0x6a>
 8003170:	6965      	ldr	r5, [r4, #20]
 8003172:	6909      	ldr	r1, [r1, #16]
 8003174:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003178:	eba3 0901 	sub.w	r9, r3, r1
 800317c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003180:	1c7b      	adds	r3, r7, #1
 8003182:	444b      	add	r3, r9
 8003184:	106d      	asrs	r5, r5, #1
 8003186:	429d      	cmp	r5, r3
 8003188:	bf38      	it	cc
 800318a:	461d      	movcc	r5, r3
 800318c:	0553      	lsls	r3, r2, #21
 800318e:	d527      	bpl.n	80031e0 <__ssputs_r+0x8c>
 8003190:	4629      	mov	r1, r5
 8003192:	f000 faa3 	bl	80036dc <_malloc_r>
 8003196:	4606      	mov	r6, r0
 8003198:	b360      	cbz	r0, 80031f4 <__ssputs_r+0xa0>
 800319a:	6921      	ldr	r1, [r4, #16]
 800319c:	464a      	mov	r2, r9
 800319e:	f001 f94f 	bl	8004440 <memcpy>
 80031a2:	89a3      	ldrh	r3, [r4, #12]
 80031a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ac:	81a3      	strh	r3, [r4, #12]
 80031ae:	6126      	str	r6, [r4, #16]
 80031b0:	6165      	str	r5, [r4, #20]
 80031b2:	444e      	add	r6, r9
 80031b4:	eba5 0509 	sub.w	r5, r5, r9
 80031b8:	6026      	str	r6, [r4, #0]
 80031ba:	60a5      	str	r5, [r4, #8]
 80031bc:	463e      	mov	r6, r7
 80031be:	42be      	cmp	r6, r7
 80031c0:	d900      	bls.n	80031c4 <__ssputs_r+0x70>
 80031c2:	463e      	mov	r6, r7
 80031c4:	6820      	ldr	r0, [r4, #0]
 80031c6:	4632      	mov	r2, r6
 80031c8:	4641      	mov	r1, r8
 80031ca:	f001 f8a7 	bl	800431c <memmove>
 80031ce:	68a3      	ldr	r3, [r4, #8]
 80031d0:	1b9b      	subs	r3, r3, r6
 80031d2:	60a3      	str	r3, [r4, #8]
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	4433      	add	r3, r6
 80031d8:	6023      	str	r3, [r4, #0]
 80031da:	2000      	movs	r0, #0
 80031dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031e0:	462a      	mov	r2, r5
 80031e2:	f000 ff74 	bl	80040ce <_realloc_r>
 80031e6:	4606      	mov	r6, r0
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d1e0      	bne.n	80031ae <__ssputs_r+0x5a>
 80031ec:	6921      	ldr	r1, [r4, #16]
 80031ee:	4650      	mov	r0, sl
 80031f0:	f001 f968 	bl	80044c4 <_free_r>
 80031f4:	230c      	movs	r3, #12
 80031f6:	f8ca 3000 	str.w	r3, [sl]
 80031fa:	89a3      	ldrh	r3, [r4, #12]
 80031fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003200:	81a3      	strh	r3, [r4, #12]
 8003202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003206:	e7e9      	b.n	80031dc <__ssputs_r+0x88>

08003208 <_svfiprintf_r>:
 8003208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800320c:	4698      	mov	r8, r3
 800320e:	898b      	ldrh	r3, [r1, #12]
 8003210:	061b      	lsls	r3, r3, #24
 8003212:	b09d      	sub	sp, #116	; 0x74
 8003214:	4607      	mov	r7, r0
 8003216:	460d      	mov	r5, r1
 8003218:	4614      	mov	r4, r2
 800321a:	d50e      	bpl.n	800323a <_svfiprintf_r+0x32>
 800321c:	690b      	ldr	r3, [r1, #16]
 800321e:	b963      	cbnz	r3, 800323a <_svfiprintf_r+0x32>
 8003220:	2140      	movs	r1, #64	; 0x40
 8003222:	f000 fa5b 	bl	80036dc <_malloc_r>
 8003226:	6028      	str	r0, [r5, #0]
 8003228:	6128      	str	r0, [r5, #16]
 800322a:	b920      	cbnz	r0, 8003236 <_svfiprintf_r+0x2e>
 800322c:	230c      	movs	r3, #12
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003234:	e0d0      	b.n	80033d8 <_svfiprintf_r+0x1d0>
 8003236:	2340      	movs	r3, #64	; 0x40
 8003238:	616b      	str	r3, [r5, #20]
 800323a:	2300      	movs	r3, #0
 800323c:	9309      	str	r3, [sp, #36]	; 0x24
 800323e:	2320      	movs	r3, #32
 8003240:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003244:	f8cd 800c 	str.w	r8, [sp, #12]
 8003248:	2330      	movs	r3, #48	; 0x30
 800324a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80033f0 <_svfiprintf_r+0x1e8>
 800324e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003252:	f04f 0901 	mov.w	r9, #1
 8003256:	4623      	mov	r3, r4
 8003258:	469a      	mov	sl, r3
 800325a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800325e:	b10a      	cbz	r2, 8003264 <_svfiprintf_r+0x5c>
 8003260:	2a25      	cmp	r2, #37	; 0x25
 8003262:	d1f9      	bne.n	8003258 <_svfiprintf_r+0x50>
 8003264:	ebba 0b04 	subs.w	fp, sl, r4
 8003268:	d00b      	beq.n	8003282 <_svfiprintf_r+0x7a>
 800326a:	465b      	mov	r3, fp
 800326c:	4622      	mov	r2, r4
 800326e:	4629      	mov	r1, r5
 8003270:	4638      	mov	r0, r7
 8003272:	f7ff ff6f 	bl	8003154 <__ssputs_r>
 8003276:	3001      	adds	r0, #1
 8003278:	f000 80a9 	beq.w	80033ce <_svfiprintf_r+0x1c6>
 800327c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800327e:	445a      	add	r2, fp
 8003280:	9209      	str	r2, [sp, #36]	; 0x24
 8003282:	f89a 3000 	ldrb.w	r3, [sl]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 80a1 	beq.w	80033ce <_svfiprintf_r+0x1c6>
 800328c:	2300      	movs	r3, #0
 800328e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003296:	f10a 0a01 	add.w	sl, sl, #1
 800329a:	9304      	str	r3, [sp, #16]
 800329c:	9307      	str	r3, [sp, #28]
 800329e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032a2:	931a      	str	r3, [sp, #104]	; 0x68
 80032a4:	4654      	mov	r4, sl
 80032a6:	2205      	movs	r2, #5
 80032a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032ac:	4850      	ldr	r0, [pc, #320]	; (80033f0 <_svfiprintf_r+0x1e8>)
 80032ae:	f7fc ff8f 	bl	80001d0 <memchr>
 80032b2:	9a04      	ldr	r2, [sp, #16]
 80032b4:	b9d8      	cbnz	r0, 80032ee <_svfiprintf_r+0xe6>
 80032b6:	06d0      	lsls	r0, r2, #27
 80032b8:	bf44      	itt	mi
 80032ba:	2320      	movmi	r3, #32
 80032bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032c0:	0711      	lsls	r1, r2, #28
 80032c2:	bf44      	itt	mi
 80032c4:	232b      	movmi	r3, #43	; 0x2b
 80032c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032ca:	f89a 3000 	ldrb.w	r3, [sl]
 80032ce:	2b2a      	cmp	r3, #42	; 0x2a
 80032d0:	d015      	beq.n	80032fe <_svfiprintf_r+0xf6>
 80032d2:	9a07      	ldr	r2, [sp, #28]
 80032d4:	4654      	mov	r4, sl
 80032d6:	2000      	movs	r0, #0
 80032d8:	f04f 0c0a 	mov.w	ip, #10
 80032dc:	4621      	mov	r1, r4
 80032de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032e2:	3b30      	subs	r3, #48	; 0x30
 80032e4:	2b09      	cmp	r3, #9
 80032e6:	d94d      	bls.n	8003384 <_svfiprintf_r+0x17c>
 80032e8:	b1b0      	cbz	r0, 8003318 <_svfiprintf_r+0x110>
 80032ea:	9207      	str	r2, [sp, #28]
 80032ec:	e014      	b.n	8003318 <_svfiprintf_r+0x110>
 80032ee:	eba0 0308 	sub.w	r3, r0, r8
 80032f2:	fa09 f303 	lsl.w	r3, r9, r3
 80032f6:	4313      	orrs	r3, r2
 80032f8:	9304      	str	r3, [sp, #16]
 80032fa:	46a2      	mov	sl, r4
 80032fc:	e7d2      	b.n	80032a4 <_svfiprintf_r+0x9c>
 80032fe:	9b03      	ldr	r3, [sp, #12]
 8003300:	1d19      	adds	r1, r3, #4
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	9103      	str	r1, [sp, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	bfbb      	ittet	lt
 800330a:	425b      	neglt	r3, r3
 800330c:	f042 0202 	orrlt.w	r2, r2, #2
 8003310:	9307      	strge	r3, [sp, #28]
 8003312:	9307      	strlt	r3, [sp, #28]
 8003314:	bfb8      	it	lt
 8003316:	9204      	strlt	r2, [sp, #16]
 8003318:	7823      	ldrb	r3, [r4, #0]
 800331a:	2b2e      	cmp	r3, #46	; 0x2e
 800331c:	d10c      	bne.n	8003338 <_svfiprintf_r+0x130>
 800331e:	7863      	ldrb	r3, [r4, #1]
 8003320:	2b2a      	cmp	r3, #42	; 0x2a
 8003322:	d134      	bne.n	800338e <_svfiprintf_r+0x186>
 8003324:	9b03      	ldr	r3, [sp, #12]
 8003326:	1d1a      	adds	r2, r3, #4
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	9203      	str	r2, [sp, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	bfb8      	it	lt
 8003330:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003334:	3402      	adds	r4, #2
 8003336:	9305      	str	r3, [sp, #20]
 8003338:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003400 <_svfiprintf_r+0x1f8>
 800333c:	7821      	ldrb	r1, [r4, #0]
 800333e:	2203      	movs	r2, #3
 8003340:	4650      	mov	r0, sl
 8003342:	f7fc ff45 	bl	80001d0 <memchr>
 8003346:	b138      	cbz	r0, 8003358 <_svfiprintf_r+0x150>
 8003348:	9b04      	ldr	r3, [sp, #16]
 800334a:	eba0 000a 	sub.w	r0, r0, sl
 800334e:	2240      	movs	r2, #64	; 0x40
 8003350:	4082      	lsls	r2, r0
 8003352:	4313      	orrs	r3, r2
 8003354:	3401      	adds	r4, #1
 8003356:	9304      	str	r3, [sp, #16]
 8003358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800335c:	4825      	ldr	r0, [pc, #148]	; (80033f4 <_svfiprintf_r+0x1ec>)
 800335e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003362:	2206      	movs	r2, #6
 8003364:	f7fc ff34 	bl	80001d0 <memchr>
 8003368:	2800      	cmp	r0, #0
 800336a:	d038      	beq.n	80033de <_svfiprintf_r+0x1d6>
 800336c:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <_svfiprintf_r+0x1f0>)
 800336e:	bb1b      	cbnz	r3, 80033b8 <_svfiprintf_r+0x1b0>
 8003370:	9b03      	ldr	r3, [sp, #12]
 8003372:	3307      	adds	r3, #7
 8003374:	f023 0307 	bic.w	r3, r3, #7
 8003378:	3308      	adds	r3, #8
 800337a:	9303      	str	r3, [sp, #12]
 800337c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800337e:	4433      	add	r3, r6
 8003380:	9309      	str	r3, [sp, #36]	; 0x24
 8003382:	e768      	b.n	8003256 <_svfiprintf_r+0x4e>
 8003384:	fb0c 3202 	mla	r2, ip, r2, r3
 8003388:	460c      	mov	r4, r1
 800338a:	2001      	movs	r0, #1
 800338c:	e7a6      	b.n	80032dc <_svfiprintf_r+0xd4>
 800338e:	2300      	movs	r3, #0
 8003390:	3401      	adds	r4, #1
 8003392:	9305      	str	r3, [sp, #20]
 8003394:	4619      	mov	r1, r3
 8003396:	f04f 0c0a 	mov.w	ip, #10
 800339a:	4620      	mov	r0, r4
 800339c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033a0:	3a30      	subs	r2, #48	; 0x30
 80033a2:	2a09      	cmp	r2, #9
 80033a4:	d903      	bls.n	80033ae <_svfiprintf_r+0x1a6>
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0c6      	beq.n	8003338 <_svfiprintf_r+0x130>
 80033aa:	9105      	str	r1, [sp, #20]
 80033ac:	e7c4      	b.n	8003338 <_svfiprintf_r+0x130>
 80033ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80033b2:	4604      	mov	r4, r0
 80033b4:	2301      	movs	r3, #1
 80033b6:	e7f0      	b.n	800339a <_svfiprintf_r+0x192>
 80033b8:	ab03      	add	r3, sp, #12
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	462a      	mov	r2, r5
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <_svfiprintf_r+0x1f4>)
 80033c0:	a904      	add	r1, sp, #16
 80033c2:	4638      	mov	r0, r7
 80033c4:	f7fe fafc 	bl	80019c0 <_printf_float>
 80033c8:	1c42      	adds	r2, r0, #1
 80033ca:	4606      	mov	r6, r0
 80033cc:	d1d6      	bne.n	800337c <_svfiprintf_r+0x174>
 80033ce:	89ab      	ldrh	r3, [r5, #12]
 80033d0:	065b      	lsls	r3, r3, #25
 80033d2:	f53f af2d 	bmi.w	8003230 <_svfiprintf_r+0x28>
 80033d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033d8:	b01d      	add	sp, #116	; 0x74
 80033da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033de:	ab03      	add	r3, sp, #12
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	462a      	mov	r2, r5
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <_svfiprintf_r+0x1f4>)
 80033e6:	a904      	add	r1, sp, #16
 80033e8:	4638      	mov	r0, r7
 80033ea:	f7fe fd8d 	bl	8001f08 <_printf_i>
 80033ee:	e7eb      	b.n	80033c8 <_svfiprintf_r+0x1c0>
 80033f0:	08004abd 	.word	0x08004abd
 80033f4:	08004ac7 	.word	0x08004ac7
 80033f8:	080019c1 	.word	0x080019c1
 80033fc:	08003155 	.word	0x08003155
 8003400:	08004ac3 	.word	0x08004ac3

08003404 <__sfputc_r>:
 8003404:	6893      	ldr	r3, [r2, #8]
 8003406:	3b01      	subs	r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	b410      	push	{r4}
 800340c:	6093      	str	r3, [r2, #8]
 800340e:	da08      	bge.n	8003422 <__sfputc_r+0x1e>
 8003410:	6994      	ldr	r4, [r2, #24]
 8003412:	42a3      	cmp	r3, r4
 8003414:	db01      	blt.n	800341a <__sfputc_r+0x16>
 8003416:	290a      	cmp	r1, #10
 8003418:	d103      	bne.n	8003422 <__sfputc_r+0x1e>
 800341a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800341e:	f000 be85 	b.w	800412c <__swbuf_r>
 8003422:	6813      	ldr	r3, [r2, #0]
 8003424:	1c58      	adds	r0, r3, #1
 8003426:	6010      	str	r0, [r2, #0]
 8003428:	7019      	strb	r1, [r3, #0]
 800342a:	4608      	mov	r0, r1
 800342c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003430:	4770      	bx	lr

08003432 <__sfputs_r>:
 8003432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003434:	4606      	mov	r6, r0
 8003436:	460f      	mov	r7, r1
 8003438:	4614      	mov	r4, r2
 800343a:	18d5      	adds	r5, r2, r3
 800343c:	42ac      	cmp	r4, r5
 800343e:	d101      	bne.n	8003444 <__sfputs_r+0x12>
 8003440:	2000      	movs	r0, #0
 8003442:	e007      	b.n	8003454 <__sfputs_r+0x22>
 8003444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003448:	463a      	mov	r2, r7
 800344a:	4630      	mov	r0, r6
 800344c:	f7ff ffda 	bl	8003404 <__sfputc_r>
 8003450:	1c43      	adds	r3, r0, #1
 8003452:	d1f3      	bne.n	800343c <__sfputs_r+0xa>
 8003454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003458 <_vfiprintf_r>:
 8003458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800345c:	460d      	mov	r5, r1
 800345e:	b09d      	sub	sp, #116	; 0x74
 8003460:	4614      	mov	r4, r2
 8003462:	4698      	mov	r8, r3
 8003464:	4606      	mov	r6, r0
 8003466:	b118      	cbz	r0, 8003470 <_vfiprintf_r+0x18>
 8003468:	6a03      	ldr	r3, [r0, #32]
 800346a:	b90b      	cbnz	r3, 8003470 <_vfiprintf_r+0x18>
 800346c:	f7fe ff1a 	bl	80022a4 <__sinit>
 8003470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003472:	07d9      	lsls	r1, r3, #31
 8003474:	d405      	bmi.n	8003482 <_vfiprintf_r+0x2a>
 8003476:	89ab      	ldrh	r3, [r5, #12]
 8003478:	059a      	lsls	r2, r3, #22
 800347a:	d402      	bmi.n	8003482 <_vfiprintf_r+0x2a>
 800347c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800347e:	f7fe ffec 	bl	800245a <__retarget_lock_acquire_recursive>
 8003482:	89ab      	ldrh	r3, [r5, #12]
 8003484:	071b      	lsls	r3, r3, #28
 8003486:	d501      	bpl.n	800348c <_vfiprintf_r+0x34>
 8003488:	692b      	ldr	r3, [r5, #16]
 800348a:	b99b      	cbnz	r3, 80034b4 <_vfiprintf_r+0x5c>
 800348c:	4629      	mov	r1, r5
 800348e:	4630      	mov	r0, r6
 8003490:	f000 fe8a 	bl	80041a8 <__swsetup_r>
 8003494:	b170      	cbz	r0, 80034b4 <_vfiprintf_r+0x5c>
 8003496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003498:	07dc      	lsls	r4, r3, #31
 800349a:	d504      	bpl.n	80034a6 <_vfiprintf_r+0x4e>
 800349c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034a0:	b01d      	add	sp, #116	; 0x74
 80034a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034a6:	89ab      	ldrh	r3, [r5, #12]
 80034a8:	0598      	lsls	r0, r3, #22
 80034aa:	d4f7      	bmi.n	800349c <_vfiprintf_r+0x44>
 80034ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034ae:	f7fe ffd5 	bl	800245c <__retarget_lock_release_recursive>
 80034b2:	e7f3      	b.n	800349c <_vfiprintf_r+0x44>
 80034b4:	2300      	movs	r3, #0
 80034b6:	9309      	str	r3, [sp, #36]	; 0x24
 80034b8:	2320      	movs	r3, #32
 80034ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034be:	f8cd 800c 	str.w	r8, [sp, #12]
 80034c2:	2330      	movs	r3, #48	; 0x30
 80034c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003678 <_vfiprintf_r+0x220>
 80034c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034cc:	f04f 0901 	mov.w	r9, #1
 80034d0:	4623      	mov	r3, r4
 80034d2:	469a      	mov	sl, r3
 80034d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034d8:	b10a      	cbz	r2, 80034de <_vfiprintf_r+0x86>
 80034da:	2a25      	cmp	r2, #37	; 0x25
 80034dc:	d1f9      	bne.n	80034d2 <_vfiprintf_r+0x7a>
 80034de:	ebba 0b04 	subs.w	fp, sl, r4
 80034e2:	d00b      	beq.n	80034fc <_vfiprintf_r+0xa4>
 80034e4:	465b      	mov	r3, fp
 80034e6:	4622      	mov	r2, r4
 80034e8:	4629      	mov	r1, r5
 80034ea:	4630      	mov	r0, r6
 80034ec:	f7ff ffa1 	bl	8003432 <__sfputs_r>
 80034f0:	3001      	adds	r0, #1
 80034f2:	f000 80a9 	beq.w	8003648 <_vfiprintf_r+0x1f0>
 80034f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034f8:	445a      	add	r2, fp
 80034fa:	9209      	str	r2, [sp, #36]	; 0x24
 80034fc:	f89a 3000 	ldrb.w	r3, [sl]
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80a1 	beq.w	8003648 <_vfiprintf_r+0x1f0>
 8003506:	2300      	movs	r3, #0
 8003508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800350c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003510:	f10a 0a01 	add.w	sl, sl, #1
 8003514:	9304      	str	r3, [sp, #16]
 8003516:	9307      	str	r3, [sp, #28]
 8003518:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800351c:	931a      	str	r3, [sp, #104]	; 0x68
 800351e:	4654      	mov	r4, sl
 8003520:	2205      	movs	r2, #5
 8003522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003526:	4854      	ldr	r0, [pc, #336]	; (8003678 <_vfiprintf_r+0x220>)
 8003528:	f7fc fe52 	bl	80001d0 <memchr>
 800352c:	9a04      	ldr	r2, [sp, #16]
 800352e:	b9d8      	cbnz	r0, 8003568 <_vfiprintf_r+0x110>
 8003530:	06d1      	lsls	r1, r2, #27
 8003532:	bf44      	itt	mi
 8003534:	2320      	movmi	r3, #32
 8003536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800353a:	0713      	lsls	r3, r2, #28
 800353c:	bf44      	itt	mi
 800353e:	232b      	movmi	r3, #43	; 0x2b
 8003540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003544:	f89a 3000 	ldrb.w	r3, [sl]
 8003548:	2b2a      	cmp	r3, #42	; 0x2a
 800354a:	d015      	beq.n	8003578 <_vfiprintf_r+0x120>
 800354c:	9a07      	ldr	r2, [sp, #28]
 800354e:	4654      	mov	r4, sl
 8003550:	2000      	movs	r0, #0
 8003552:	f04f 0c0a 	mov.w	ip, #10
 8003556:	4621      	mov	r1, r4
 8003558:	f811 3b01 	ldrb.w	r3, [r1], #1
 800355c:	3b30      	subs	r3, #48	; 0x30
 800355e:	2b09      	cmp	r3, #9
 8003560:	d94d      	bls.n	80035fe <_vfiprintf_r+0x1a6>
 8003562:	b1b0      	cbz	r0, 8003592 <_vfiprintf_r+0x13a>
 8003564:	9207      	str	r2, [sp, #28]
 8003566:	e014      	b.n	8003592 <_vfiprintf_r+0x13a>
 8003568:	eba0 0308 	sub.w	r3, r0, r8
 800356c:	fa09 f303 	lsl.w	r3, r9, r3
 8003570:	4313      	orrs	r3, r2
 8003572:	9304      	str	r3, [sp, #16]
 8003574:	46a2      	mov	sl, r4
 8003576:	e7d2      	b.n	800351e <_vfiprintf_r+0xc6>
 8003578:	9b03      	ldr	r3, [sp, #12]
 800357a:	1d19      	adds	r1, r3, #4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	9103      	str	r1, [sp, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	bfbb      	ittet	lt
 8003584:	425b      	neglt	r3, r3
 8003586:	f042 0202 	orrlt.w	r2, r2, #2
 800358a:	9307      	strge	r3, [sp, #28]
 800358c:	9307      	strlt	r3, [sp, #28]
 800358e:	bfb8      	it	lt
 8003590:	9204      	strlt	r2, [sp, #16]
 8003592:	7823      	ldrb	r3, [r4, #0]
 8003594:	2b2e      	cmp	r3, #46	; 0x2e
 8003596:	d10c      	bne.n	80035b2 <_vfiprintf_r+0x15a>
 8003598:	7863      	ldrb	r3, [r4, #1]
 800359a:	2b2a      	cmp	r3, #42	; 0x2a
 800359c:	d134      	bne.n	8003608 <_vfiprintf_r+0x1b0>
 800359e:	9b03      	ldr	r3, [sp, #12]
 80035a0:	1d1a      	adds	r2, r3, #4
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	9203      	str	r2, [sp, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bfb8      	it	lt
 80035aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80035ae:	3402      	adds	r4, #2
 80035b0:	9305      	str	r3, [sp, #20]
 80035b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003688 <_vfiprintf_r+0x230>
 80035b6:	7821      	ldrb	r1, [r4, #0]
 80035b8:	2203      	movs	r2, #3
 80035ba:	4650      	mov	r0, sl
 80035bc:	f7fc fe08 	bl	80001d0 <memchr>
 80035c0:	b138      	cbz	r0, 80035d2 <_vfiprintf_r+0x17a>
 80035c2:	9b04      	ldr	r3, [sp, #16]
 80035c4:	eba0 000a 	sub.w	r0, r0, sl
 80035c8:	2240      	movs	r2, #64	; 0x40
 80035ca:	4082      	lsls	r2, r0
 80035cc:	4313      	orrs	r3, r2
 80035ce:	3401      	adds	r4, #1
 80035d0:	9304      	str	r3, [sp, #16]
 80035d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035d6:	4829      	ldr	r0, [pc, #164]	; (800367c <_vfiprintf_r+0x224>)
 80035d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035dc:	2206      	movs	r2, #6
 80035de:	f7fc fdf7 	bl	80001d0 <memchr>
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d03f      	beq.n	8003666 <_vfiprintf_r+0x20e>
 80035e6:	4b26      	ldr	r3, [pc, #152]	; (8003680 <_vfiprintf_r+0x228>)
 80035e8:	bb1b      	cbnz	r3, 8003632 <_vfiprintf_r+0x1da>
 80035ea:	9b03      	ldr	r3, [sp, #12]
 80035ec:	3307      	adds	r3, #7
 80035ee:	f023 0307 	bic.w	r3, r3, #7
 80035f2:	3308      	adds	r3, #8
 80035f4:	9303      	str	r3, [sp, #12]
 80035f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035f8:	443b      	add	r3, r7
 80035fa:	9309      	str	r3, [sp, #36]	; 0x24
 80035fc:	e768      	b.n	80034d0 <_vfiprintf_r+0x78>
 80035fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003602:	460c      	mov	r4, r1
 8003604:	2001      	movs	r0, #1
 8003606:	e7a6      	b.n	8003556 <_vfiprintf_r+0xfe>
 8003608:	2300      	movs	r3, #0
 800360a:	3401      	adds	r4, #1
 800360c:	9305      	str	r3, [sp, #20]
 800360e:	4619      	mov	r1, r3
 8003610:	f04f 0c0a 	mov.w	ip, #10
 8003614:	4620      	mov	r0, r4
 8003616:	f810 2b01 	ldrb.w	r2, [r0], #1
 800361a:	3a30      	subs	r2, #48	; 0x30
 800361c:	2a09      	cmp	r2, #9
 800361e:	d903      	bls.n	8003628 <_vfiprintf_r+0x1d0>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0c6      	beq.n	80035b2 <_vfiprintf_r+0x15a>
 8003624:	9105      	str	r1, [sp, #20]
 8003626:	e7c4      	b.n	80035b2 <_vfiprintf_r+0x15a>
 8003628:	fb0c 2101 	mla	r1, ip, r1, r2
 800362c:	4604      	mov	r4, r0
 800362e:	2301      	movs	r3, #1
 8003630:	e7f0      	b.n	8003614 <_vfiprintf_r+0x1bc>
 8003632:	ab03      	add	r3, sp, #12
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	462a      	mov	r2, r5
 8003638:	4b12      	ldr	r3, [pc, #72]	; (8003684 <_vfiprintf_r+0x22c>)
 800363a:	a904      	add	r1, sp, #16
 800363c:	4630      	mov	r0, r6
 800363e:	f7fe f9bf 	bl	80019c0 <_printf_float>
 8003642:	4607      	mov	r7, r0
 8003644:	1c78      	adds	r0, r7, #1
 8003646:	d1d6      	bne.n	80035f6 <_vfiprintf_r+0x19e>
 8003648:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800364a:	07d9      	lsls	r1, r3, #31
 800364c:	d405      	bmi.n	800365a <_vfiprintf_r+0x202>
 800364e:	89ab      	ldrh	r3, [r5, #12]
 8003650:	059a      	lsls	r2, r3, #22
 8003652:	d402      	bmi.n	800365a <_vfiprintf_r+0x202>
 8003654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003656:	f7fe ff01 	bl	800245c <__retarget_lock_release_recursive>
 800365a:	89ab      	ldrh	r3, [r5, #12]
 800365c:	065b      	lsls	r3, r3, #25
 800365e:	f53f af1d 	bmi.w	800349c <_vfiprintf_r+0x44>
 8003662:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003664:	e71c      	b.n	80034a0 <_vfiprintf_r+0x48>
 8003666:	ab03      	add	r3, sp, #12
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	462a      	mov	r2, r5
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <_vfiprintf_r+0x22c>)
 800366e:	a904      	add	r1, sp, #16
 8003670:	4630      	mov	r0, r6
 8003672:	f7fe fc49 	bl	8001f08 <_printf_i>
 8003676:	e7e4      	b.n	8003642 <_vfiprintf_r+0x1ea>
 8003678:	08004abd 	.word	0x08004abd
 800367c:	08004ac7 	.word	0x08004ac7
 8003680:	080019c1 	.word	0x080019c1
 8003684:	08003433 	.word	0x08003433
 8003688:	08004ac3 	.word	0x08004ac3

0800368c <malloc>:
 800368c:	4b02      	ldr	r3, [pc, #8]	; (8003698 <malloc+0xc>)
 800368e:	4601      	mov	r1, r0
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	f000 b823 	b.w	80036dc <_malloc_r>
 8003696:	bf00      	nop
 8003698:	20000060 	.word	0x20000060

0800369c <sbrk_aligned>:
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	4e0e      	ldr	r6, [pc, #56]	; (80036d8 <sbrk_aligned+0x3c>)
 80036a0:	460c      	mov	r4, r1
 80036a2:	6831      	ldr	r1, [r6, #0]
 80036a4:	4605      	mov	r5, r0
 80036a6:	b911      	cbnz	r1, 80036ae <sbrk_aligned+0x12>
 80036a8:	f000 fea8 	bl	80043fc <_sbrk_r>
 80036ac:	6030      	str	r0, [r6, #0]
 80036ae:	4621      	mov	r1, r4
 80036b0:	4628      	mov	r0, r5
 80036b2:	f000 fea3 	bl	80043fc <_sbrk_r>
 80036b6:	1c43      	adds	r3, r0, #1
 80036b8:	d00a      	beq.n	80036d0 <sbrk_aligned+0x34>
 80036ba:	1cc4      	adds	r4, r0, #3
 80036bc:	f024 0403 	bic.w	r4, r4, #3
 80036c0:	42a0      	cmp	r0, r4
 80036c2:	d007      	beq.n	80036d4 <sbrk_aligned+0x38>
 80036c4:	1a21      	subs	r1, r4, r0
 80036c6:	4628      	mov	r0, r5
 80036c8:	f000 fe98 	bl	80043fc <_sbrk_r>
 80036cc:	3001      	adds	r0, #1
 80036ce:	d101      	bne.n	80036d4 <sbrk_aligned+0x38>
 80036d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80036d4:	4620      	mov	r0, r4
 80036d6:	bd70      	pop	{r4, r5, r6, pc}
 80036d8:	20000344 	.word	0x20000344

080036dc <_malloc_r>:
 80036dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036e0:	1ccd      	adds	r5, r1, #3
 80036e2:	f025 0503 	bic.w	r5, r5, #3
 80036e6:	3508      	adds	r5, #8
 80036e8:	2d0c      	cmp	r5, #12
 80036ea:	bf38      	it	cc
 80036ec:	250c      	movcc	r5, #12
 80036ee:	2d00      	cmp	r5, #0
 80036f0:	4607      	mov	r7, r0
 80036f2:	db01      	blt.n	80036f8 <_malloc_r+0x1c>
 80036f4:	42a9      	cmp	r1, r5
 80036f6:	d905      	bls.n	8003704 <_malloc_r+0x28>
 80036f8:	230c      	movs	r3, #12
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	2600      	movs	r6, #0
 80036fe:	4630      	mov	r0, r6
 8003700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003704:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037d8 <_malloc_r+0xfc>
 8003708:	f000 f916 	bl	8003938 <__malloc_lock>
 800370c:	f8d8 3000 	ldr.w	r3, [r8]
 8003710:	461c      	mov	r4, r3
 8003712:	bb5c      	cbnz	r4, 800376c <_malloc_r+0x90>
 8003714:	4629      	mov	r1, r5
 8003716:	4638      	mov	r0, r7
 8003718:	f7ff ffc0 	bl	800369c <sbrk_aligned>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	4604      	mov	r4, r0
 8003720:	d155      	bne.n	80037ce <_malloc_r+0xf2>
 8003722:	f8d8 4000 	ldr.w	r4, [r8]
 8003726:	4626      	mov	r6, r4
 8003728:	2e00      	cmp	r6, #0
 800372a:	d145      	bne.n	80037b8 <_malloc_r+0xdc>
 800372c:	2c00      	cmp	r4, #0
 800372e:	d048      	beq.n	80037c2 <_malloc_r+0xe6>
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	4631      	mov	r1, r6
 8003734:	4638      	mov	r0, r7
 8003736:	eb04 0903 	add.w	r9, r4, r3
 800373a:	f000 fe5f 	bl	80043fc <_sbrk_r>
 800373e:	4581      	cmp	r9, r0
 8003740:	d13f      	bne.n	80037c2 <_malloc_r+0xe6>
 8003742:	6821      	ldr	r1, [r4, #0]
 8003744:	1a6d      	subs	r5, r5, r1
 8003746:	4629      	mov	r1, r5
 8003748:	4638      	mov	r0, r7
 800374a:	f7ff ffa7 	bl	800369c <sbrk_aligned>
 800374e:	3001      	adds	r0, #1
 8003750:	d037      	beq.n	80037c2 <_malloc_r+0xe6>
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	442b      	add	r3, r5
 8003756:	6023      	str	r3, [r4, #0]
 8003758:	f8d8 3000 	ldr.w	r3, [r8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d038      	beq.n	80037d2 <_malloc_r+0xf6>
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	42a2      	cmp	r2, r4
 8003764:	d12b      	bne.n	80037be <_malloc_r+0xe2>
 8003766:	2200      	movs	r2, #0
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	e00f      	b.n	800378c <_malloc_r+0xb0>
 800376c:	6822      	ldr	r2, [r4, #0]
 800376e:	1b52      	subs	r2, r2, r5
 8003770:	d41f      	bmi.n	80037b2 <_malloc_r+0xd6>
 8003772:	2a0b      	cmp	r2, #11
 8003774:	d917      	bls.n	80037a6 <_malloc_r+0xca>
 8003776:	1961      	adds	r1, r4, r5
 8003778:	42a3      	cmp	r3, r4
 800377a:	6025      	str	r5, [r4, #0]
 800377c:	bf18      	it	ne
 800377e:	6059      	strne	r1, [r3, #4]
 8003780:	6863      	ldr	r3, [r4, #4]
 8003782:	bf08      	it	eq
 8003784:	f8c8 1000 	streq.w	r1, [r8]
 8003788:	5162      	str	r2, [r4, r5]
 800378a:	604b      	str	r3, [r1, #4]
 800378c:	4638      	mov	r0, r7
 800378e:	f104 060b 	add.w	r6, r4, #11
 8003792:	f000 f8d7 	bl	8003944 <__malloc_unlock>
 8003796:	f026 0607 	bic.w	r6, r6, #7
 800379a:	1d23      	adds	r3, r4, #4
 800379c:	1af2      	subs	r2, r6, r3
 800379e:	d0ae      	beq.n	80036fe <_malloc_r+0x22>
 80037a0:	1b9b      	subs	r3, r3, r6
 80037a2:	50a3      	str	r3, [r4, r2]
 80037a4:	e7ab      	b.n	80036fe <_malloc_r+0x22>
 80037a6:	42a3      	cmp	r3, r4
 80037a8:	6862      	ldr	r2, [r4, #4]
 80037aa:	d1dd      	bne.n	8003768 <_malloc_r+0x8c>
 80037ac:	f8c8 2000 	str.w	r2, [r8]
 80037b0:	e7ec      	b.n	800378c <_malloc_r+0xb0>
 80037b2:	4623      	mov	r3, r4
 80037b4:	6864      	ldr	r4, [r4, #4]
 80037b6:	e7ac      	b.n	8003712 <_malloc_r+0x36>
 80037b8:	4634      	mov	r4, r6
 80037ba:	6876      	ldr	r6, [r6, #4]
 80037bc:	e7b4      	b.n	8003728 <_malloc_r+0x4c>
 80037be:	4613      	mov	r3, r2
 80037c0:	e7cc      	b.n	800375c <_malloc_r+0x80>
 80037c2:	230c      	movs	r3, #12
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	4638      	mov	r0, r7
 80037c8:	f000 f8bc 	bl	8003944 <__malloc_unlock>
 80037cc:	e797      	b.n	80036fe <_malloc_r+0x22>
 80037ce:	6025      	str	r5, [r4, #0]
 80037d0:	e7dc      	b.n	800378c <_malloc_r+0xb0>
 80037d2:	605b      	str	r3, [r3, #4]
 80037d4:	deff      	udf	#255	; 0xff
 80037d6:	bf00      	nop
 80037d8:	20000340 	.word	0x20000340

080037dc <__sflush_r>:
 80037dc:	898a      	ldrh	r2, [r1, #12]
 80037de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e2:	4605      	mov	r5, r0
 80037e4:	0710      	lsls	r0, r2, #28
 80037e6:	460c      	mov	r4, r1
 80037e8:	d458      	bmi.n	800389c <__sflush_r+0xc0>
 80037ea:	684b      	ldr	r3, [r1, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	dc05      	bgt.n	80037fc <__sflush_r+0x20>
 80037f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	dc02      	bgt.n	80037fc <__sflush_r+0x20>
 80037f6:	2000      	movs	r0, #0
 80037f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037fe:	2e00      	cmp	r6, #0
 8003800:	d0f9      	beq.n	80037f6 <__sflush_r+0x1a>
 8003802:	2300      	movs	r3, #0
 8003804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003808:	682f      	ldr	r7, [r5, #0]
 800380a:	6a21      	ldr	r1, [r4, #32]
 800380c:	602b      	str	r3, [r5, #0]
 800380e:	d032      	beq.n	8003876 <__sflush_r+0x9a>
 8003810:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003812:	89a3      	ldrh	r3, [r4, #12]
 8003814:	075a      	lsls	r2, r3, #29
 8003816:	d505      	bpl.n	8003824 <__sflush_r+0x48>
 8003818:	6863      	ldr	r3, [r4, #4]
 800381a:	1ac0      	subs	r0, r0, r3
 800381c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800381e:	b10b      	cbz	r3, 8003824 <__sflush_r+0x48>
 8003820:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003822:	1ac0      	subs	r0, r0, r3
 8003824:	2300      	movs	r3, #0
 8003826:	4602      	mov	r2, r0
 8003828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800382a:	6a21      	ldr	r1, [r4, #32]
 800382c:	4628      	mov	r0, r5
 800382e:	47b0      	blx	r6
 8003830:	1c43      	adds	r3, r0, #1
 8003832:	89a3      	ldrh	r3, [r4, #12]
 8003834:	d106      	bne.n	8003844 <__sflush_r+0x68>
 8003836:	6829      	ldr	r1, [r5, #0]
 8003838:	291d      	cmp	r1, #29
 800383a:	d82b      	bhi.n	8003894 <__sflush_r+0xb8>
 800383c:	4a29      	ldr	r2, [pc, #164]	; (80038e4 <__sflush_r+0x108>)
 800383e:	410a      	asrs	r2, r1
 8003840:	07d6      	lsls	r6, r2, #31
 8003842:	d427      	bmi.n	8003894 <__sflush_r+0xb8>
 8003844:	2200      	movs	r2, #0
 8003846:	6062      	str	r2, [r4, #4]
 8003848:	04d9      	lsls	r1, r3, #19
 800384a:	6922      	ldr	r2, [r4, #16]
 800384c:	6022      	str	r2, [r4, #0]
 800384e:	d504      	bpl.n	800385a <__sflush_r+0x7e>
 8003850:	1c42      	adds	r2, r0, #1
 8003852:	d101      	bne.n	8003858 <__sflush_r+0x7c>
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	b903      	cbnz	r3, 800385a <__sflush_r+0x7e>
 8003858:	6560      	str	r0, [r4, #84]	; 0x54
 800385a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800385c:	602f      	str	r7, [r5, #0]
 800385e:	2900      	cmp	r1, #0
 8003860:	d0c9      	beq.n	80037f6 <__sflush_r+0x1a>
 8003862:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003866:	4299      	cmp	r1, r3
 8003868:	d002      	beq.n	8003870 <__sflush_r+0x94>
 800386a:	4628      	mov	r0, r5
 800386c:	f000 fe2a 	bl	80044c4 <_free_r>
 8003870:	2000      	movs	r0, #0
 8003872:	6360      	str	r0, [r4, #52]	; 0x34
 8003874:	e7c0      	b.n	80037f8 <__sflush_r+0x1c>
 8003876:	2301      	movs	r3, #1
 8003878:	4628      	mov	r0, r5
 800387a:	47b0      	blx	r6
 800387c:	1c41      	adds	r1, r0, #1
 800387e:	d1c8      	bne.n	8003812 <__sflush_r+0x36>
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0c5      	beq.n	8003812 <__sflush_r+0x36>
 8003886:	2b1d      	cmp	r3, #29
 8003888:	d001      	beq.n	800388e <__sflush_r+0xb2>
 800388a:	2b16      	cmp	r3, #22
 800388c:	d101      	bne.n	8003892 <__sflush_r+0xb6>
 800388e:	602f      	str	r7, [r5, #0]
 8003890:	e7b1      	b.n	80037f6 <__sflush_r+0x1a>
 8003892:	89a3      	ldrh	r3, [r4, #12]
 8003894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003898:	81a3      	strh	r3, [r4, #12]
 800389a:	e7ad      	b.n	80037f8 <__sflush_r+0x1c>
 800389c:	690f      	ldr	r7, [r1, #16]
 800389e:	2f00      	cmp	r7, #0
 80038a0:	d0a9      	beq.n	80037f6 <__sflush_r+0x1a>
 80038a2:	0793      	lsls	r3, r2, #30
 80038a4:	680e      	ldr	r6, [r1, #0]
 80038a6:	bf08      	it	eq
 80038a8:	694b      	ldreq	r3, [r1, #20]
 80038aa:	600f      	str	r7, [r1, #0]
 80038ac:	bf18      	it	ne
 80038ae:	2300      	movne	r3, #0
 80038b0:	eba6 0807 	sub.w	r8, r6, r7
 80038b4:	608b      	str	r3, [r1, #8]
 80038b6:	f1b8 0f00 	cmp.w	r8, #0
 80038ba:	dd9c      	ble.n	80037f6 <__sflush_r+0x1a>
 80038bc:	6a21      	ldr	r1, [r4, #32]
 80038be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038c0:	4643      	mov	r3, r8
 80038c2:	463a      	mov	r2, r7
 80038c4:	4628      	mov	r0, r5
 80038c6:	47b0      	blx	r6
 80038c8:	2800      	cmp	r0, #0
 80038ca:	dc06      	bgt.n	80038da <__sflush_r+0xfe>
 80038cc:	89a3      	ldrh	r3, [r4, #12]
 80038ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038d2:	81a3      	strh	r3, [r4, #12]
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038d8:	e78e      	b.n	80037f8 <__sflush_r+0x1c>
 80038da:	4407      	add	r7, r0
 80038dc:	eba8 0800 	sub.w	r8, r8, r0
 80038e0:	e7e9      	b.n	80038b6 <__sflush_r+0xda>
 80038e2:	bf00      	nop
 80038e4:	dfbffffe 	.word	0xdfbffffe

080038e8 <_fflush_r>:
 80038e8:	b538      	push	{r3, r4, r5, lr}
 80038ea:	690b      	ldr	r3, [r1, #16]
 80038ec:	4605      	mov	r5, r0
 80038ee:	460c      	mov	r4, r1
 80038f0:	b913      	cbnz	r3, 80038f8 <_fflush_r+0x10>
 80038f2:	2500      	movs	r5, #0
 80038f4:	4628      	mov	r0, r5
 80038f6:	bd38      	pop	{r3, r4, r5, pc}
 80038f8:	b118      	cbz	r0, 8003902 <_fflush_r+0x1a>
 80038fa:	6a03      	ldr	r3, [r0, #32]
 80038fc:	b90b      	cbnz	r3, 8003902 <_fflush_r+0x1a>
 80038fe:	f7fe fcd1 	bl	80022a4 <__sinit>
 8003902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f3      	beq.n	80038f2 <_fflush_r+0xa>
 800390a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800390c:	07d0      	lsls	r0, r2, #31
 800390e:	d404      	bmi.n	800391a <_fflush_r+0x32>
 8003910:	0599      	lsls	r1, r3, #22
 8003912:	d402      	bmi.n	800391a <_fflush_r+0x32>
 8003914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003916:	f7fe fda0 	bl	800245a <__retarget_lock_acquire_recursive>
 800391a:	4628      	mov	r0, r5
 800391c:	4621      	mov	r1, r4
 800391e:	f7ff ff5d 	bl	80037dc <__sflush_r>
 8003922:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003924:	07da      	lsls	r2, r3, #31
 8003926:	4605      	mov	r5, r0
 8003928:	d4e4      	bmi.n	80038f4 <_fflush_r+0xc>
 800392a:	89a3      	ldrh	r3, [r4, #12]
 800392c:	059b      	lsls	r3, r3, #22
 800392e:	d4e1      	bmi.n	80038f4 <_fflush_r+0xc>
 8003930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003932:	f7fe fd93 	bl	800245c <__retarget_lock_release_recursive>
 8003936:	e7dd      	b.n	80038f4 <_fflush_r+0xc>

08003938 <__malloc_lock>:
 8003938:	4801      	ldr	r0, [pc, #4]	; (8003940 <__malloc_lock+0x8>)
 800393a:	f7fe bd8e 	b.w	800245a <__retarget_lock_acquire_recursive>
 800393e:	bf00      	nop
 8003940:	2000033c 	.word	0x2000033c

08003944 <__malloc_unlock>:
 8003944:	4801      	ldr	r0, [pc, #4]	; (800394c <__malloc_unlock+0x8>)
 8003946:	f7fe bd89 	b.w	800245c <__retarget_lock_release_recursive>
 800394a:	bf00      	nop
 800394c:	2000033c 	.word	0x2000033c

08003950 <_Balloc>:
 8003950:	b570      	push	{r4, r5, r6, lr}
 8003952:	69c6      	ldr	r6, [r0, #28]
 8003954:	4604      	mov	r4, r0
 8003956:	460d      	mov	r5, r1
 8003958:	b976      	cbnz	r6, 8003978 <_Balloc+0x28>
 800395a:	2010      	movs	r0, #16
 800395c:	f7ff fe96 	bl	800368c <malloc>
 8003960:	4602      	mov	r2, r0
 8003962:	61e0      	str	r0, [r4, #28]
 8003964:	b920      	cbnz	r0, 8003970 <_Balloc+0x20>
 8003966:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <_Balloc+0x78>)
 8003968:	4818      	ldr	r0, [pc, #96]	; (80039cc <_Balloc+0x7c>)
 800396a:	216b      	movs	r1, #107	; 0x6b
 800396c:	f000 fd76 	bl	800445c <__assert_func>
 8003970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003974:	6006      	str	r6, [r0, #0]
 8003976:	60c6      	str	r6, [r0, #12]
 8003978:	69e6      	ldr	r6, [r4, #28]
 800397a:	68f3      	ldr	r3, [r6, #12]
 800397c:	b183      	cbz	r3, 80039a0 <_Balloc+0x50>
 800397e:	69e3      	ldr	r3, [r4, #28]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003986:	b9b8      	cbnz	r0, 80039b8 <_Balloc+0x68>
 8003988:	2101      	movs	r1, #1
 800398a:	fa01 f605 	lsl.w	r6, r1, r5
 800398e:	1d72      	adds	r2, r6, #5
 8003990:	0092      	lsls	r2, r2, #2
 8003992:	4620      	mov	r0, r4
 8003994:	f000 fd80 	bl	8004498 <_calloc_r>
 8003998:	b160      	cbz	r0, 80039b4 <_Balloc+0x64>
 800399a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800399e:	e00e      	b.n	80039be <_Balloc+0x6e>
 80039a0:	2221      	movs	r2, #33	; 0x21
 80039a2:	2104      	movs	r1, #4
 80039a4:	4620      	mov	r0, r4
 80039a6:	f000 fd77 	bl	8004498 <_calloc_r>
 80039aa:	69e3      	ldr	r3, [r4, #28]
 80039ac:	60f0      	str	r0, [r6, #12]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e4      	bne.n	800397e <_Balloc+0x2e>
 80039b4:	2000      	movs	r0, #0
 80039b6:	bd70      	pop	{r4, r5, r6, pc}
 80039b8:	6802      	ldr	r2, [r0, #0]
 80039ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80039be:	2300      	movs	r3, #0
 80039c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80039c4:	e7f7      	b.n	80039b6 <_Balloc+0x66>
 80039c6:	bf00      	nop
 80039c8:	08004a3d 	.word	0x08004a3d
 80039cc:	08004ace 	.word	0x08004ace

080039d0 <_Bfree>:
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	69c6      	ldr	r6, [r0, #28]
 80039d4:	4605      	mov	r5, r0
 80039d6:	460c      	mov	r4, r1
 80039d8:	b976      	cbnz	r6, 80039f8 <_Bfree+0x28>
 80039da:	2010      	movs	r0, #16
 80039dc:	f7ff fe56 	bl	800368c <malloc>
 80039e0:	4602      	mov	r2, r0
 80039e2:	61e8      	str	r0, [r5, #28]
 80039e4:	b920      	cbnz	r0, 80039f0 <_Bfree+0x20>
 80039e6:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <_Bfree+0x3c>)
 80039e8:	4809      	ldr	r0, [pc, #36]	; (8003a10 <_Bfree+0x40>)
 80039ea:	218f      	movs	r1, #143	; 0x8f
 80039ec:	f000 fd36 	bl	800445c <__assert_func>
 80039f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80039f4:	6006      	str	r6, [r0, #0]
 80039f6:	60c6      	str	r6, [r0, #12]
 80039f8:	b13c      	cbz	r4, 8003a0a <_Bfree+0x3a>
 80039fa:	69eb      	ldr	r3, [r5, #28]
 80039fc:	6862      	ldr	r2, [r4, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a04:	6021      	str	r1, [r4, #0]
 8003a06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
 8003a0c:	08004a3d 	.word	0x08004a3d
 8003a10:	08004ace 	.word	0x08004ace

08003a14 <__multadd>:
 8003a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a18:	690d      	ldr	r5, [r1, #16]
 8003a1a:	4607      	mov	r7, r0
 8003a1c:	460c      	mov	r4, r1
 8003a1e:	461e      	mov	r6, r3
 8003a20:	f101 0c14 	add.w	ip, r1, #20
 8003a24:	2000      	movs	r0, #0
 8003a26:	f8dc 3000 	ldr.w	r3, [ip]
 8003a2a:	b299      	uxth	r1, r3
 8003a2c:	fb02 6101 	mla	r1, r2, r1, r6
 8003a30:	0c1e      	lsrs	r6, r3, #16
 8003a32:	0c0b      	lsrs	r3, r1, #16
 8003a34:	fb02 3306 	mla	r3, r2, r6, r3
 8003a38:	b289      	uxth	r1, r1
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003a40:	4285      	cmp	r5, r0
 8003a42:	f84c 1b04 	str.w	r1, [ip], #4
 8003a46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003a4a:	dcec      	bgt.n	8003a26 <__multadd+0x12>
 8003a4c:	b30e      	cbz	r6, 8003a92 <__multadd+0x7e>
 8003a4e:	68a3      	ldr	r3, [r4, #8]
 8003a50:	42ab      	cmp	r3, r5
 8003a52:	dc19      	bgt.n	8003a88 <__multadd+0x74>
 8003a54:	6861      	ldr	r1, [r4, #4]
 8003a56:	4638      	mov	r0, r7
 8003a58:	3101      	adds	r1, #1
 8003a5a:	f7ff ff79 	bl	8003950 <_Balloc>
 8003a5e:	4680      	mov	r8, r0
 8003a60:	b928      	cbnz	r0, 8003a6e <__multadd+0x5a>
 8003a62:	4602      	mov	r2, r0
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <__multadd+0x84>)
 8003a66:	480d      	ldr	r0, [pc, #52]	; (8003a9c <__multadd+0x88>)
 8003a68:	21ba      	movs	r1, #186	; 0xba
 8003a6a:	f000 fcf7 	bl	800445c <__assert_func>
 8003a6e:	6922      	ldr	r2, [r4, #16]
 8003a70:	3202      	adds	r2, #2
 8003a72:	f104 010c 	add.w	r1, r4, #12
 8003a76:	0092      	lsls	r2, r2, #2
 8003a78:	300c      	adds	r0, #12
 8003a7a:	f000 fce1 	bl	8004440 <memcpy>
 8003a7e:	4621      	mov	r1, r4
 8003a80:	4638      	mov	r0, r7
 8003a82:	f7ff ffa5 	bl	80039d0 <_Bfree>
 8003a86:	4644      	mov	r4, r8
 8003a88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003a8c:	3501      	adds	r5, #1
 8003a8e:	615e      	str	r6, [r3, #20]
 8003a90:	6125      	str	r5, [r4, #16]
 8003a92:	4620      	mov	r0, r4
 8003a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a98:	08004aac 	.word	0x08004aac
 8003a9c:	08004ace 	.word	0x08004ace

08003aa0 <__hi0bits>:
 8003aa0:	0c03      	lsrs	r3, r0, #16
 8003aa2:	041b      	lsls	r3, r3, #16
 8003aa4:	b9d3      	cbnz	r3, 8003adc <__hi0bits+0x3c>
 8003aa6:	0400      	lsls	r0, r0, #16
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003aae:	bf04      	itt	eq
 8003ab0:	0200      	lsleq	r0, r0, #8
 8003ab2:	3308      	addeq	r3, #8
 8003ab4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003ab8:	bf04      	itt	eq
 8003aba:	0100      	lsleq	r0, r0, #4
 8003abc:	3304      	addeq	r3, #4
 8003abe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003ac2:	bf04      	itt	eq
 8003ac4:	0080      	lsleq	r0, r0, #2
 8003ac6:	3302      	addeq	r3, #2
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	db05      	blt.n	8003ad8 <__hi0bits+0x38>
 8003acc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003ad0:	f103 0301 	add.w	r3, r3, #1
 8003ad4:	bf08      	it	eq
 8003ad6:	2320      	moveq	r3, #32
 8003ad8:	4618      	mov	r0, r3
 8003ada:	4770      	bx	lr
 8003adc:	2300      	movs	r3, #0
 8003ade:	e7e4      	b.n	8003aaa <__hi0bits+0xa>

08003ae0 <__lo0bits>:
 8003ae0:	6803      	ldr	r3, [r0, #0]
 8003ae2:	f013 0207 	ands.w	r2, r3, #7
 8003ae6:	d00c      	beq.n	8003b02 <__lo0bits+0x22>
 8003ae8:	07d9      	lsls	r1, r3, #31
 8003aea:	d422      	bmi.n	8003b32 <__lo0bits+0x52>
 8003aec:	079a      	lsls	r2, r3, #30
 8003aee:	bf49      	itett	mi
 8003af0:	085b      	lsrmi	r3, r3, #1
 8003af2:	089b      	lsrpl	r3, r3, #2
 8003af4:	6003      	strmi	r3, [r0, #0]
 8003af6:	2201      	movmi	r2, #1
 8003af8:	bf5c      	itt	pl
 8003afa:	6003      	strpl	r3, [r0, #0]
 8003afc:	2202      	movpl	r2, #2
 8003afe:	4610      	mov	r0, r2
 8003b00:	4770      	bx	lr
 8003b02:	b299      	uxth	r1, r3
 8003b04:	b909      	cbnz	r1, 8003b0a <__lo0bits+0x2a>
 8003b06:	0c1b      	lsrs	r3, r3, #16
 8003b08:	2210      	movs	r2, #16
 8003b0a:	b2d9      	uxtb	r1, r3
 8003b0c:	b909      	cbnz	r1, 8003b12 <__lo0bits+0x32>
 8003b0e:	3208      	adds	r2, #8
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	0719      	lsls	r1, r3, #28
 8003b14:	bf04      	itt	eq
 8003b16:	091b      	lsreq	r3, r3, #4
 8003b18:	3204      	addeq	r2, #4
 8003b1a:	0799      	lsls	r1, r3, #30
 8003b1c:	bf04      	itt	eq
 8003b1e:	089b      	lsreq	r3, r3, #2
 8003b20:	3202      	addeq	r2, #2
 8003b22:	07d9      	lsls	r1, r3, #31
 8003b24:	d403      	bmi.n	8003b2e <__lo0bits+0x4e>
 8003b26:	085b      	lsrs	r3, r3, #1
 8003b28:	f102 0201 	add.w	r2, r2, #1
 8003b2c:	d003      	beq.n	8003b36 <__lo0bits+0x56>
 8003b2e:	6003      	str	r3, [r0, #0]
 8003b30:	e7e5      	b.n	8003afe <__lo0bits+0x1e>
 8003b32:	2200      	movs	r2, #0
 8003b34:	e7e3      	b.n	8003afe <__lo0bits+0x1e>
 8003b36:	2220      	movs	r2, #32
 8003b38:	e7e1      	b.n	8003afe <__lo0bits+0x1e>
	...

08003b3c <__i2b>:
 8003b3c:	b510      	push	{r4, lr}
 8003b3e:	460c      	mov	r4, r1
 8003b40:	2101      	movs	r1, #1
 8003b42:	f7ff ff05 	bl	8003950 <_Balloc>
 8003b46:	4602      	mov	r2, r0
 8003b48:	b928      	cbnz	r0, 8003b56 <__i2b+0x1a>
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <__i2b+0x24>)
 8003b4c:	4805      	ldr	r0, [pc, #20]	; (8003b64 <__i2b+0x28>)
 8003b4e:	f240 1145 	movw	r1, #325	; 0x145
 8003b52:	f000 fc83 	bl	800445c <__assert_func>
 8003b56:	2301      	movs	r3, #1
 8003b58:	6144      	str	r4, [r0, #20]
 8003b5a:	6103      	str	r3, [r0, #16]
 8003b5c:	bd10      	pop	{r4, pc}
 8003b5e:	bf00      	nop
 8003b60:	08004aac 	.word	0x08004aac
 8003b64:	08004ace 	.word	0x08004ace

08003b68 <__multiply>:
 8003b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6c:	4691      	mov	r9, r2
 8003b6e:	690a      	ldr	r2, [r1, #16]
 8003b70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	bfb8      	it	lt
 8003b78:	460b      	movlt	r3, r1
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	bfbc      	itt	lt
 8003b7e:	464c      	movlt	r4, r9
 8003b80:	4699      	movlt	r9, r3
 8003b82:	6927      	ldr	r7, [r4, #16]
 8003b84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003b88:	68a3      	ldr	r3, [r4, #8]
 8003b8a:	6861      	ldr	r1, [r4, #4]
 8003b8c:	eb07 060a 	add.w	r6, r7, sl
 8003b90:	42b3      	cmp	r3, r6
 8003b92:	b085      	sub	sp, #20
 8003b94:	bfb8      	it	lt
 8003b96:	3101      	addlt	r1, #1
 8003b98:	f7ff feda 	bl	8003950 <_Balloc>
 8003b9c:	b930      	cbnz	r0, 8003bac <__multiply+0x44>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	4b44      	ldr	r3, [pc, #272]	; (8003cb4 <__multiply+0x14c>)
 8003ba2:	4845      	ldr	r0, [pc, #276]	; (8003cb8 <__multiply+0x150>)
 8003ba4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8003ba8:	f000 fc58 	bl	800445c <__assert_func>
 8003bac:	f100 0514 	add.w	r5, r0, #20
 8003bb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003bb4:	462b      	mov	r3, r5
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	4543      	cmp	r3, r8
 8003bba:	d321      	bcc.n	8003c00 <__multiply+0x98>
 8003bbc:	f104 0314 	add.w	r3, r4, #20
 8003bc0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003bc4:	f109 0314 	add.w	r3, r9, #20
 8003bc8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003bcc:	9202      	str	r2, [sp, #8]
 8003bce:	1b3a      	subs	r2, r7, r4
 8003bd0:	3a15      	subs	r2, #21
 8003bd2:	f022 0203 	bic.w	r2, r2, #3
 8003bd6:	3204      	adds	r2, #4
 8003bd8:	f104 0115 	add.w	r1, r4, #21
 8003bdc:	428f      	cmp	r7, r1
 8003bde:	bf38      	it	cc
 8003be0:	2204      	movcc	r2, #4
 8003be2:	9201      	str	r2, [sp, #4]
 8003be4:	9a02      	ldr	r2, [sp, #8]
 8003be6:	9303      	str	r3, [sp, #12]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d80c      	bhi.n	8003c06 <__multiply+0x9e>
 8003bec:	2e00      	cmp	r6, #0
 8003bee:	dd03      	ble.n	8003bf8 <__multiply+0x90>
 8003bf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d05b      	beq.n	8003cb0 <__multiply+0x148>
 8003bf8:	6106      	str	r6, [r0, #16]
 8003bfa:	b005      	add	sp, #20
 8003bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c00:	f843 2b04 	str.w	r2, [r3], #4
 8003c04:	e7d8      	b.n	8003bb8 <__multiply+0x50>
 8003c06:	f8b3 a000 	ldrh.w	sl, [r3]
 8003c0a:	f1ba 0f00 	cmp.w	sl, #0
 8003c0e:	d024      	beq.n	8003c5a <__multiply+0xf2>
 8003c10:	f104 0e14 	add.w	lr, r4, #20
 8003c14:	46a9      	mov	r9, r5
 8003c16:	f04f 0c00 	mov.w	ip, #0
 8003c1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003c1e:	f8d9 1000 	ldr.w	r1, [r9]
 8003c22:	fa1f fb82 	uxth.w	fp, r2
 8003c26:	b289      	uxth	r1, r1
 8003c28:	fb0a 110b 	mla	r1, sl, fp, r1
 8003c2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003c30:	f8d9 2000 	ldr.w	r2, [r9]
 8003c34:	4461      	add	r1, ip
 8003c36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003c3a:	fb0a c20b 	mla	r2, sl, fp, ip
 8003c3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003c42:	b289      	uxth	r1, r1
 8003c44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003c48:	4577      	cmp	r7, lr
 8003c4a:	f849 1b04 	str.w	r1, [r9], #4
 8003c4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003c52:	d8e2      	bhi.n	8003c1a <__multiply+0xb2>
 8003c54:	9a01      	ldr	r2, [sp, #4]
 8003c56:	f845 c002 	str.w	ip, [r5, r2]
 8003c5a:	9a03      	ldr	r2, [sp, #12]
 8003c5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003c60:	3304      	adds	r3, #4
 8003c62:	f1b9 0f00 	cmp.w	r9, #0
 8003c66:	d021      	beq.n	8003cac <__multiply+0x144>
 8003c68:	6829      	ldr	r1, [r5, #0]
 8003c6a:	f104 0c14 	add.w	ip, r4, #20
 8003c6e:	46ae      	mov	lr, r5
 8003c70:	f04f 0a00 	mov.w	sl, #0
 8003c74:	f8bc b000 	ldrh.w	fp, [ip]
 8003c78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003c7c:	fb09 220b 	mla	r2, r9, fp, r2
 8003c80:	4452      	add	r2, sl
 8003c82:	b289      	uxth	r1, r1
 8003c84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003c88:	f84e 1b04 	str.w	r1, [lr], #4
 8003c8c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8003c90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003c94:	f8be 1000 	ldrh.w	r1, [lr]
 8003c98:	fb09 110a 	mla	r1, r9, sl, r1
 8003c9c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8003ca0:	4567      	cmp	r7, ip
 8003ca2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003ca6:	d8e5      	bhi.n	8003c74 <__multiply+0x10c>
 8003ca8:	9a01      	ldr	r2, [sp, #4]
 8003caa:	50a9      	str	r1, [r5, r2]
 8003cac:	3504      	adds	r5, #4
 8003cae:	e799      	b.n	8003be4 <__multiply+0x7c>
 8003cb0:	3e01      	subs	r6, #1
 8003cb2:	e79b      	b.n	8003bec <__multiply+0x84>
 8003cb4:	08004aac 	.word	0x08004aac
 8003cb8:	08004ace 	.word	0x08004ace

08003cbc <__pow5mult>:
 8003cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc0:	4615      	mov	r5, r2
 8003cc2:	f012 0203 	ands.w	r2, r2, #3
 8003cc6:	4606      	mov	r6, r0
 8003cc8:	460f      	mov	r7, r1
 8003cca:	d007      	beq.n	8003cdc <__pow5mult+0x20>
 8003ccc:	4c25      	ldr	r4, [pc, #148]	; (8003d64 <__pow5mult+0xa8>)
 8003cce:	3a01      	subs	r2, #1
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003cd6:	f7ff fe9d 	bl	8003a14 <__multadd>
 8003cda:	4607      	mov	r7, r0
 8003cdc:	10ad      	asrs	r5, r5, #2
 8003cde:	d03d      	beq.n	8003d5c <__pow5mult+0xa0>
 8003ce0:	69f4      	ldr	r4, [r6, #28]
 8003ce2:	b97c      	cbnz	r4, 8003d04 <__pow5mult+0x48>
 8003ce4:	2010      	movs	r0, #16
 8003ce6:	f7ff fcd1 	bl	800368c <malloc>
 8003cea:	4602      	mov	r2, r0
 8003cec:	61f0      	str	r0, [r6, #28]
 8003cee:	b928      	cbnz	r0, 8003cfc <__pow5mult+0x40>
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <__pow5mult+0xac>)
 8003cf2:	481e      	ldr	r0, [pc, #120]	; (8003d6c <__pow5mult+0xb0>)
 8003cf4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8003cf8:	f000 fbb0 	bl	800445c <__assert_func>
 8003cfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003d00:	6004      	str	r4, [r0, #0]
 8003d02:	60c4      	str	r4, [r0, #12]
 8003d04:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8003d08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003d0c:	b94c      	cbnz	r4, 8003d22 <__pow5mult+0x66>
 8003d0e:	f240 2171 	movw	r1, #625	; 0x271
 8003d12:	4630      	mov	r0, r6
 8003d14:	f7ff ff12 	bl	8003b3c <__i2b>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8003d1e:	4604      	mov	r4, r0
 8003d20:	6003      	str	r3, [r0, #0]
 8003d22:	f04f 0900 	mov.w	r9, #0
 8003d26:	07eb      	lsls	r3, r5, #31
 8003d28:	d50a      	bpl.n	8003d40 <__pow5mult+0x84>
 8003d2a:	4639      	mov	r1, r7
 8003d2c:	4622      	mov	r2, r4
 8003d2e:	4630      	mov	r0, r6
 8003d30:	f7ff ff1a 	bl	8003b68 <__multiply>
 8003d34:	4639      	mov	r1, r7
 8003d36:	4680      	mov	r8, r0
 8003d38:	4630      	mov	r0, r6
 8003d3a:	f7ff fe49 	bl	80039d0 <_Bfree>
 8003d3e:	4647      	mov	r7, r8
 8003d40:	106d      	asrs	r5, r5, #1
 8003d42:	d00b      	beq.n	8003d5c <__pow5mult+0xa0>
 8003d44:	6820      	ldr	r0, [r4, #0]
 8003d46:	b938      	cbnz	r0, 8003d58 <__pow5mult+0x9c>
 8003d48:	4622      	mov	r2, r4
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	4630      	mov	r0, r6
 8003d4e:	f7ff ff0b 	bl	8003b68 <__multiply>
 8003d52:	6020      	str	r0, [r4, #0]
 8003d54:	f8c0 9000 	str.w	r9, [r0]
 8003d58:	4604      	mov	r4, r0
 8003d5a:	e7e4      	b.n	8003d26 <__pow5mult+0x6a>
 8003d5c:	4638      	mov	r0, r7
 8003d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d62:	bf00      	nop
 8003d64:	08004c18 	.word	0x08004c18
 8003d68:	08004a3d 	.word	0x08004a3d
 8003d6c:	08004ace 	.word	0x08004ace

08003d70 <__lshift>:
 8003d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d74:	460c      	mov	r4, r1
 8003d76:	6849      	ldr	r1, [r1, #4]
 8003d78:	6923      	ldr	r3, [r4, #16]
 8003d7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003d7e:	68a3      	ldr	r3, [r4, #8]
 8003d80:	4607      	mov	r7, r0
 8003d82:	4691      	mov	r9, r2
 8003d84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003d88:	f108 0601 	add.w	r6, r8, #1
 8003d8c:	42b3      	cmp	r3, r6
 8003d8e:	db0b      	blt.n	8003da8 <__lshift+0x38>
 8003d90:	4638      	mov	r0, r7
 8003d92:	f7ff fddd 	bl	8003950 <_Balloc>
 8003d96:	4605      	mov	r5, r0
 8003d98:	b948      	cbnz	r0, 8003dae <__lshift+0x3e>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <__lshift+0xd0>)
 8003d9e:	4829      	ldr	r0, [pc, #164]	; (8003e44 <__lshift+0xd4>)
 8003da0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8003da4:	f000 fb5a 	bl	800445c <__assert_func>
 8003da8:	3101      	adds	r1, #1
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	e7ee      	b.n	8003d8c <__lshift+0x1c>
 8003dae:	2300      	movs	r3, #0
 8003db0:	f100 0114 	add.w	r1, r0, #20
 8003db4:	f100 0210 	add.w	r2, r0, #16
 8003db8:	4618      	mov	r0, r3
 8003dba:	4553      	cmp	r3, sl
 8003dbc:	db33      	blt.n	8003e26 <__lshift+0xb6>
 8003dbe:	6920      	ldr	r0, [r4, #16]
 8003dc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003dc4:	f104 0314 	add.w	r3, r4, #20
 8003dc8:	f019 091f 	ands.w	r9, r9, #31
 8003dcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003dd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003dd4:	d02b      	beq.n	8003e2e <__lshift+0xbe>
 8003dd6:	f1c9 0e20 	rsb	lr, r9, #32
 8003dda:	468a      	mov	sl, r1
 8003ddc:	2200      	movs	r2, #0
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	fa00 f009 	lsl.w	r0, r0, r9
 8003de4:	4310      	orrs	r0, r2
 8003de6:	f84a 0b04 	str.w	r0, [sl], #4
 8003dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dee:	459c      	cmp	ip, r3
 8003df0:	fa22 f20e 	lsr.w	r2, r2, lr
 8003df4:	d8f3      	bhi.n	8003dde <__lshift+0x6e>
 8003df6:	ebac 0304 	sub.w	r3, ip, r4
 8003dfa:	3b15      	subs	r3, #21
 8003dfc:	f023 0303 	bic.w	r3, r3, #3
 8003e00:	3304      	adds	r3, #4
 8003e02:	f104 0015 	add.w	r0, r4, #21
 8003e06:	4584      	cmp	ip, r0
 8003e08:	bf38      	it	cc
 8003e0a:	2304      	movcc	r3, #4
 8003e0c:	50ca      	str	r2, [r1, r3]
 8003e0e:	b10a      	cbz	r2, 8003e14 <__lshift+0xa4>
 8003e10:	f108 0602 	add.w	r6, r8, #2
 8003e14:	3e01      	subs	r6, #1
 8003e16:	4638      	mov	r0, r7
 8003e18:	612e      	str	r6, [r5, #16]
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	f7ff fdd8 	bl	80039d0 <_Bfree>
 8003e20:	4628      	mov	r0, r5
 8003e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e26:	f842 0f04 	str.w	r0, [r2, #4]!
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	e7c5      	b.n	8003dba <__lshift+0x4a>
 8003e2e:	3904      	subs	r1, #4
 8003e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e34:	f841 2f04 	str.w	r2, [r1, #4]!
 8003e38:	459c      	cmp	ip, r3
 8003e3a:	d8f9      	bhi.n	8003e30 <__lshift+0xc0>
 8003e3c:	e7ea      	b.n	8003e14 <__lshift+0xa4>
 8003e3e:	bf00      	nop
 8003e40:	08004aac 	.word	0x08004aac
 8003e44:	08004ace 	.word	0x08004ace

08003e48 <__mcmp>:
 8003e48:	b530      	push	{r4, r5, lr}
 8003e4a:	6902      	ldr	r2, [r0, #16]
 8003e4c:	690c      	ldr	r4, [r1, #16]
 8003e4e:	1b12      	subs	r2, r2, r4
 8003e50:	d10e      	bne.n	8003e70 <__mcmp+0x28>
 8003e52:	f100 0314 	add.w	r3, r0, #20
 8003e56:	3114      	adds	r1, #20
 8003e58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003e5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003e60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003e64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003e68:	42a5      	cmp	r5, r4
 8003e6a:	d003      	beq.n	8003e74 <__mcmp+0x2c>
 8003e6c:	d305      	bcc.n	8003e7a <__mcmp+0x32>
 8003e6e:	2201      	movs	r2, #1
 8003e70:	4610      	mov	r0, r2
 8003e72:	bd30      	pop	{r4, r5, pc}
 8003e74:	4283      	cmp	r3, r0
 8003e76:	d3f3      	bcc.n	8003e60 <__mcmp+0x18>
 8003e78:	e7fa      	b.n	8003e70 <__mcmp+0x28>
 8003e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e7e:	e7f7      	b.n	8003e70 <__mcmp+0x28>

08003e80 <__mdiff>:
 8003e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e84:	460c      	mov	r4, r1
 8003e86:	4606      	mov	r6, r0
 8003e88:	4611      	mov	r1, r2
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	4690      	mov	r8, r2
 8003e8e:	f7ff ffdb 	bl	8003e48 <__mcmp>
 8003e92:	1e05      	subs	r5, r0, #0
 8003e94:	d110      	bne.n	8003eb8 <__mdiff+0x38>
 8003e96:	4629      	mov	r1, r5
 8003e98:	4630      	mov	r0, r6
 8003e9a:	f7ff fd59 	bl	8003950 <_Balloc>
 8003e9e:	b930      	cbnz	r0, 8003eae <__mdiff+0x2e>
 8003ea0:	4b3a      	ldr	r3, [pc, #232]	; (8003f8c <__mdiff+0x10c>)
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	f240 2137 	movw	r1, #567	; 0x237
 8003ea8:	4839      	ldr	r0, [pc, #228]	; (8003f90 <__mdiff+0x110>)
 8003eaa:	f000 fad7 	bl	800445c <__assert_func>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003eb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb8:	bfa4      	itt	ge
 8003eba:	4643      	movge	r3, r8
 8003ebc:	46a0      	movge	r8, r4
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003ec4:	bfa6      	itte	ge
 8003ec6:	461c      	movge	r4, r3
 8003ec8:	2500      	movge	r5, #0
 8003eca:	2501      	movlt	r5, #1
 8003ecc:	f7ff fd40 	bl	8003950 <_Balloc>
 8003ed0:	b920      	cbnz	r0, 8003edc <__mdiff+0x5c>
 8003ed2:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <__mdiff+0x10c>)
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	f240 2145 	movw	r1, #581	; 0x245
 8003eda:	e7e5      	b.n	8003ea8 <__mdiff+0x28>
 8003edc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003ee0:	6926      	ldr	r6, [r4, #16]
 8003ee2:	60c5      	str	r5, [r0, #12]
 8003ee4:	f104 0914 	add.w	r9, r4, #20
 8003ee8:	f108 0514 	add.w	r5, r8, #20
 8003eec:	f100 0e14 	add.w	lr, r0, #20
 8003ef0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8003ef4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003ef8:	f108 0210 	add.w	r2, r8, #16
 8003efc:	46f2      	mov	sl, lr
 8003efe:	2100      	movs	r1, #0
 8003f00:	f859 3b04 	ldr.w	r3, [r9], #4
 8003f04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8003f08:	fa11 f88b 	uxtah	r8, r1, fp
 8003f0c:	b299      	uxth	r1, r3
 8003f0e:	0c1b      	lsrs	r3, r3, #16
 8003f10:	eba8 0801 	sub.w	r8, r8, r1
 8003f14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003f18:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8003f1c:	fa1f f888 	uxth.w	r8, r8
 8003f20:	1419      	asrs	r1, r3, #16
 8003f22:	454e      	cmp	r6, r9
 8003f24:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8003f28:	f84a 3b04 	str.w	r3, [sl], #4
 8003f2c:	d8e8      	bhi.n	8003f00 <__mdiff+0x80>
 8003f2e:	1b33      	subs	r3, r6, r4
 8003f30:	3b15      	subs	r3, #21
 8003f32:	f023 0303 	bic.w	r3, r3, #3
 8003f36:	3304      	adds	r3, #4
 8003f38:	3415      	adds	r4, #21
 8003f3a:	42a6      	cmp	r6, r4
 8003f3c:	bf38      	it	cc
 8003f3e:	2304      	movcc	r3, #4
 8003f40:	441d      	add	r5, r3
 8003f42:	4473      	add	r3, lr
 8003f44:	469e      	mov	lr, r3
 8003f46:	462e      	mov	r6, r5
 8003f48:	4566      	cmp	r6, ip
 8003f4a:	d30e      	bcc.n	8003f6a <__mdiff+0xea>
 8003f4c:	f10c 0203 	add.w	r2, ip, #3
 8003f50:	1b52      	subs	r2, r2, r5
 8003f52:	f022 0203 	bic.w	r2, r2, #3
 8003f56:	3d03      	subs	r5, #3
 8003f58:	45ac      	cmp	ip, r5
 8003f5a:	bf38      	it	cc
 8003f5c:	2200      	movcc	r2, #0
 8003f5e:	4413      	add	r3, r2
 8003f60:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003f64:	b17a      	cbz	r2, 8003f86 <__mdiff+0x106>
 8003f66:	6107      	str	r7, [r0, #16]
 8003f68:	e7a4      	b.n	8003eb4 <__mdiff+0x34>
 8003f6a:	f856 8b04 	ldr.w	r8, [r6], #4
 8003f6e:	fa11 f288 	uxtah	r2, r1, r8
 8003f72:	1414      	asrs	r4, r2, #16
 8003f74:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8003f78:	b292      	uxth	r2, r2
 8003f7a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003f7e:	f84e 2b04 	str.w	r2, [lr], #4
 8003f82:	1421      	asrs	r1, r4, #16
 8003f84:	e7e0      	b.n	8003f48 <__mdiff+0xc8>
 8003f86:	3f01      	subs	r7, #1
 8003f88:	e7ea      	b.n	8003f60 <__mdiff+0xe0>
 8003f8a:	bf00      	nop
 8003f8c:	08004aac 	.word	0x08004aac
 8003f90:	08004ace 	.word	0x08004ace

08003f94 <__d2b>:
 8003f94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003f98:	460f      	mov	r7, r1
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	ec59 8b10 	vmov	r8, r9, d0
 8003fa0:	4616      	mov	r6, r2
 8003fa2:	f7ff fcd5 	bl	8003950 <_Balloc>
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	b930      	cbnz	r0, 8003fb8 <__d2b+0x24>
 8003faa:	4602      	mov	r2, r0
 8003fac:	4b24      	ldr	r3, [pc, #144]	; (8004040 <__d2b+0xac>)
 8003fae:	4825      	ldr	r0, [pc, #148]	; (8004044 <__d2b+0xb0>)
 8003fb0:	f240 310f 	movw	r1, #783	; 0x30f
 8003fb4:	f000 fa52 	bl	800445c <__assert_func>
 8003fb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003fbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003fc0:	bb2d      	cbnz	r5, 800400e <__d2b+0x7a>
 8003fc2:	9301      	str	r3, [sp, #4]
 8003fc4:	f1b8 0300 	subs.w	r3, r8, #0
 8003fc8:	d026      	beq.n	8004018 <__d2b+0x84>
 8003fca:	4668      	mov	r0, sp
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	f7ff fd87 	bl	8003ae0 <__lo0bits>
 8003fd2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003fd6:	b1e8      	cbz	r0, 8004014 <__d2b+0x80>
 8003fd8:	f1c0 0320 	rsb	r3, r0, #32
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	40c2      	lsrs	r2, r0
 8003fe4:	6163      	str	r3, [r4, #20]
 8003fe6:	9201      	str	r2, [sp, #4]
 8003fe8:	9b01      	ldr	r3, [sp, #4]
 8003fea:	61a3      	str	r3, [r4, #24]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	bf14      	ite	ne
 8003ff0:	2202      	movne	r2, #2
 8003ff2:	2201      	moveq	r2, #1
 8003ff4:	6122      	str	r2, [r4, #16]
 8003ff6:	b1bd      	cbz	r5, 8004028 <__d2b+0x94>
 8003ff8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003ffc:	4405      	add	r5, r0
 8003ffe:	603d      	str	r5, [r7, #0]
 8004000:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004004:	6030      	str	r0, [r6, #0]
 8004006:	4620      	mov	r0, r4
 8004008:	b003      	add	sp, #12
 800400a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800400e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004012:	e7d6      	b.n	8003fc2 <__d2b+0x2e>
 8004014:	6161      	str	r1, [r4, #20]
 8004016:	e7e7      	b.n	8003fe8 <__d2b+0x54>
 8004018:	a801      	add	r0, sp, #4
 800401a:	f7ff fd61 	bl	8003ae0 <__lo0bits>
 800401e:	9b01      	ldr	r3, [sp, #4]
 8004020:	6163      	str	r3, [r4, #20]
 8004022:	3020      	adds	r0, #32
 8004024:	2201      	movs	r2, #1
 8004026:	e7e5      	b.n	8003ff4 <__d2b+0x60>
 8004028:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800402c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004030:	6038      	str	r0, [r7, #0]
 8004032:	6918      	ldr	r0, [r3, #16]
 8004034:	f7ff fd34 	bl	8003aa0 <__hi0bits>
 8004038:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800403c:	e7e2      	b.n	8004004 <__d2b+0x70>
 800403e:	bf00      	nop
 8004040:	08004aac 	.word	0x08004aac
 8004044:	08004ace 	.word	0x08004ace

08004048 <__sread>:
 8004048:	b510      	push	{r4, lr}
 800404a:	460c      	mov	r4, r1
 800404c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004050:	f000 f9c2 	bl	80043d8 <_read_r>
 8004054:	2800      	cmp	r0, #0
 8004056:	bfab      	itete	ge
 8004058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800405a:	89a3      	ldrhlt	r3, [r4, #12]
 800405c:	181b      	addge	r3, r3, r0
 800405e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004062:	bfac      	ite	ge
 8004064:	6563      	strge	r3, [r4, #84]	; 0x54
 8004066:	81a3      	strhlt	r3, [r4, #12]
 8004068:	bd10      	pop	{r4, pc}

0800406a <__swrite>:
 800406a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800406e:	461f      	mov	r7, r3
 8004070:	898b      	ldrh	r3, [r1, #12]
 8004072:	05db      	lsls	r3, r3, #23
 8004074:	4605      	mov	r5, r0
 8004076:	460c      	mov	r4, r1
 8004078:	4616      	mov	r6, r2
 800407a:	d505      	bpl.n	8004088 <__swrite+0x1e>
 800407c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004080:	2302      	movs	r3, #2
 8004082:	2200      	movs	r2, #0
 8004084:	f000 f996 	bl	80043b4 <_lseek_r>
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800408e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004092:	81a3      	strh	r3, [r4, #12]
 8004094:	4632      	mov	r2, r6
 8004096:	463b      	mov	r3, r7
 8004098:	4628      	mov	r0, r5
 800409a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800409e:	f000 b9bd 	b.w	800441c <_write_r>

080040a2 <__sseek>:
 80040a2:	b510      	push	{r4, lr}
 80040a4:	460c      	mov	r4, r1
 80040a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040aa:	f000 f983 	bl	80043b4 <_lseek_r>
 80040ae:	1c43      	adds	r3, r0, #1
 80040b0:	89a3      	ldrh	r3, [r4, #12]
 80040b2:	bf15      	itete	ne
 80040b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80040b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80040ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040be:	81a3      	strheq	r3, [r4, #12]
 80040c0:	bf18      	it	ne
 80040c2:	81a3      	strhne	r3, [r4, #12]
 80040c4:	bd10      	pop	{r4, pc}

080040c6 <__sclose>:
 80040c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ca:	f000 b941 	b.w	8004350 <_close_r>

080040ce <_realloc_r>:
 80040ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040d2:	4680      	mov	r8, r0
 80040d4:	4614      	mov	r4, r2
 80040d6:	460e      	mov	r6, r1
 80040d8:	b921      	cbnz	r1, 80040e4 <_realloc_r+0x16>
 80040da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040de:	4611      	mov	r1, r2
 80040e0:	f7ff bafc 	b.w	80036dc <_malloc_r>
 80040e4:	b92a      	cbnz	r2, 80040f2 <_realloc_r+0x24>
 80040e6:	f000 f9ed 	bl	80044c4 <_free_r>
 80040ea:	4625      	mov	r5, r4
 80040ec:	4628      	mov	r0, r5
 80040ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040f2:	f000 fa45 	bl	8004580 <_malloc_usable_size_r>
 80040f6:	4284      	cmp	r4, r0
 80040f8:	4607      	mov	r7, r0
 80040fa:	d802      	bhi.n	8004102 <_realloc_r+0x34>
 80040fc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004100:	d812      	bhi.n	8004128 <_realloc_r+0x5a>
 8004102:	4621      	mov	r1, r4
 8004104:	4640      	mov	r0, r8
 8004106:	f7ff fae9 	bl	80036dc <_malloc_r>
 800410a:	4605      	mov	r5, r0
 800410c:	2800      	cmp	r0, #0
 800410e:	d0ed      	beq.n	80040ec <_realloc_r+0x1e>
 8004110:	42bc      	cmp	r4, r7
 8004112:	4622      	mov	r2, r4
 8004114:	4631      	mov	r1, r6
 8004116:	bf28      	it	cs
 8004118:	463a      	movcs	r2, r7
 800411a:	f000 f991 	bl	8004440 <memcpy>
 800411e:	4631      	mov	r1, r6
 8004120:	4640      	mov	r0, r8
 8004122:	f000 f9cf 	bl	80044c4 <_free_r>
 8004126:	e7e1      	b.n	80040ec <_realloc_r+0x1e>
 8004128:	4635      	mov	r5, r6
 800412a:	e7df      	b.n	80040ec <_realloc_r+0x1e>

0800412c <__swbuf_r>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	460e      	mov	r6, r1
 8004130:	4614      	mov	r4, r2
 8004132:	4605      	mov	r5, r0
 8004134:	b118      	cbz	r0, 800413e <__swbuf_r+0x12>
 8004136:	6a03      	ldr	r3, [r0, #32]
 8004138:	b90b      	cbnz	r3, 800413e <__swbuf_r+0x12>
 800413a:	f7fe f8b3 	bl	80022a4 <__sinit>
 800413e:	69a3      	ldr	r3, [r4, #24]
 8004140:	60a3      	str	r3, [r4, #8]
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	071a      	lsls	r2, r3, #28
 8004146:	d525      	bpl.n	8004194 <__swbuf_r+0x68>
 8004148:	6923      	ldr	r3, [r4, #16]
 800414a:	b31b      	cbz	r3, 8004194 <__swbuf_r+0x68>
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	6922      	ldr	r2, [r4, #16]
 8004150:	1a98      	subs	r0, r3, r2
 8004152:	6963      	ldr	r3, [r4, #20]
 8004154:	b2f6      	uxtb	r6, r6
 8004156:	4283      	cmp	r3, r0
 8004158:	4637      	mov	r7, r6
 800415a:	dc04      	bgt.n	8004166 <__swbuf_r+0x3a>
 800415c:	4621      	mov	r1, r4
 800415e:	4628      	mov	r0, r5
 8004160:	f7ff fbc2 	bl	80038e8 <_fflush_r>
 8004164:	b9e0      	cbnz	r0, 80041a0 <__swbuf_r+0x74>
 8004166:	68a3      	ldr	r3, [r4, #8]
 8004168:	3b01      	subs	r3, #1
 800416a:	60a3      	str	r3, [r4, #8]
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	6022      	str	r2, [r4, #0]
 8004172:	701e      	strb	r6, [r3, #0]
 8004174:	6962      	ldr	r2, [r4, #20]
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	429a      	cmp	r2, r3
 800417a:	d004      	beq.n	8004186 <__swbuf_r+0x5a>
 800417c:	89a3      	ldrh	r3, [r4, #12]
 800417e:	07db      	lsls	r3, r3, #31
 8004180:	d506      	bpl.n	8004190 <__swbuf_r+0x64>
 8004182:	2e0a      	cmp	r6, #10
 8004184:	d104      	bne.n	8004190 <__swbuf_r+0x64>
 8004186:	4621      	mov	r1, r4
 8004188:	4628      	mov	r0, r5
 800418a:	f7ff fbad 	bl	80038e8 <_fflush_r>
 800418e:	b938      	cbnz	r0, 80041a0 <__swbuf_r+0x74>
 8004190:	4638      	mov	r0, r7
 8004192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004194:	4621      	mov	r1, r4
 8004196:	4628      	mov	r0, r5
 8004198:	f000 f806 	bl	80041a8 <__swsetup_r>
 800419c:	2800      	cmp	r0, #0
 800419e:	d0d5      	beq.n	800414c <__swbuf_r+0x20>
 80041a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80041a4:	e7f4      	b.n	8004190 <__swbuf_r+0x64>
	...

080041a8 <__swsetup_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4b2a      	ldr	r3, [pc, #168]	; (8004254 <__swsetup_r+0xac>)
 80041ac:	4605      	mov	r5, r0
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	460c      	mov	r4, r1
 80041b2:	b118      	cbz	r0, 80041bc <__swsetup_r+0x14>
 80041b4:	6a03      	ldr	r3, [r0, #32]
 80041b6:	b90b      	cbnz	r3, 80041bc <__swsetup_r+0x14>
 80041b8:	f7fe f874 	bl	80022a4 <__sinit>
 80041bc:	89a3      	ldrh	r3, [r4, #12]
 80041be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041c2:	0718      	lsls	r0, r3, #28
 80041c4:	d422      	bmi.n	800420c <__swsetup_r+0x64>
 80041c6:	06d9      	lsls	r1, r3, #27
 80041c8:	d407      	bmi.n	80041da <__swsetup_r+0x32>
 80041ca:	2309      	movs	r3, #9
 80041cc:	602b      	str	r3, [r5, #0]
 80041ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041d2:	81a3      	strh	r3, [r4, #12]
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041d8:	e034      	b.n	8004244 <__swsetup_r+0x9c>
 80041da:	0758      	lsls	r0, r3, #29
 80041dc:	d512      	bpl.n	8004204 <__swsetup_r+0x5c>
 80041de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041e0:	b141      	cbz	r1, 80041f4 <__swsetup_r+0x4c>
 80041e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041e6:	4299      	cmp	r1, r3
 80041e8:	d002      	beq.n	80041f0 <__swsetup_r+0x48>
 80041ea:	4628      	mov	r0, r5
 80041ec:	f000 f96a 	bl	80044c4 <_free_r>
 80041f0:	2300      	movs	r3, #0
 80041f2:	6363      	str	r3, [r4, #52]	; 0x34
 80041f4:	89a3      	ldrh	r3, [r4, #12]
 80041f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041fa:	81a3      	strh	r3, [r4, #12]
 80041fc:	2300      	movs	r3, #0
 80041fe:	6063      	str	r3, [r4, #4]
 8004200:	6923      	ldr	r3, [r4, #16]
 8004202:	6023      	str	r3, [r4, #0]
 8004204:	89a3      	ldrh	r3, [r4, #12]
 8004206:	f043 0308 	orr.w	r3, r3, #8
 800420a:	81a3      	strh	r3, [r4, #12]
 800420c:	6923      	ldr	r3, [r4, #16]
 800420e:	b94b      	cbnz	r3, 8004224 <__swsetup_r+0x7c>
 8004210:	89a3      	ldrh	r3, [r4, #12]
 8004212:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800421a:	d003      	beq.n	8004224 <__swsetup_r+0x7c>
 800421c:	4621      	mov	r1, r4
 800421e:	4628      	mov	r0, r5
 8004220:	f000 f840 	bl	80042a4 <__smakebuf_r>
 8004224:	89a0      	ldrh	r0, [r4, #12]
 8004226:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800422a:	f010 0301 	ands.w	r3, r0, #1
 800422e:	d00a      	beq.n	8004246 <__swsetup_r+0x9e>
 8004230:	2300      	movs	r3, #0
 8004232:	60a3      	str	r3, [r4, #8]
 8004234:	6963      	ldr	r3, [r4, #20]
 8004236:	425b      	negs	r3, r3
 8004238:	61a3      	str	r3, [r4, #24]
 800423a:	6923      	ldr	r3, [r4, #16]
 800423c:	b943      	cbnz	r3, 8004250 <__swsetup_r+0xa8>
 800423e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004242:	d1c4      	bne.n	80041ce <__swsetup_r+0x26>
 8004244:	bd38      	pop	{r3, r4, r5, pc}
 8004246:	0781      	lsls	r1, r0, #30
 8004248:	bf58      	it	pl
 800424a:	6963      	ldrpl	r3, [r4, #20]
 800424c:	60a3      	str	r3, [r4, #8]
 800424e:	e7f4      	b.n	800423a <__swsetup_r+0x92>
 8004250:	2000      	movs	r0, #0
 8004252:	e7f7      	b.n	8004244 <__swsetup_r+0x9c>
 8004254:	20000060 	.word	0x20000060

08004258 <__swhatbuf_r>:
 8004258:	b570      	push	{r4, r5, r6, lr}
 800425a:	460c      	mov	r4, r1
 800425c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004260:	2900      	cmp	r1, #0
 8004262:	b096      	sub	sp, #88	; 0x58
 8004264:	4615      	mov	r5, r2
 8004266:	461e      	mov	r6, r3
 8004268:	da0d      	bge.n	8004286 <__swhatbuf_r+0x2e>
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004270:	f04f 0100 	mov.w	r1, #0
 8004274:	bf0c      	ite	eq
 8004276:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800427a:	2340      	movne	r3, #64	; 0x40
 800427c:	2000      	movs	r0, #0
 800427e:	6031      	str	r1, [r6, #0]
 8004280:	602b      	str	r3, [r5, #0]
 8004282:	b016      	add	sp, #88	; 0x58
 8004284:	bd70      	pop	{r4, r5, r6, pc}
 8004286:	466a      	mov	r2, sp
 8004288:	f000 f872 	bl	8004370 <_fstat_r>
 800428c:	2800      	cmp	r0, #0
 800428e:	dbec      	blt.n	800426a <__swhatbuf_r+0x12>
 8004290:	9901      	ldr	r1, [sp, #4]
 8004292:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004296:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800429a:	4259      	negs	r1, r3
 800429c:	4159      	adcs	r1, r3
 800429e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042a2:	e7eb      	b.n	800427c <__swhatbuf_r+0x24>

080042a4 <__smakebuf_r>:
 80042a4:	898b      	ldrh	r3, [r1, #12]
 80042a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042a8:	079d      	lsls	r5, r3, #30
 80042aa:	4606      	mov	r6, r0
 80042ac:	460c      	mov	r4, r1
 80042ae:	d507      	bpl.n	80042c0 <__smakebuf_r+0x1c>
 80042b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042b4:	6023      	str	r3, [r4, #0]
 80042b6:	6123      	str	r3, [r4, #16]
 80042b8:	2301      	movs	r3, #1
 80042ba:	6163      	str	r3, [r4, #20]
 80042bc:	b002      	add	sp, #8
 80042be:	bd70      	pop	{r4, r5, r6, pc}
 80042c0:	ab01      	add	r3, sp, #4
 80042c2:	466a      	mov	r2, sp
 80042c4:	f7ff ffc8 	bl	8004258 <__swhatbuf_r>
 80042c8:	9900      	ldr	r1, [sp, #0]
 80042ca:	4605      	mov	r5, r0
 80042cc:	4630      	mov	r0, r6
 80042ce:	f7ff fa05 	bl	80036dc <_malloc_r>
 80042d2:	b948      	cbnz	r0, 80042e8 <__smakebuf_r+0x44>
 80042d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042d8:	059a      	lsls	r2, r3, #22
 80042da:	d4ef      	bmi.n	80042bc <__smakebuf_r+0x18>
 80042dc:	f023 0303 	bic.w	r3, r3, #3
 80042e0:	f043 0302 	orr.w	r3, r3, #2
 80042e4:	81a3      	strh	r3, [r4, #12]
 80042e6:	e7e3      	b.n	80042b0 <__smakebuf_r+0xc>
 80042e8:	89a3      	ldrh	r3, [r4, #12]
 80042ea:	6020      	str	r0, [r4, #0]
 80042ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f0:	81a3      	strh	r3, [r4, #12]
 80042f2:	9b00      	ldr	r3, [sp, #0]
 80042f4:	6163      	str	r3, [r4, #20]
 80042f6:	9b01      	ldr	r3, [sp, #4]
 80042f8:	6120      	str	r0, [r4, #16]
 80042fa:	b15b      	cbz	r3, 8004314 <__smakebuf_r+0x70>
 80042fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004300:	4630      	mov	r0, r6
 8004302:	f000 f847 	bl	8004394 <_isatty_r>
 8004306:	b128      	cbz	r0, 8004314 <__smakebuf_r+0x70>
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	f023 0303 	bic.w	r3, r3, #3
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	81a3      	strh	r3, [r4, #12]
 8004314:	89a3      	ldrh	r3, [r4, #12]
 8004316:	431d      	orrs	r5, r3
 8004318:	81a5      	strh	r5, [r4, #12]
 800431a:	e7cf      	b.n	80042bc <__smakebuf_r+0x18>

0800431c <memmove>:
 800431c:	4288      	cmp	r0, r1
 800431e:	b510      	push	{r4, lr}
 8004320:	eb01 0402 	add.w	r4, r1, r2
 8004324:	d902      	bls.n	800432c <memmove+0x10>
 8004326:	4284      	cmp	r4, r0
 8004328:	4623      	mov	r3, r4
 800432a:	d807      	bhi.n	800433c <memmove+0x20>
 800432c:	1e43      	subs	r3, r0, #1
 800432e:	42a1      	cmp	r1, r4
 8004330:	d008      	beq.n	8004344 <memmove+0x28>
 8004332:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004336:	f803 2f01 	strb.w	r2, [r3, #1]!
 800433a:	e7f8      	b.n	800432e <memmove+0x12>
 800433c:	4402      	add	r2, r0
 800433e:	4601      	mov	r1, r0
 8004340:	428a      	cmp	r2, r1
 8004342:	d100      	bne.n	8004346 <memmove+0x2a>
 8004344:	bd10      	pop	{r4, pc}
 8004346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800434a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800434e:	e7f7      	b.n	8004340 <memmove+0x24>

08004350 <_close_r>:
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	4d06      	ldr	r5, [pc, #24]	; (800436c <_close_r+0x1c>)
 8004354:	2300      	movs	r3, #0
 8004356:	4604      	mov	r4, r0
 8004358:	4608      	mov	r0, r1
 800435a:	602b      	str	r3, [r5, #0]
 800435c:	f7fd f9a9 	bl	80016b2 <_close>
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d102      	bne.n	800436a <_close_r+0x1a>
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	b103      	cbz	r3, 800436a <_close_r+0x1a>
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	bd38      	pop	{r3, r4, r5, pc}
 800436c:	20000348 	.word	0x20000348

08004370 <_fstat_r>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	4d07      	ldr	r5, [pc, #28]	; (8004390 <_fstat_r+0x20>)
 8004374:	2300      	movs	r3, #0
 8004376:	4604      	mov	r4, r0
 8004378:	4608      	mov	r0, r1
 800437a:	4611      	mov	r1, r2
 800437c:	602b      	str	r3, [r5, #0]
 800437e:	f7fd f9a4 	bl	80016ca <_fstat>
 8004382:	1c43      	adds	r3, r0, #1
 8004384:	d102      	bne.n	800438c <_fstat_r+0x1c>
 8004386:	682b      	ldr	r3, [r5, #0]
 8004388:	b103      	cbz	r3, 800438c <_fstat_r+0x1c>
 800438a:	6023      	str	r3, [r4, #0]
 800438c:	bd38      	pop	{r3, r4, r5, pc}
 800438e:	bf00      	nop
 8004390:	20000348 	.word	0x20000348

08004394 <_isatty_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4d06      	ldr	r5, [pc, #24]	; (80043b0 <_isatty_r+0x1c>)
 8004398:	2300      	movs	r3, #0
 800439a:	4604      	mov	r4, r0
 800439c:	4608      	mov	r0, r1
 800439e:	602b      	str	r3, [r5, #0]
 80043a0:	f7fd f9a3 	bl	80016ea <_isatty>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d102      	bne.n	80043ae <_isatty_r+0x1a>
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	b103      	cbz	r3, 80043ae <_isatty_r+0x1a>
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	20000348 	.word	0x20000348

080043b4 <_lseek_r>:
 80043b4:	b538      	push	{r3, r4, r5, lr}
 80043b6:	4d07      	ldr	r5, [pc, #28]	; (80043d4 <_lseek_r+0x20>)
 80043b8:	4604      	mov	r4, r0
 80043ba:	4608      	mov	r0, r1
 80043bc:	4611      	mov	r1, r2
 80043be:	2200      	movs	r2, #0
 80043c0:	602a      	str	r2, [r5, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	f7fd f99c 	bl	8001700 <_lseek>
 80043c8:	1c43      	adds	r3, r0, #1
 80043ca:	d102      	bne.n	80043d2 <_lseek_r+0x1e>
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	b103      	cbz	r3, 80043d2 <_lseek_r+0x1e>
 80043d0:	6023      	str	r3, [r4, #0]
 80043d2:	bd38      	pop	{r3, r4, r5, pc}
 80043d4:	20000348 	.word	0x20000348

080043d8 <_read_r>:
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	4d07      	ldr	r5, [pc, #28]	; (80043f8 <_read_r+0x20>)
 80043dc:	4604      	mov	r4, r0
 80043de:	4608      	mov	r0, r1
 80043e0:	4611      	mov	r1, r2
 80043e2:	2200      	movs	r2, #0
 80043e4:	602a      	str	r2, [r5, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	f7fd f946 	bl	8001678 <_read>
 80043ec:	1c43      	adds	r3, r0, #1
 80043ee:	d102      	bne.n	80043f6 <_read_r+0x1e>
 80043f0:	682b      	ldr	r3, [r5, #0]
 80043f2:	b103      	cbz	r3, 80043f6 <_read_r+0x1e>
 80043f4:	6023      	str	r3, [r4, #0]
 80043f6:	bd38      	pop	{r3, r4, r5, pc}
 80043f8:	20000348 	.word	0x20000348

080043fc <_sbrk_r>:
 80043fc:	b538      	push	{r3, r4, r5, lr}
 80043fe:	4d06      	ldr	r5, [pc, #24]	; (8004418 <_sbrk_r+0x1c>)
 8004400:	2300      	movs	r3, #0
 8004402:	4604      	mov	r4, r0
 8004404:	4608      	mov	r0, r1
 8004406:	602b      	str	r3, [r5, #0]
 8004408:	f7fd f988 	bl	800171c <_sbrk>
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	d102      	bne.n	8004416 <_sbrk_r+0x1a>
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	b103      	cbz	r3, 8004416 <_sbrk_r+0x1a>
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	bd38      	pop	{r3, r4, r5, pc}
 8004418:	20000348 	.word	0x20000348

0800441c <_write_r>:
 800441c:	b538      	push	{r3, r4, r5, lr}
 800441e:	4d07      	ldr	r5, [pc, #28]	; (800443c <_write_r+0x20>)
 8004420:	4604      	mov	r4, r0
 8004422:	4608      	mov	r0, r1
 8004424:	4611      	mov	r1, r2
 8004426:	2200      	movs	r2, #0
 8004428:	602a      	str	r2, [r5, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	f7fc fe62 	bl	80010f4 <_write>
 8004430:	1c43      	adds	r3, r0, #1
 8004432:	d102      	bne.n	800443a <_write_r+0x1e>
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	b103      	cbz	r3, 800443a <_write_r+0x1e>
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	bd38      	pop	{r3, r4, r5, pc}
 800443c:	20000348 	.word	0x20000348

08004440 <memcpy>:
 8004440:	440a      	add	r2, r1
 8004442:	4291      	cmp	r1, r2
 8004444:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004448:	d100      	bne.n	800444c <memcpy+0xc>
 800444a:	4770      	bx	lr
 800444c:	b510      	push	{r4, lr}
 800444e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004452:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004456:	4291      	cmp	r1, r2
 8004458:	d1f9      	bne.n	800444e <memcpy+0xe>
 800445a:	bd10      	pop	{r4, pc}

0800445c <__assert_func>:
 800445c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800445e:	4614      	mov	r4, r2
 8004460:	461a      	mov	r2, r3
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <__assert_func+0x2c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4605      	mov	r5, r0
 8004468:	68d8      	ldr	r0, [r3, #12]
 800446a:	b14c      	cbz	r4, 8004480 <__assert_func+0x24>
 800446c:	4b07      	ldr	r3, [pc, #28]	; (800448c <__assert_func+0x30>)
 800446e:	9100      	str	r1, [sp, #0]
 8004470:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004474:	4906      	ldr	r1, [pc, #24]	; (8004490 <__assert_func+0x34>)
 8004476:	462b      	mov	r3, r5
 8004478:	f000 f88a 	bl	8004590 <fiprintf>
 800447c:	f000 f8a7 	bl	80045ce <abort>
 8004480:	4b04      	ldr	r3, [pc, #16]	; (8004494 <__assert_func+0x38>)
 8004482:	461c      	mov	r4, r3
 8004484:	e7f3      	b.n	800446e <__assert_func+0x12>
 8004486:	bf00      	nop
 8004488:	20000060 	.word	0x20000060
 800448c:	08004d2f 	.word	0x08004d2f
 8004490:	08004d3c 	.word	0x08004d3c
 8004494:	08004d6a 	.word	0x08004d6a

08004498 <_calloc_r>:
 8004498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800449a:	fba1 2402 	umull	r2, r4, r1, r2
 800449e:	b94c      	cbnz	r4, 80044b4 <_calloc_r+0x1c>
 80044a0:	4611      	mov	r1, r2
 80044a2:	9201      	str	r2, [sp, #4]
 80044a4:	f7ff f91a 	bl	80036dc <_malloc_r>
 80044a8:	9a01      	ldr	r2, [sp, #4]
 80044aa:	4605      	mov	r5, r0
 80044ac:	b930      	cbnz	r0, 80044bc <_calloc_r+0x24>
 80044ae:	4628      	mov	r0, r5
 80044b0:	b003      	add	sp, #12
 80044b2:	bd30      	pop	{r4, r5, pc}
 80044b4:	220c      	movs	r2, #12
 80044b6:	6002      	str	r2, [r0, #0]
 80044b8:	2500      	movs	r5, #0
 80044ba:	e7f8      	b.n	80044ae <_calloc_r+0x16>
 80044bc:	4621      	mov	r1, r4
 80044be:	f7fd ff95 	bl	80023ec <memset>
 80044c2:	e7f4      	b.n	80044ae <_calloc_r+0x16>

080044c4 <_free_r>:
 80044c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044c6:	2900      	cmp	r1, #0
 80044c8:	d044      	beq.n	8004554 <_free_r+0x90>
 80044ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044ce:	9001      	str	r0, [sp, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f1a1 0404 	sub.w	r4, r1, #4
 80044d6:	bfb8      	it	lt
 80044d8:	18e4      	addlt	r4, r4, r3
 80044da:	f7ff fa2d 	bl	8003938 <__malloc_lock>
 80044de:	4a1e      	ldr	r2, [pc, #120]	; (8004558 <_free_r+0x94>)
 80044e0:	9801      	ldr	r0, [sp, #4]
 80044e2:	6813      	ldr	r3, [r2, #0]
 80044e4:	b933      	cbnz	r3, 80044f4 <_free_r+0x30>
 80044e6:	6063      	str	r3, [r4, #4]
 80044e8:	6014      	str	r4, [r2, #0]
 80044ea:	b003      	add	sp, #12
 80044ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044f0:	f7ff ba28 	b.w	8003944 <__malloc_unlock>
 80044f4:	42a3      	cmp	r3, r4
 80044f6:	d908      	bls.n	800450a <_free_r+0x46>
 80044f8:	6825      	ldr	r5, [r4, #0]
 80044fa:	1961      	adds	r1, r4, r5
 80044fc:	428b      	cmp	r3, r1
 80044fe:	bf01      	itttt	eq
 8004500:	6819      	ldreq	r1, [r3, #0]
 8004502:	685b      	ldreq	r3, [r3, #4]
 8004504:	1949      	addeq	r1, r1, r5
 8004506:	6021      	streq	r1, [r4, #0]
 8004508:	e7ed      	b.n	80044e6 <_free_r+0x22>
 800450a:	461a      	mov	r2, r3
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	b10b      	cbz	r3, 8004514 <_free_r+0x50>
 8004510:	42a3      	cmp	r3, r4
 8004512:	d9fa      	bls.n	800450a <_free_r+0x46>
 8004514:	6811      	ldr	r1, [r2, #0]
 8004516:	1855      	adds	r5, r2, r1
 8004518:	42a5      	cmp	r5, r4
 800451a:	d10b      	bne.n	8004534 <_free_r+0x70>
 800451c:	6824      	ldr	r4, [r4, #0]
 800451e:	4421      	add	r1, r4
 8004520:	1854      	adds	r4, r2, r1
 8004522:	42a3      	cmp	r3, r4
 8004524:	6011      	str	r1, [r2, #0]
 8004526:	d1e0      	bne.n	80044ea <_free_r+0x26>
 8004528:	681c      	ldr	r4, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	6053      	str	r3, [r2, #4]
 800452e:	440c      	add	r4, r1
 8004530:	6014      	str	r4, [r2, #0]
 8004532:	e7da      	b.n	80044ea <_free_r+0x26>
 8004534:	d902      	bls.n	800453c <_free_r+0x78>
 8004536:	230c      	movs	r3, #12
 8004538:	6003      	str	r3, [r0, #0]
 800453a:	e7d6      	b.n	80044ea <_free_r+0x26>
 800453c:	6825      	ldr	r5, [r4, #0]
 800453e:	1961      	adds	r1, r4, r5
 8004540:	428b      	cmp	r3, r1
 8004542:	bf04      	itt	eq
 8004544:	6819      	ldreq	r1, [r3, #0]
 8004546:	685b      	ldreq	r3, [r3, #4]
 8004548:	6063      	str	r3, [r4, #4]
 800454a:	bf04      	itt	eq
 800454c:	1949      	addeq	r1, r1, r5
 800454e:	6021      	streq	r1, [r4, #0]
 8004550:	6054      	str	r4, [r2, #4]
 8004552:	e7ca      	b.n	80044ea <_free_r+0x26>
 8004554:	b003      	add	sp, #12
 8004556:	bd30      	pop	{r4, r5, pc}
 8004558:	20000340 	.word	0x20000340

0800455c <__ascii_mbtowc>:
 800455c:	b082      	sub	sp, #8
 800455e:	b901      	cbnz	r1, 8004562 <__ascii_mbtowc+0x6>
 8004560:	a901      	add	r1, sp, #4
 8004562:	b142      	cbz	r2, 8004576 <__ascii_mbtowc+0x1a>
 8004564:	b14b      	cbz	r3, 800457a <__ascii_mbtowc+0x1e>
 8004566:	7813      	ldrb	r3, [r2, #0]
 8004568:	600b      	str	r3, [r1, #0]
 800456a:	7812      	ldrb	r2, [r2, #0]
 800456c:	1e10      	subs	r0, r2, #0
 800456e:	bf18      	it	ne
 8004570:	2001      	movne	r0, #1
 8004572:	b002      	add	sp, #8
 8004574:	4770      	bx	lr
 8004576:	4610      	mov	r0, r2
 8004578:	e7fb      	b.n	8004572 <__ascii_mbtowc+0x16>
 800457a:	f06f 0001 	mvn.w	r0, #1
 800457e:	e7f8      	b.n	8004572 <__ascii_mbtowc+0x16>

08004580 <_malloc_usable_size_r>:
 8004580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004584:	1f18      	subs	r0, r3, #4
 8004586:	2b00      	cmp	r3, #0
 8004588:	bfbc      	itt	lt
 800458a:	580b      	ldrlt	r3, [r1, r0]
 800458c:	18c0      	addlt	r0, r0, r3
 800458e:	4770      	bx	lr

08004590 <fiprintf>:
 8004590:	b40e      	push	{r1, r2, r3}
 8004592:	b503      	push	{r0, r1, lr}
 8004594:	4601      	mov	r1, r0
 8004596:	ab03      	add	r3, sp, #12
 8004598:	4805      	ldr	r0, [pc, #20]	; (80045b0 <fiprintf+0x20>)
 800459a:	f853 2b04 	ldr.w	r2, [r3], #4
 800459e:	6800      	ldr	r0, [r0, #0]
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	f7fe ff59 	bl	8003458 <_vfiprintf_r>
 80045a6:	b002      	add	sp, #8
 80045a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045ac:	b003      	add	sp, #12
 80045ae:	4770      	bx	lr
 80045b0:	20000060 	.word	0x20000060

080045b4 <__ascii_wctomb>:
 80045b4:	b149      	cbz	r1, 80045ca <__ascii_wctomb+0x16>
 80045b6:	2aff      	cmp	r2, #255	; 0xff
 80045b8:	bf85      	ittet	hi
 80045ba:	238a      	movhi	r3, #138	; 0x8a
 80045bc:	6003      	strhi	r3, [r0, #0]
 80045be:	700a      	strbls	r2, [r1, #0]
 80045c0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80045c4:	bf98      	it	ls
 80045c6:	2001      	movls	r0, #1
 80045c8:	4770      	bx	lr
 80045ca:	4608      	mov	r0, r1
 80045cc:	4770      	bx	lr

080045ce <abort>:
 80045ce:	b508      	push	{r3, lr}
 80045d0:	2006      	movs	r0, #6
 80045d2:	f000 f82b 	bl	800462c <raise>
 80045d6:	2001      	movs	r0, #1
 80045d8:	f7fd f844 	bl	8001664 <_exit>

080045dc <_raise_r>:
 80045dc:	291f      	cmp	r1, #31
 80045de:	b538      	push	{r3, r4, r5, lr}
 80045e0:	4604      	mov	r4, r0
 80045e2:	460d      	mov	r5, r1
 80045e4:	d904      	bls.n	80045f0 <_raise_r+0x14>
 80045e6:	2316      	movs	r3, #22
 80045e8:	6003      	str	r3, [r0, #0]
 80045ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045ee:	bd38      	pop	{r3, r4, r5, pc}
 80045f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80045f2:	b112      	cbz	r2, 80045fa <_raise_r+0x1e>
 80045f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80045f8:	b94b      	cbnz	r3, 800460e <_raise_r+0x32>
 80045fa:	4620      	mov	r0, r4
 80045fc:	f000 f830 	bl	8004660 <_getpid_r>
 8004600:	462a      	mov	r2, r5
 8004602:	4601      	mov	r1, r0
 8004604:	4620      	mov	r0, r4
 8004606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800460a:	f000 b817 	b.w	800463c <_kill_r>
 800460e:	2b01      	cmp	r3, #1
 8004610:	d00a      	beq.n	8004628 <_raise_r+0x4c>
 8004612:	1c59      	adds	r1, r3, #1
 8004614:	d103      	bne.n	800461e <_raise_r+0x42>
 8004616:	2316      	movs	r3, #22
 8004618:	6003      	str	r3, [r0, #0]
 800461a:	2001      	movs	r0, #1
 800461c:	e7e7      	b.n	80045ee <_raise_r+0x12>
 800461e:	2400      	movs	r4, #0
 8004620:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004624:	4628      	mov	r0, r5
 8004626:	4798      	blx	r3
 8004628:	2000      	movs	r0, #0
 800462a:	e7e0      	b.n	80045ee <_raise_r+0x12>

0800462c <raise>:
 800462c:	4b02      	ldr	r3, [pc, #8]	; (8004638 <raise+0xc>)
 800462e:	4601      	mov	r1, r0
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	f7ff bfd3 	b.w	80045dc <_raise_r>
 8004636:	bf00      	nop
 8004638:	20000060 	.word	0x20000060

0800463c <_kill_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	4d07      	ldr	r5, [pc, #28]	; (800465c <_kill_r+0x20>)
 8004640:	2300      	movs	r3, #0
 8004642:	4604      	mov	r4, r0
 8004644:	4608      	mov	r0, r1
 8004646:	4611      	mov	r1, r2
 8004648:	602b      	str	r3, [r5, #0]
 800464a:	f7fc fffb 	bl	8001644 <_kill>
 800464e:	1c43      	adds	r3, r0, #1
 8004650:	d102      	bne.n	8004658 <_kill_r+0x1c>
 8004652:	682b      	ldr	r3, [r5, #0]
 8004654:	b103      	cbz	r3, 8004658 <_kill_r+0x1c>
 8004656:	6023      	str	r3, [r4, #0]
 8004658:	bd38      	pop	{r3, r4, r5, pc}
 800465a:	bf00      	nop
 800465c:	20000348 	.word	0x20000348

08004660 <_getpid_r>:
 8004660:	f7fc bfe8 	b.w	8001634 <_getpid>

08004664 <_init>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	bf00      	nop
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr

08004670 <_fini>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	bf00      	nop
 8004674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004676:	bc08      	pop	{r3}
 8004678:	469e      	mov	lr, r3
 800467a:	4770      	bx	lr
